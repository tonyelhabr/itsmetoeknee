<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Tony&#39;s Blog</title>
<link>https://itsmetoeknee.netlify.app/index.html</link>
<atom:link href="https://itsmetoeknee.netlify.app/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.2.335</generator>
<lastBuildDate>Mon, 20 Feb 2023 06:00:00 GMT</lastBuildDate>
<item>
  <title>xG Model Calibration</title>
  <dc:creator>Tony ElHabr</dc:creator>
  <link>https://itsmetoeknee.netlify.app/posts/opta-xg-model-calibration/index.html</link>
  <description><![CDATA[ 



<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Recently, <a href="https://twitter.com/TonyElHabr/status/1614288983105617922">I pointed out</a> what seemed to be a bug with the <a href="https://theanalyst.com/na/2021/07/what-are-expected-goals-xg/">expected goals (xG)</a> data shown on <a href="https://fbref.com">FBref</a>. In particular, the difference between non-penalty goals (npG) and non-penalty xG (npxG)<sup>1</sup> seemed to be an outlier for the 2021/22 season across <a href="https://fbref.com/en/comps/Big5/Big-5-European-Leagues-Stats">the Big 5 leagues</a>.</p>
<blockquote class="twitter-tweet blockquote">
<p lang="en" dir="ltr">
</p><p>“aLl xG mOdeLs ArE thE sAme”<br><br>my brother in christ wut is this then <a href="https://t.co/7tjp1VFkoc">pic.twitter.com/7tjp1VFkoc</a></p>
<p></p>
<p>— Tony (<span class="citation" data-cites="TonyElHabr">@TonyElHabr</span>) <a href="https://twitter.com/TonyElHabr/status/1614288983105617922?ref_src=twsrc%5Etfw">January 14, 2023</a></p>
</blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>As it turns out FBref and their data provider, <a href="https://www.statsperform.com/opta/">Opta</a>, agreed! On Feb.&nbsp;8, 2023, <a href="https://twitter.com/fbref/status/1623358271791722502?s=20">they posted an update</a> indicating that they adjusted 2021/22 xG such that the difference between npG and npxG is much more in line with other seasons.</p>
<p>The FBref/Opta update gave me two ideas:</p>
<ol type="1">
<li><p><strong>Compare pre- and post-update xG</strong> to identify where/how adjustments were applied.<sup>2</sup></p></li>
<li><p><strong>Quantify the <a href="https://en.wikipedia.org/wiki/Calibration_(statistics)">calibration</a> of their xG model.</strong></p></li>
</ol>
<div class="cell">

</div>
<div class="cell">

</div>
</section>
<section id="pre--and-post-update-xg-comparison" class="level2">
<h2 class="anchored" data-anchor-id="pre--and-post-update-xg-comparison">1. Pre- and post-update xG comparison</h2>
<div class="cell">

</div>
<div class="cell">

</div>
<p>First, let’s take a wholistic look at all of the shots for the 2021/22 seasons played in Big 5 leagues.<sup>3</sup></p>
<div class="cell">

</div>
<p><img src="https://itsmetoeknee.netlify.app/posts/opta-xg-model-calibration/old_vs_new_xg.png" class="img-fluid"></p>
<p>Of the 44,986 shots in the data set, 30,326 (67.2%) had changes to their xG values.<sup>4</sup> Of those that changed, 23, 584 (78.0%) were reduced, i.e.&nbsp;the pre-update xG value was higher. The average change was pretty minimal, just about ~0.01 xG.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">glimpse</span>(discretized_updated_np_shots)</span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;">#&gt; Rows: 44,986</span></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;">#&gt; Columns: 16</span></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;">#&gt; $ league             &lt;fct&gt; ENG, ENG, ENG, ENG, ENG, ENG, ENG, ENG, ENG, ENG, E…</span></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;">#&gt; $ date               &lt;date&gt; 2021-08-13, 2021-08-13, 2021-08-13, 2021-08-13, 20…</span></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;">#&gt; $ half               &lt;dbl&gt; 1, 1, 1, 1, 1, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2, 2, …</span></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;">#&gt; $ minute             &lt;chr&gt; "11", "12", "22", "28", "30", "66", "73", "80", "2"…</span></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;">#&gt; $ team               &lt;chr&gt; "Brentford", "Brentford", "Brentford", "Brentford",…</span></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;">#&gt; $ player             &lt;chr&gt; "Frank Onyeka", "Bryan Mbeumo", "Sergi Canós", "Ser…</span></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;">#&gt; $ new_xg             &lt;dbl&gt; 0.08, 0.09, 0.02, 0.06, 0.26, 0.06, 0.40, 0.28, 0.0…</span></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;">#&gt; $ old_xg             &lt;dbl&gt; 0.09, 0.14, 0.04, 0.07, 0.31, 0.13, 0.58, 0.27, 0.0…</span></span>
<span id="cb1-12"><span class="co" style="color: #5E5E5E;">#&gt; $ is_goal            &lt;fct&gt; no, no, yes, no, no, no, yes, no, no, no, no, no, n…</span></span>
<span id="cb1-13"><span class="co" style="color: #5E5E5E;">#&gt; $ distance           &lt;fct&gt; "(8,10]", "(12,14]", "(16,18]", "(20,25]", "(12,14]…</span></span>
<span id="cb1-14"><span class="co" style="color: #5E5E5E;">#&gt; $ sca1               &lt;fct&gt; pass_live, pass_live, pass_live, pass_live, take_on…</span></span>
<span id="cb1-15"><span class="co" style="color: #5E5E5E;">#&gt; $ body_part          &lt;fct&gt; Head, Right Foot, Right Foot, Right Foot, Right Foo…</span></span>
<span id="cb1-16"><span class="co" style="color: #5E5E5E;">#&gt; $ is_from_deflection &lt;fct&gt; no, no, no, no, no, no, no, no, no, no, no, no, no,…</span></span>
<span id="cb1-17"><span class="co" style="color: #5E5E5E;">#&gt; $ is_from_volley     &lt;fct&gt; no, no, no, no, no, no, no, no, no, yes, no, no, no…</span></span>
<span id="cb1-18"><span class="co" style="color: #5E5E5E;">#&gt; $ is_free_kick       &lt;fct&gt; no, no, no, no, no, no, no, no, no, no, no, no, no,…</span></span>
<span id="cb1-19"><span class="co" style="color: #5E5E5E;">#&gt; $ is_primary_foot    &lt;fct&gt; missing, no, yes, yes, no, yes, missing, missing, y…</span></span>
<span id="cb1-20"></span>
<span id="cb1-21">discretized_updated_np_shots <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb1-22">  <span class="fu" style="color: #4758AB;">filter</span>(<span class="sc" style="color: #5E5E5E;">!</span>is_penalty) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb1-23">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">xgd =</span> old_xg <span class="sc" style="color: #5E5E5E;">-</span> new_xg) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb1-24">  <span class="fu" style="color: #4758AB;">pull</span>(xgd) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb1-25">  <span class="fu" style="color: #4758AB;">mean</span>()</span>
<span id="cb1-26"><span class="co" style="color: #5E5E5E;">#&gt; [1] 0.0095014</span></span></code></pre></div>
</details>
</div>
<p>To get more insight into how/why xG changed, we can look at changes to xG values grouped by various <code>feature</code>s that FBref publishes alongside each shot’s xG, including <code>distance</code> (yards), <code>sca1</code> (direct <a href="https://www.sports-reference.com/blog/2020/04/goal-creation-possession-passing-and-more-advanced-stats-on-fbref/">shot-creating action</a>), <code>body_part</code>, <code>is_from_deflection</code>, <code>is_from_volley</code>, <code>is_free_kick</code>, and <code>is_primary_foot</code>.<sup>5</sup><sup>6</sup></p>
<div class="cell">

</div>
<p>The table below shows that the reductions in npxG occurred most frequently for longer <code>distance</code>s, suggesting that the pre-update xG model was over-predicting xG for longer shots. Interestingly, xG for shots when interceptions led directly to the shot (<code>sca1</code>), and xG for shots with <code>body_part = "other"</code> (non-foot, non-header) were also frequently reduced, in the cases where xG was changed.</p>
<table class="table">
<colgroup>
<col style="width: 8%">
<col style="width: 12%">
<col style="width: 16%">
<col style="width: 20%">
<col style="width: 42%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">Feature</th>
<th style="text-align: left;">Group</th>
<th style="text-align: right;"># of non-penalty shots</th>
<th style="text-align: right;"># of shots with changed npxG</th>
<th style="text-align: right;"># of shots with lower post-update npxG of those that changed</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><code>distance</code></td>
<td style="text-align: left;"><code>(25,30]</code></td>
<td style="text-align: right;">6,061</td>
<td style="text-align: right;">3,659 (60.4%)</td>
<td style="text-align: right;">3,437 (93.9%)</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>distance</code></td>
<td style="text-align: left;"><code>(20,25]</code></td>
<td style="text-align: right;">6,760</td>
<td style="text-align: right;">4,463 (66.0%)</td>
<td style="text-align: right;">4,088 (91.6%)</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>sca1</code></td>
<td style="text-align: left;"><code>"interception"</code></td>
<td style="text-align: right;">149</td>
<td style="text-align: right;">96 (64.4%)</td>
<td style="text-align: right;">87 (90.6%)</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>distance</code></td>
<td style="text-align: left;"><code>(18,20]</code></td>
<td style="text-align: right;">1,889</td>
<td style="text-align: right;">1,232 (65.2%)</td>
<td style="text-align: right;">1,088 (88.3%)</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>distance</code></td>
<td style="text-align: left;"><code>(30,35]</code></td>
<td style="text-align: right;">2,725</td>
<td style="text-align: right;">1,267 (46.5%)</td>
<td style="text-align: right;">1,117 (88.2%)</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>body_part</code></td>
<td style="text-align: left;"><code>"Other"</code></td>
<td style="text-align: right;">191</td>
<td style="text-align: right;">153 (80.1%)</td>
<td style="text-align: right;">130 (85.0%)</td>
</tr>
</tbody>
</table>
<p>On the other end of the spectrum, reductions in npxG occurred least frequently for shorter <code>distance</code> buckets (<code>(0,2]</code>, <code>(2,4]</code>, <code>(4,6]</code>, <code>(6,8)</code>). Reductions still occurred a majority of the time when there was a change—note that each has <code>&gt;50%</code> for the last column—for all but the shortest <code>distance</code> group, <code>(0,2]</code>.</p>
<table class="table">
<colgroup>
<col style="width: 10%">
<col style="width: 8%">
<col style="width: 17%">
<col style="width: 21%">
<col style="width: 42%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">Feature</th>
<th style="text-align: left;">Group</th>
<th style="text-align: right;"># of non-penalty shots</th>
<th style="text-align: right;"># of shots with changed npxG</th>
<th style="text-align: right;"># of shots with lower post-update npxG of those that changed</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;"><code>distance</code></td>
<td style="text-align: left;"><code>(0,2]</code></td>
<td style="text-align: right;">173</td>
<td style="text-align: right;">130 (75.1%)</td>
<td style="text-align: right;">51 (39.2%)</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>distance</code></td>
<td style="text-align: left;"><code>(2,4]</code></td>
<td style="text-align: right;">1,087</td>
<td style="text-align: right;">826 (76.0%)</td>
<td style="text-align: right;">428 (51.8%)</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>distance</code></td>
<td style="text-align: left;"><code>(4,6]</code></td>
<td style="text-align: right;">2,003</td>
<td style="text-align: right;">1,479 (73.8%)</td>
<td style="text-align: right;">831 (56.2%)</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>distance</code></td>
<td style="text-align: left;"><code>(35,Inf]</code></td>
<td style="text-align: right;">539</td>
<td style="text-align: right;">313 (58.1%)</td>
<td style="text-align: right;">177 (56.5%)</td>
</tr>
<tr class="odd">
<td style="text-align: left;"><code>distance</code></td>
<td style="text-align: left;"><code>(6,8]</code></td>
<td style="text-align: right;">2,557</td>
<td style="text-align: right;">1,882 (73.6%)</td>
<td style="text-align: right;">1,183 (62.9%)</td>
</tr>
<tr class="even">
<td style="text-align: left;"><code>is_free_kick</code></td>
<td style="text-align: left;"><code>"yes"</code></td>
<td style="text-align: right;">1,576</td>
<td style="text-align: right;">882 (56.0%)</td>
<td style="text-align: right;">557 (63.2%)</td>
</tr>
</tbody>
</table>
</section>
<section id="xg-model-calibration" class="level2">
<h2 class="anchored" data-anchor-id="xg-model-calibration">2. xG Model Calibration</h2>
<p><a href="https://tonyelhabr.rbind.io/post/epl-xpts-simulation-1/#match-predictive-performance7">I’ve touched on model calibration before</a>, when discussing xG-implied match outcome probabilities. There, I wrote my own code to create a <a href="https://changhsinlee.com/python-calibration-plot/">calibration plot</a>. Since then, the <a href="https://www.tidymodels.org/"><code>{tidymodels}</code> team</a> has added <a href="https://www.tidyverse.org/blog/2022/11/model-calibration/">calibration plot functionality</a> to the <a href="https://probably.tidymodels.org/"><code>{probably}</code> package</a>. Let’s try it out.</p>
<p>Here, we’ll use a big sample of data—all 2017/18 - 2021/22 non-penalty shots for the Big 5 leagues and several other first and second tier leagues.<sup>7</sup></p>
<div class="cell">

</div>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">np_shots <span class="sc" style="color: #5E5E5E;">|&gt;</span> <span class="fu" style="color: #4758AB;">count</span>(league, <span class="at" style="color: #657422;">name =</span> <span class="st" style="color: #20794D;">'n_shots'</span>)</span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;">#&gt; # A tibble: 13 × 2</span></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;">#&gt;    league    n_shots</span></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;">#&gt;    &lt;chr&gt;       &lt;int&gt;</span></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;">#&gt;  1 BRA_1st_M   39380</span></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;">#&gt;  2 ENG_1st_F   11366</span></span>
<span id="cb2-7"><span class="co" style="color: #5E5E5E;">#&gt;  3 ENG_1st_M   46766</span></span>
<span id="cb2-8"><span class="co" style="color: #5E5E5E;">#&gt;  4 ENG_2nd_M   52701</span></span>
<span id="cb2-9"><span class="co" style="color: #5E5E5E;">#&gt;  5 ESP_1st_M   43398</span></span>
<span id="cb2-10"><span class="co" style="color: #5E5E5E;">#&gt;  6 FRA_1st_M   43021</span></span>
<span id="cb2-11"><span class="co" style="color: #5E5E5E;">#&gt;  7 GER_1st_M   39148</span></span>
<span id="cb2-12"><span class="co" style="color: #5E5E5E;">#&gt;  8 ITA_1st_M   49903</span></span>
<span id="cb2-13"><span class="co" style="color: #5E5E5E;">#&gt;  9 MEX_1st_M   32650</span></span>
<span id="cb2-14"><span class="co" style="color: #5E5E5E;">#&gt; 10 NED_1st_M   29803</span></span>
<span id="cb2-15"><span class="co" style="color: #5E5E5E;">#&gt; 11 POR_1st_M   27366</span></span>
<span id="cb2-16"><span class="co" style="color: #5E5E5E;">#&gt; 12 USA_1st_F    9887</span></span>
<span id="cb2-17"><span class="co" style="color: #5E5E5E;">#&gt; 13 USA_1st_M   31047</span></span></code></pre></div>
</details>
</div>
<section id="calibration-plot" class="level3">
<h3 class="anchored" data-anchor-id="calibration-plot">Calibration plot</h3>
<p>We can use <code>probably::cal_plot_breaks()</code> to visually assess whether the observed rate of non-penalty goals (y-axis) is close to the predicted probably of goals (npxG, x-axis).<sup>8</sup> If the xG model’s predictions are “well calibrated”, the calibration points will align with the “ideal” line having slope 1 and intercept 0. Points at which the curve is below the diagonal line indicate where the model is more likelty to overpredict; and, likewise, points where the curve is above the diagonal line indicate where the model is underpredicting.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">library</span>(probably) <span class="do" style="color: #5E5E5E;
font-style: italic;">## 0.1.0.9007</span></span>
<span id="cb3-2"></span>
<span id="cb3-3">overall_calibration <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">cal_plot_breaks</span>(</span>
<span id="cb3-4">  np_shots,</span>
<span id="cb3-5">  <span class="at" style="color: #657422;">truth =</span> is_goal,</span>
<span id="cb3-6">  <span class="at" style="color: #657422;">estimate =</span> xg,</span>
<span id="cb3-7">  <span class="at" style="color: #657422;">num_breaks =</span> <span class="dv" style="color: #AD0000;">20</span>,</span>
<span id="cb3-8">  <span class="at" style="color: #657422;">conf_level =</span> <span class="fl" style="color: #AD0000;">0.9</span>,</span>
<span id="cb3-9">  <span class="at" style="color: #657422;">event_level =</span> <span class="st" style="color: #20794D;">'second'</span></span>
<span id="cb3-10">)</span></code></pre></div>
</details>
</div>
<div class="cell">

</div>
<p><img src="https://itsmetoeknee.netlify.app/posts/opta-xg-model-calibration/overall_calibration.png" class="img-fluid"></p>
<p>We can see that the model is pretty well calibrated on the lower end of the spectrum, when xG &lt; 0.25. This makes up a larger majority of the shots (~90%). However, the model is not as well calibrated for higher xG values, tending to overpredict. For example, at the calibration point where npxG is <code>0.675</code>, the actual goal rate is <code>0.6</code>.</p>
</section>
<section id="brier-skill-score-bss" class="level3">
<h3 class="anchored" data-anchor-id="brier-skill-score-bss">Brier Skill Score (BSS)</h3>
<p>One thing that is not provided in the <code>{tidymodels}</code> realm (specifically, the <code>{yardstick}</code> package) is a function to compute <a href="https://en.wikipedia.org/wiki/Brier_score">Brier score</a>. Nonetheless, we can define a Brier score function ourselves by closely following <a href="https://www.tidymodels.org/learn/develop/metrics/">the mean squared error custom metric example</a> provided by the <code>{tidymodels}</code> team.<sup>9</sup></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;">library</span>(yardstick)</span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;">library</span>(rlang)</span>
<span id="cb4-3">brier_score <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(data, ...) {</span>
<span id="cb4-4">  <span class="fu" style="color: #4758AB;">UseMethod</span>(<span class="st" style="color: #20794D;">'brier_score'</span>)</span>
<span id="cb4-5">}</span>
<span id="cb4-6"></span>
<span id="cb4-7">brier_score <span class="ot" style="color: #003B4F;">&lt;-</span> yardstick<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">new_prob_metric</span>(brier_score, <span class="at" style="color: #657422;">direction =</span> <span class="st" style="color: #20794D;">'minimize'</span>)</span>
<span id="cb4-8"></span>
<span id="cb4-9">brier_score_vec <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(truth, estimate, <span class="at" style="color: #657422;">na_rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>, event_level, ...) {</span>
<span id="cb4-10">  </span>
<span id="cb4-11">  brier_score_impl <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(truth, estimate, event_level, ...) {</span>
<span id="cb4-12">    truth <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">1</span> <span class="sc" style="color: #5E5E5E;">-</span> (<span class="fu" style="color: #4758AB;">as.numeric</span>(truth) <span class="sc" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb4-13">    </span>
<span id="cb4-14">    <span class="cf" style="color: #003B4F;">if</span> (event_level <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'second'</span>) {</span>
<span id="cb4-15">      truth <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">1</span> <span class="sc" style="color: #5E5E5E;">-</span> truth</span>
<span id="cb4-16">    }</span>
<span id="cb4-17">    </span>
<span id="cb4-18">    <span class="fu" style="color: #4758AB;">mean</span>((truth <span class="sc" style="color: #5E5E5E;">-</span> estimate)<span class="sc" style="color: #5E5E5E;">^</span><span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb4-19">  }</span>
<span id="cb4-20">  </span>
<span id="cb4-21">  <span class="do" style="color: #5E5E5E;
font-style: italic;">## Recycle the estimate value if it's scalar-ish.</span></span>
<span id="cb4-22">  <span class="cf" style="color: #003B4F;">if</span> (<span class="fu" style="color: #4758AB;">length</span>(estimate) <span class="sc" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">1</span>) {</span>
<span id="cb4-23">    estimate <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rep</span>(estimate, <span class="fu" style="color: #4758AB;">length</span>(truth))</span>
<span id="cb4-24">  }</span>
<span id="cb4-25">  </span>
<span id="cb4-26">  yardstick<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">metric_vec_template</span>(</span>
<span id="cb4-27">    <span class="at" style="color: #657422;">metric_impl =</span> brier_score_impl,</span>
<span id="cb4-28">    <span class="at" style="color: #657422;">truth =</span> truth,</span>
<span id="cb4-29">    <span class="at" style="color: #657422;">estimate =</span> estimate,</span>
<span id="cb4-30">    <span class="at" style="color: #657422;">na_rm =</span> na_rm,</span>
<span id="cb4-31">    <span class="at" style="color: #657422;">cls =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'factor'</span>, <span class="st" style="color: #20794D;">'numeric'</span>),</span>
<span id="cb4-32">    <span class="at" style="color: #657422;">estimator =</span> <span class="st" style="color: #20794D;">'binary'</span>,</span>
<span id="cb4-33">    <span class="at" style="color: #657422;">event_level =</span> event_level,</span>
<span id="cb4-34">    ...</span>
<span id="cb4-35">  )</span>
<span id="cb4-36">}</span>
<span id="cb4-37"></span>
<span id="cb4-38">brier_score.data.frame <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(data, truth, estimate, <span class="at" style="color: #657422;">na_rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>, <span class="at" style="color: #657422;">event_level =</span> <span class="st" style="color: #20794D;">'first'</span>, ...) {</span>
<span id="cb4-39">  yardstick<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">metric_summarizer</span>(</span>
<span id="cb4-40">    <span class="at" style="color: #657422;">metric_nm =</span> <span class="st" style="color: #20794D;">'brier_score'</span>,</span>
<span id="cb4-41">    <span class="at" style="color: #657422;">metric_fn =</span> brier_score_vec,</span>
<span id="cb4-42">    <span class="at" style="color: #657422;">data =</span> data,</span>
<span id="cb4-43">    <span class="at" style="color: #657422;">truth =</span> <span class="sc" style="color: #5E5E5E;">!!</span>rlang<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">enquo</span>(truth),</span>
<span id="cb4-44">    <span class="at" style="color: #657422;">estimate =</span> <span class="sc" style="color: #5E5E5E;">!!</span>rlang<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">enquo</span>(estimate),</span>
<span id="cb4-45">    <span class="at" style="color: #657422;">na_rm =</span> na_rm,</span>
<span id="cb4-46">    <span class="at" style="color: #657422;">event_level =</span> event_level,</span>
<span id="cb4-47">    ...</span>
<span id="cb4-48">  )</span>
<span id="cb4-49">}</span></code></pre></div>
</details>
</div>
<p>Let’s compute the Brier scores for (1) the overall goal rate (i.e.&nbsp;shots per goal) and (2) xG. We should expect the Brier score for the latter to be closer to 0 (perfect model), since xG should be a better predictor of goals than the naive goal rate.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">np_goal_rate <span class="ot" style="color: #003B4F;">&lt;-</span> np_shots <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb5-2">  <span class="fu" style="color: #4758AB;">count</span>(is_goal) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb5-3">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">prop =</span> n <span class="sc" style="color: #5E5E5E;">/</span> <span class="fu" style="color: #4758AB;">sum</span>(n)) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb5-4">  <span class="fu" style="color: #4758AB;">filter</span>(is_goal <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'yes'</span>) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb5-5">  <span class="fu" style="color: #4758AB;">pull</span>(prop)</span>
<span id="cb5-6">np_goal_rate</span>
<span id="cb5-7"><span class="co" style="color: #5E5E5E;">#&gt; 0.0960288</span></span>
<span id="cb5-8"></span>
<span id="cb5-9">np_goal_rate_brier_score <span class="ot" style="color: #003B4F;">&lt;-</span> np_shots <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb5-10">  <span class="fu" style="color: #4758AB;">brier_score</span>(</span>
<span id="cb5-11">    <span class="at" style="color: #657422;">truth =</span> is_goal,</span>
<span id="cb5-12">    <span class="at" style="color: #657422;">estimate =</span> <span class="sc" style="color: #5E5E5E;">!!</span>np_goal_rate,</span>
<span id="cb5-13">    <span class="at" style="color: #657422;">event_level =</span> <span class="st" style="color: #20794D;">'second'</span></span>
<span id="cb5-14">  ) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb5-15">  <span class="fu" style="color: #4758AB;">pull</span>(.estimate)</span>
<span id="cb5-16">np_goal_rate_brier_score</span>
<span id="cb5-17"><span class="co" style="color: #5E5E5E;">#&gt; [1] 0.08680727</span></span>
<span id="cb5-18"></span>
<span id="cb5-19">npxg_brier_score <span class="ot" style="color: #003B4F;">&lt;-</span> np_shots <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb5-20">  <span class="fu" style="color: #4758AB;">brier_score</span>(</span>
<span id="cb5-21">    <span class="at" style="color: #657422;">truth =</span> is_goal,</span>
<span id="cb5-22">    <span class="at" style="color: #657422;">estimate =</span> xg,</span>
<span id="cb5-23">    <span class="at" style="color: #657422;">event_level =</span> <span class="st" style="color: #20794D;">'second'</span></span>
<span id="cb5-24">  ) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb5-25">  <span class="fu" style="color: #4758AB;">pull</span>(.estimate)</span>
<span id="cb5-26">npxg_brier_score</span>
<span id="cb5-27"><span class="co" style="color: #5E5E5E;">#&gt; [1] 0.07150071</span></span></code></pre></div>
</details>
</div>
<p>Now we can go on to compute <a href="https://en.wikipedia.org/wiki/Brier_score#Brier_Skill_Score_(BSS)">Brier skill score (BSS)</a> using an appropriate reference Brier score.<sup>10</sup> In this context, the average goal rate seems to be a good choice for a baseline. In contrast to the Brier score, a higher BSS is ideal. (A perfect model would have a BSS of 1.)</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">npxg_brier_score <span class="ot" style="color: #003B4F;">&lt;-</span> np_shots <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb6-2">  <span class="fu" style="color: #4758AB;">brier_score</span>(</span>
<span id="cb6-3">    <span class="at" style="color: #657422;">truth =</span> is_goal,</span>
<span id="cb6-4">    <span class="at" style="color: #657422;">estimate =</span> xg,</span>
<span id="cb6-5">    <span class="at" style="color: #657422;">event_level =</span> <span class="st" style="color: #20794D;">'second'</span></span>
<span id="cb6-6">  ) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb6-7">  <span class="fu" style="color: #4758AB;">pull</span>(.estimate)</span>
<span id="cb6-8"><span class="dv" style="color: #AD0000;">1</span> <span class="sc" style="color: #5E5E5E;">-</span> (npxg_brier_score <span class="sc" style="color: #5E5E5E;">/</span> np_goal_rate_brier_score)</span>
<span id="cb6-9"><span class="co" style="color: #5E5E5E;">#&gt; [1] 0.176328</span></span></code></pre></div>
</details>
</div>
<p>A BSS of ~0.18 is not bad! This is better than <a href="https://projects.fivethirtyeight.com/checking-our-work/">FiveThirtyEight’s BSS</a> for predicting the results for men’s World Cup matches (~0.12 at time of writing) and right around their BSS for predicting WNBA playoff game outcomes (~0.18).</p>
</section>
<section id="grouped-calibration-and-bss" class="level3">
<h3 class="anchored" data-anchor-id="grouped-calibration-and-bss">Grouped Calibration and BSS</h3>
<p>Now let’s take a look at model calibration under specific criteria. Is the model worse for shots that follow a dribble (<code>take_on</code>) shot-creating action? After a <code>live_ball</code> pass? etc.</p>
<div class="cell">

</div>
<p><img src="https://itsmetoeknee.netlify.app/posts/opta-xg-model-calibration/sca1_calibration.png" class="img-fluid"></p>
<div class="cell">

</div>
<p>A couple of observations and thoughts:</p>
<ul>
<li><p>xG of shots following another shot are over-predicted so much that it causes the BSS to be negative. This means that the model is actually doing worse in its xG assignment than simply predicting naive goal rate for shots after another shot!</p></li>
<li><p>A relatively “jagged” calibration plot may not correspond with a worse (lower) BSS score; and visa versa, a relatively “smooth” calibration plot may not correspond with a better (higher) BSS.</p>
<ul>
<li>Note that the <code>fouled</code> calibration looks jagged for higher predicted xG, but the fact goals are only scored on about 5% shots immediately following a foul means that inprecise probabilities are not “penalized” quite as much. On the other hand, while the <code>pass_live</code> calibration looks relatively smooth, the fact that 10% of shots following live ball passes (2x the frequency for shots following fouls) means that it is more penalized for imprecision than an otherwise equivalent post-<code>fouled</code> shot. In fact, this is <a href="https://en.wikipedia.org/wiki/Brier_score#Shortcomings">one of the shortcomings of BSS</a>—it does not do a great job with evaluation of relatively infrequent events.</li>
</ul></li>
</ul>
<p>Next, let’s take a look at calibration off shots coming after deflections (of other shots).</p>
<div class="cell">

</div>
<p><img src="https://itsmetoeknee.netlify.app/posts/opta-xg-model-calibration/deflection_calibration.png" class="img-fluid"></p>
<ul>
<li>The model doesn’t seem to be very well calibrated for shots following deflections! Like shots following other shots in the shot-creating action calibration plot, the BSS for shots after deflections is negative. And, perhaps more interestingly, the model seems to underpredict post-deflection shots, which is the opposite of it’s general tendency to overpredict. (See the wholistic calibration plot from before.)
<ul>
<li>I’d suspect that there’s lots of confounders that might explain the lack of calibration after deflections. For one, it could be the case that there are often zero defenders between the shot-taker and keeper for shots following a deflection. As far as I know, the Opta model doesn’t have an explicit feature for this.</li>
<li>It might also be the case that Opta’s <a href="https://theanalyst.com/eu/2021/07/what-are-expected-goals-xg">“big chance” indicator</a>—which is not published on FBref but which I suspect take on a value of “yes”/1/true for many post-deflection shots—may have some flaws.</li>
</ul></li>
</ul>
<p>Moving on, let’s look at calibration of the xG model by groups of leagues, splitting out by tier and gender.</p>
<div class="cell">

</div>
<p><img src="https://itsmetoeknee.netlify.app/posts/opta-xg-model-calibration/league_group_calibration.png" class="img-fluid"></p>
<ul>
<li><a href="https://statsbomb.com/articles/soccer/analytics-and-modelling-in-womens-football/">StatsBomb has talked</a> about how a “gender-aware” model outperformed a baseline model, so one might expect the calibration of Opta’s singular model to be weaker for the women’s game. It turns out that while, yes, the calibration seems to be a bit worse for shots in the women’s leagues, the overall difference in model performance for men’s and women’s leagues seems to be trivial for the sample here.</li>
<li>Interestingly, the calibration of the model for non-Big 5 leagues and the English men’s Championship league are slightly better according to BSS, although the differences (both visually, with the calibration curve, and with BSS) are very minimal.</li>
</ul>
<p>Finally, let’s look at how footedness may play a role in model calibration. As far as I know, whether or not a footed shot is take by a player’s primary foot is not an input into the Opta model, so it may be particularly interesting to look at.</p>
<div class="cell">

</div>
<p><img src="https://itsmetoeknee.netlify.app/posts/opta-xg-model-calibration/footedness_calibration.png" class="img-fluid"></p>
<ul>
<li>Despite my suspicion that xG for shots taken by a player’s weaker foot (<code>right foot shot, left-footed</code> and <code>left foot shot, right-footed</code>) might be severely overpredicted, this doesn’t really seem to be the case. Yes, the model tends to overpredict for these kinds of shots, but the degree to which overprediction occurs doesn’t seem out of line with the whole model.
<ul>
<li>I can think of least two types of “selection bias” at play here that might explain why the calibration isn’t as bad as I might have guessed for weak-footed shots:
<ol type="1">
<li>Players are more likely to take weak-footed shots when they’re closer to the goal, where shots are likely to have higher xG, but also where shots are also more likely to go in.</li>
<li>Players are less likely to take more difficult shots with their weak foot, so they’re not taking as many shots that are unlikely to go in, holding all else equal.</li>
</ol></li>
</ul></li>
<li>Of the non-footed shots, it’s interesting to see that the BSS for headers and shots from <code>other</code> body parts are not particularly well calibrated. In fact, the latter has a negative BSS, indicating that we’d better off with a model that predicted the average goal rate for such shots.</li>
</ul>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>We’ve explored the wonderful world of model calibration, making friends with BSS and calibration curves in our investigation of a public xG model. Are BSS and calibration curves the be-all and end-all when it comes to model evaluation? Of course not! But they’re useful tools that may or may not be appropriate for your use case.</p>
<p>When it comes to the Opta xG model specifically, am I implying that the model is bad? Of course not! Yes, faceted calibration curves and feature-specific BSS can make a model look bad, but we must keep in mind that there are trade-offs to be made with modeling. Fine-tuning a model to be more well calibrated under certain conditions, e.g.&nbsp;shots after deflections, may make other parts of the model worse! It’s all about trade-offs.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>It’s typically better to analyze expected goals after removing penalties since penalties can distort quantities, adding “noise” to an analysis.↩︎</p></li>
<li id="fn2"><p>FBref/Opta didn’t specify how they changed their xG model. Given how I observed very only trivial differences in the shot-level xG for prior seasons, it’s possible that they didn’t even change their model! There could have been some data issue specific to the 2021/22 season, that, when addressed, resulted in more plausible xG.↩︎</p></li>
<li id="fn3"><p>All code available <a href="https://github.com/tonyelhabr/itsmetoeknee">on GitHub</a>.↩︎</p></li>
<li id="fn4"><p>Observe that, for a large majority of shots, where xG is in the (0, 0.05] range, xG either did not change at all or only trivially changed. (See the blur of white points on the left-hand side of the plot.)↩︎</p></li>
<li id="fn5"><p>Several of these are not provided directly from the raw FBref tables. For example, <code>is_from_deflection</code> is derived from the <code>Notes</code> field in the FBref shot table. <code>is_primary_foot</code> is derived from collecting player footedness data and checking for a match with <code>body_part</code>.↩︎</p></li>
<li id="fn6"><p>Note that I use the term “feature” here, although this set of fields does not quite match the actual <a href="https://theanalyst.com/eu/2021/07/what-are-expected-goals-xg">inputs to the</a> <a href="https://fbref.com/en/expected-goals-model-explained/">Opta xG model</a>. While things like <code>distance</code> and <code>body_part</code> certainly are inputs to the model, we don’t have angle of the shot to the goal, and <code>is_primary_foot</code>—a field that I’ve added the feature set myself—isn’t one of the model inputs, as far as I’m aware.↩︎</p></li>
<li id="fn7"><p>Several leagues don’t have data available for all such seasons, which is reflected in the row counts by group.↩︎</p></li>
<li id="fn8"><p>I’ve written my own code to plot the calibration, but I imagine most users will be satisfied with the plot that <code>{probably}</code> will generate for you.↩︎</p></li>
<li id="fn9"><p>Brier score for a binary classification task is equivalent to mean squared error.↩︎</p></li>
<li id="fn10"><p>Personally, I like to use BSS over other classification metrics like <a href="https://en.wikipedia.org/wiki/Receiver_operating_characteristic">ROC AUC</a> or Brier score alone. BSS is arguably the most interpretable probabilistic classification measure. Also, I like that it forces one to choose a reference with which to compare, which is a good principle in general, I think.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>r</category>
  <category>soccer</category>
  <guid>https://itsmetoeknee.netlify.app/posts/opta-xg-model-calibration/index.html</guid>
  <pubDate>Mon, 20 Feb 2023 06:00:00 GMT</pubDate>
  <media:content url="https://itsmetoeknee.netlify.app/posts/opta-xg-model-calibration/footedness_calibration.png" medium="image" type="image/png" height="101" width="144"/>
</item>
<item>
  <title>What exactly is an “expected point”? (part 2)</title>
  <dc:creator>Tony ElHabr</dc:creator>
  <link>https://itsmetoeknee.netlify.app/posts/epl-xpts-simulation-2/index.html</link>
  <description><![CDATA[ 



<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>I’ll be picking up where I left off in <a href="../../posts/epl-xpts-simulation-1">my last post</a>, so stop everything that you’re doing and go read that if you haven’t already. In this post we’ll do two things:</p>
<ol type="1">
<li><p>We’ll compare how well season-level expected goal difference (xGD), season-level xPts, and aggregated match-level xPts predict season-long points for a given team.</p></li>
<li><p>We’ll use the match-level probabilites to answer the questions “Which teams had the most unlikely placings in the table given the quality of all their shots across the season?” and “How unlikely were such placings?”</p></li>
</ol>
</section>
<section id="analysis" class="level2">
<h2 class="anchored" data-anchor-id="analysis">Analysis</h2>
<p>Before we start, we need to step back and retrieve data on the actual placings. We could theoretically calculate this from the shot data we already have. However, the logic for handling own goals is a little complicated. We’re probably better off using <code>worldfootballR::understat_league_match_results()</code>—which returns goals at the match-level—to calculate the table. <sup>1</sup></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">match_results <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">2014</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">2021</span> <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb1-2">  <span class="fu" style="color: #4758AB;">map_dfr</span>(<span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">understat_league_match_results</span>(<span class="st" style="color: #20794D;">'EPL'</span>, .x)) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb1-3">  <span class="fu" style="color: #4758AB;">as_tibble</span>()</span>
<span id="cb1-4"></span>
<span id="cb1-5">init_table <span class="ot" style="color: #003B4F;">&lt;-</span> match_results <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb1-6">  <span class="fu" style="color: #4758AB;">transmute</span>(</span>
<span id="cb1-7">    match_id,</span>
<span id="cb1-8">    <span class="fu" style="color: #4758AB;">across</span>(season, <span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">str_replace</span>(.x, <span class="st" style="color: #20794D;">'</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">/20'</span>, <span class="st" style="color: #20794D;">'/'</span>)),</span>
<span id="cb1-9">    <span class="at" style="color: #657422;">date =</span> <span class="fu" style="color: #4758AB;">strptime</span>(datetime, <span class="st" style="color: #20794D;">'%Y-%m-%d %H:%M:%S'</span>, <span class="at" style="color: #657422;">tz =</span> <span class="st" style="color: #20794D;">'UTC'</span>) <span class="sc" style="color: #5E5E5E;">|&gt;</span> <span class="fu" style="color: #4758AB;">date</span>(),</span>
<span id="cb1-10">    home_team,</span>
<span id="cb1-11">    home_goals,</span>
<span id="cb1-12">    away_team,</span>
<span id="cb1-13">    away_goals</span>
<span id="cb1-14">  )</span>
<span id="cb1-15"></span>
<span id="cb1-16">table <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">bind_rows</span>(</span>
<span id="cb1-17">  init_table <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb1-18">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">is_home =</span> <span class="cn" style="color: #8f5902;">TRUE</span>) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb1-19">    <span class="fu" style="color: #4758AB;">rename_home_away_teams</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb1-20">    <span class="fu" style="color: #4758AB;">select</span>(season, team, opponent, <span class="at" style="color: #657422;">goals =</span> home_goals, <span class="at" style="color: #657422;">opponent_goals =</span> away_goals),</span>
<span id="cb1-21">  init_table <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb1-22">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">is_home =</span> <span class="cn" style="color: #8f5902;">FALSE</span>) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb1-23">    <span class="fu" style="color: #4758AB;">rename_home_away_teams</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb1-24">    <span class="fu" style="color: #4758AB;">select</span>(season, team, opponent, <span class="at" style="color: #657422;">goals =</span> away_goals,<span class="at" style="color: #657422;">opponent_goals =</span> home_goals)</span>
<span id="cb1-25">) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb1-26">  <span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb1-27">    <span class="at" style="color: #657422;">pts =</span> <span class="fu" style="color: #4758AB;">case_when</span>(</span>
<span id="cb1-28">      goals <span class="sc" style="color: #5E5E5E;">&gt;</span> opponent_goals <span class="sc" style="color: #5E5E5E;">~</span> 3L,</span>
<span id="cb1-29">      goals <span class="sc" style="color: #5E5E5E;">&lt;</span> opponent_goals <span class="sc" style="color: #5E5E5E;">~</span> 0L,</span>
<span id="cb1-30">      <span class="cn" style="color: #8f5902;">TRUE</span> <span class="sc" style="color: #5E5E5E;">~</span> 1L</span>
<span id="cb1-31">    )</span>
<span id="cb1-32">  ) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb1-33">  <span class="fu" style="color: #4758AB;">group_by</span>(season, team) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb1-34">  <span class="fu" style="color: #4758AB;">summarize</span>(<span class="fu" style="color: #4758AB;">across</span>(<span class="fu" style="color: #4758AB;">c</span>(goals, opponent_goals, pts), sum)) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb1-35">  <span class="fu" style="color: #4758AB;">ungroup</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb1-36">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">gd =</span> goals <span class="sc" style="color: #5E5E5E;">-</span> opponent_goals) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb1-37">  <span class="fu" style="color: #4758AB;">arrange</span>(season, <span class="fu" style="color: #4758AB;">desc</span>(pts), <span class="fu" style="color: #4758AB;">desc</span>(gd)) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb1-38">  <span class="fu" style="color: #4758AB;">group_by</span>(season) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb1-39">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">rank =</span> <span class="fu" style="color: #4758AB;">row_number</span>(<span class="fu" style="color: #4758AB;">desc</span>(pts))) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb1-40">  <span class="fu" style="color: #4758AB;">ungroup</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb1-41">  <span class="fu" style="color: #4758AB;">arrange</span>(season, rank)</span></code></pre></div>
</details>
</div>
<p>This data will help us contextualize predicted placings with actual placings.</p>
<section id="predicting-season-long-points" class="level3">
<h3 class="anchored" data-anchor-id="predicting-season-long-points">1. Predicting season-long points</h3>
<section id="with-season-long-xpts-and-xgd" class="level4">
<h4 class="anchored" data-anchor-id="with-season-long-xpts-and-xgd">With season-long xPts and xGD</h4>
<p>We start with the <code>all_raw_understat_xpts_by_match</code> variable from the prior post, adding the opponent’s expected goals to create a column for expected goal difference (<code>xgd</code>).</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">all_raw_understat_xpts_by_match_with_opponent <span class="ot" style="color: #003B4F;">&lt;-</span> all_raw_understat_xpts_by_match <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb2-2">  <span class="fu" style="color: #4758AB;">inner_join</span>(</span>
<span id="cb2-3">    all_understat_shots <span class="sc" style="color: #5E5E5E;">|&gt;</span> <span class="fu" style="color: #4758AB;">distinct</span>(match_id, season, date, team, opponent),</span>
<span id="cb2-4">    <span class="at" style="color: #657422;">by =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'season'</span>, <span class="st" style="color: #20794D;">'date'</span>, <span class="st" style="color: #20794D;">'team'</span>)</span>
<span id="cb2-5">  )</span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="do" style="color: #5E5E5E;
font-style: italic;">## we've already determined that the raw_xpts (provided directly by understat) </span></span>
<span id="cb2-8"><span class="do" style="color: #5E5E5E;
font-style: italic;">##   is close to our calculated xpts, so we'll just use the raw_xpts.</span></span>
<span id="cb2-9">all_raw_understat_xpts_xgd_by_match <span class="ot" style="color: #003B4F;">&lt;-</span> all_raw_understat_xpts_by_match_with_opponent <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb2-10">  <span class="fu" style="color: #4758AB;">select</span>(match_id, season, date, team, opponent, pts, <span class="at" style="color: #657422;">xpts =</span> raw_xpts, xg) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb2-11">  <span class="fu" style="color: #4758AB;">inner_join</span>(</span>
<span id="cb2-12">    all_raw_understat_xpts_by_match_with_opponent <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb2-13">      <span class="fu" style="color: #4758AB;">select</span>(match_id, <span class="at" style="color: #657422;">opponent =</span> team, <span class="at" style="color: #657422;">opponent_xg =</span> xg),</span>
<span id="cb2-14">    <span class="at" style="color: #657422;">by =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'match_id'</span>, <span class="st" style="color: #20794D;">'opponent'</span>)</span>
<span id="cb2-15">  ) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb2-16">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">xgd =</span> xg <span class="sc" style="color: #5E5E5E;">-</span> opponent_xg)</span></code></pre></div>
</details>
</div>
<p>Next, we aggregate up to the season-level.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">all_raw_understat_xpts_xgd_by_season <span class="ot" style="color: #003B4F;">&lt;-</span> all_raw_understat_xpts_xgd_by_match <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb3-2">  <span class="fu" style="color: #4758AB;">group_by</span>(season, team) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb3-3">  <span class="fu" style="color: #4758AB;">summarize</span>(<span class="fu" style="color: #4758AB;">across</span>(<span class="fu" style="color: #4758AB;">c</span>(pts, xpts, xgd), sum)) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb3-4">  <span class="fu" style="color: #4758AB;">ungroup</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb3-5">  <span class="fu" style="color: #4758AB;">group_by</span>(season) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb3-6">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">xrank =</span> <span class="fu" style="color: #4758AB;">row_number</span>(<span class="fu" style="color: #4758AB;">desc</span>(xpts))) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb3-7">  <span class="fu" style="color: #4758AB;">ungroup</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb3-8">  <span class="fu" style="color: #4758AB;">arrange</span>(season, <span class="fu" style="color: #4758AB;">desc</span>(pts), team)</span></code></pre></div>
</details>
</div>
<p>Finally, we compute RMSE and R squared, like we did in the last post.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">diagnose_season_feature <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(df, col) {</span>
<span id="cb4-2">  fit <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">lm</span>(df<span class="sc" style="color: #5E5E5E;">$</span>pts <span class="sc" style="color: #5E5E5E;">~</span> df[[col]])</span>
<span id="cb4-3">  <span class="fu" style="color: #4758AB;">tibble</span>(</span>
<span id="cb4-4">    <span class="at" style="color: #657422;">rmse =</span> <span class="fu" style="color: #4758AB;">compute_rmse</span>(df<span class="sc" style="color: #5E5E5E;">$</span>pts, <span class="fu" style="color: #4758AB;">predict</span>(fit)),</span>
<span id="cb4-5">    <span class="at" style="color: #657422;">r2 =</span> <span class="fu" style="color: #4758AB;">summary</span>(fit)<span class="sc" style="color: #5E5E5E;">$</span>r.squared</span>
<span id="cb4-6">  )</span>
<span id="cb4-7">}</span>
<span id="cb4-8"></span>
<span id="cb4-9"><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'xgd'</span>, <span class="st" style="color: #20794D;">'xpts'</span>) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb4-10">  <span class="fu" style="color: #4758AB;">set_names</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb4-11">  <span class="fu" style="color: #4758AB;">map_dfr</span>(</span>
<span id="cb4-12">    <span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">diagnose_season_feature</span>(all_raw_understat_xpts_xgd_by_season, .x), </span>
<span id="cb4-13">    <span class="at" style="color: #657422;">.id =</span> <span class="st" style="color: #20794D;">'feature'</span></span>
<span id="cb4-14">  )</span>
<span id="cb4-15"><span class="co" style="color: #5E5E5E;">#&gt; # A tibble: 2 × 3</span></span>
<span id="cb4-16"><span class="co" style="color: #5E5E5E;">#&gt;   feature  rmse    r2</span></span>
<span id="cb4-17"><span class="co" style="color: #5E5E5E;">#&gt;   &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt;</span></span>
<span id="cb4-18"><span class="co" style="color: #5E5E5E;">#&gt; 1 xgd      7.33 0.831</span></span>
<span id="cb4-19"><span class="co" style="color: #5E5E5E;">#&gt; 2 xpts     7.20 0.837</span></span></code></pre></div>
</details>
</div>
<p>As we should expect, a model using season-long xPts to predict final points outperforms one using season-long xGD as a feature, although maybe the difference between the two is smaller than we might have expected.</p>
</section>
<section id="with-match-level-outcome-probabilities" class="level4">
<h4 class="anchored" data-anchor-id="with-match-level-outcome-probabilities">With match-level outcome probabilities</h4>
<p>First, we use the full understat shot data set and the custom functions from the prior post to calculate xPts by match.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">all_understat_xpts_by_match <span class="ot" style="color: #003B4F;">&lt;-</span> all_understat_shots <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb5-2">  <span class="fu" style="color: #4758AB;">calculate_permuted_xg</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb5-3">  <span class="fu" style="color: #4758AB;">summarize_permuted_xg_by_match</span>()</span></code></pre></div>
</details>
</div>
<p>Next, the fun part: simulating match outcomes using the xG-implied match outcome probabilities. This is computationally intense, so we parallelize the calculation.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;">library</span>(parallel)</span>
<span id="cb6-2"><span class="fu" style="color: #4758AB;">library</span>(future)</span>
<span id="cb6-3"><span class="fu" style="color: #4758AB;">library</span>(furrr)</span>
<span id="cb6-4"></span>
<span id="cb6-5">understat_probs_by_match <span class="ot" style="color: #003B4F;">&lt;-</span> all_understat_xpts_by_match <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb6-6">  <span class="fu" style="color: #4758AB;">select</span>(match_id, season, team, opponent, is_home, <span class="fu" style="color: #4758AB;">starts_with</span>(<span class="st" style="color: #20794D;">'prob'</span>)) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb6-7">  <span class="fu" style="color: #4758AB;">rename_with</span>(<span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">str_remove</span>(.x, <span class="st" style="color: #20794D;">'^prob_'</span>), <span class="fu" style="color: #4758AB;">starts_with</span>(<span class="st" style="color: #20794D;">'prob'</span>)) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb6-8">  <span class="fu" style="color: #4758AB;">pivot_longer</span>(</span>
<span id="cb6-9">    <span class="fu" style="color: #4758AB;">c</span>(win, lose, draw),</span>
<span id="cb6-10">    <span class="at" style="color: #657422;">names_to =</span> <span class="st" style="color: #20794D;">'result'</span>,</span>
<span id="cb6-11">    <span class="at" style="color: #657422;">values_to =</span> <span class="st" style="color: #20794D;">'prob'</span></span>
<span id="cb6-12">  )</span>
<span id="cb6-13"></span>
<span id="cb6-14">simulate_season_xpts <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(...) {</span>
<span id="cb6-15">  sim_home_pts_by_match <span class="ot" style="color: #003B4F;">&lt;-</span> understat_probs_by_match <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb6-16">    <span class="fu" style="color: #4758AB;">filter</span>(is_home) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb6-17">    <span class="fu" style="color: #4758AB;">group_by</span>(team, season, match_id) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb6-18">    <span class="fu" style="color: #4758AB;">slice_sample</span>(<span class="at" style="color: #657422;">n =</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">weight_by =</span> prob) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb6-19">    <span class="fu" style="color: #4758AB;">ungroup</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb6-20">    <span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb6-21">      <span class="at" style="color: #657422;">pts =</span> <span class="fu" style="color: #4758AB;">case_when</span>(</span>
<span id="cb6-22">        result <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'win'</span> <span class="sc" style="color: #5E5E5E;">~</span> 3L,</span>
<span id="cb6-23">        result <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'lose'</span> <span class="sc" style="color: #5E5E5E;">~</span> 0L,</span>
<span id="cb6-24">        <span class="cn" style="color: #8f5902;">TRUE</span> <span class="sc" style="color: #5E5E5E;">~</span> 1L</span>
<span id="cb6-25">      )</span>
<span id="cb6-26">    )</span>
<span id="cb6-27">  </span>
<span id="cb6-28">  sim_pts_by_match <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">bind_rows</span>(</span>
<span id="cb6-29">    sim_home_pts_by_match <span class="sc" style="color: #5E5E5E;">|&gt;</span> <span class="fu" style="color: #4758AB;">select</span>(match_id, season, team, pts),</span>
<span id="cb6-30">    sim_home_pts_by_match <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb6-31">      <span class="fu" style="color: #4758AB;">transmute</span>(</span>
<span id="cb6-32">        match_id,</span>
<span id="cb6-33">        season,</span>
<span id="cb6-34">        <span class="at" style="color: #657422;">team =</span> opponent,</span>
<span id="cb6-35">        <span class="at" style="color: #657422;">pts =</span> <span class="fu" style="color: #4758AB;">case_when</span>(</span>
<span id="cb6-36">          result <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'win'</span> <span class="sc" style="color: #5E5E5E;">~</span> 0L,</span>
<span id="cb6-37">          result <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'lose'</span> <span class="sc" style="color: #5E5E5E;">~</span> 3L,</span>
<span id="cb6-38">          <span class="cn" style="color: #8f5902;">TRUE</span> <span class="sc" style="color: #5E5E5E;">~</span> 1L</span>
<span id="cb6-39">        )</span>
<span id="cb6-40">      )</span>
<span id="cb6-41">  ) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb6-42">    <span class="fu" style="color: #4758AB;">group_by</span>(season, team) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb6-43">    <span class="fu" style="color: #4758AB;">summarize</span>(<span class="fu" style="color: #4758AB;">across</span>(pts, sum)) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb6-44">    <span class="fu" style="color: #4758AB;">ungroup</span>()</span>
<span id="cb6-45">  </span>
<span id="cb6-46">  sim_pts_by_match <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb6-47">    <span class="fu" style="color: #4758AB;">group_by</span>(season, team) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb6-48">    <span class="fu" style="color: #4758AB;">summarize</span>(<span class="fu" style="color: #4758AB;">across</span>(pts, sum)) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb6-49">    <span class="fu" style="color: #4758AB;">ungroup</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb6-50">    <span class="fu" style="color: #4758AB;">group_by</span>(season) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb6-51">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">rank =</span> <span class="fu" style="color: #4758AB;">row_number</span>(<span class="fu" style="color: #4758AB;">desc</span>(pts))) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb6-52">    <span class="fu" style="color: #4758AB;">ungroup</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb6-53">    <span class="fu" style="color: #4758AB;">arrange</span>(season, rank)</span>
<span id="cb6-54">}</span>
<span id="cb6-55"></span>
<span id="cb6-56">n_cores <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">detectCores</span>()</span>
<span id="cb6-57">cores_for_parallel <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">ceiling</span>(n_cores <span class="sc" style="color: #5E5E5E;">*</span> <span class="fl" style="color: #AD0000;">0.5</span>)</span>
<span id="cb6-58"><span class="fu" style="color: #4758AB;">plan</span>(</span>
<span id="cb6-59">  multisession,</span>
<span id="cb6-60">  <span class="at" style="color: #657422;">workers =</span> cores_for_parallel</span>
<span id="cb6-61">)</span>
<span id="cb6-62"></span>
<span id="cb6-63"><span class="do" style="color: #5E5E5E;
font-style: italic;">## set seed both prior to the future_map_dfr and in .options to guarantee determinstic results</span></span>
<span id="cb6-64"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">42</span>)</span>
<span id="cb6-65">n_sims <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">10000</span></span>
<span id="cb6-66">understat_sim_pts_by_season <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">set_names</span>(<span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>n_sims) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb6-67">  <span class="fu" style="color: #4758AB;">future_map_dfr</span>(</span>
<span id="cb6-68">    simulate_season_xpts, </span>
<span id="cb6-69">    <span class="at" style="color: #657422;">.id =</span> <span class="st" style="color: #20794D;">'sim_idx'</span>, </span>
<span id="cb6-70">    <span class="at" style="color: #657422;">.options =</span> <span class="fu" style="color: #4758AB;">furrr_options</span>(<span class="at" style="color: #657422;">seed =</span> <span class="dv" style="color: #AD0000;">42</span>)</span>
<span id="cb6-71">  )</span>
<span id="cb6-72"></span>
<span id="cb6-73"><span class="do" style="color: #5E5E5E;
font-style: italic;">## back to normal processing</span></span>
<span id="cb6-74"><span class="fu" style="color: #4758AB;">plan</span>(sequential)</span></code></pre></div>
</details>
</div>
<p>Next, we aggregate the season-long points across simulations, calculating the relative proportion of simulations in which a given team ends up at a given rank.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">understat_sim_placings <span class="ot" style="color: #003B4F;">&lt;-</span> understat_sim_pts_by_season <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb7-2">  <span class="fu" style="color: #4758AB;">group_by</span>(season, team, <span class="at" style="color: #657422;">xrank =</span> rank) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb7-3">  <span class="fu" style="color: #4758AB;">summarize</span>(<span class="at" style="color: #657422;">n =</span> <span class="fu" style="color: #4758AB;">n</span>(), <span class="at" style="color: #657422;">xpts =</span> <span class="fu" style="color: #4758AB;">mean</span>(pts)) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb7-4">  <span class="fu" style="color: #4758AB;">ungroup</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb7-5">  <span class="fu" style="color: #4758AB;">group_by</span>(season, team) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb7-6">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">prop =</span> n <span class="sc" style="color: #5E5E5E;">/</span> <span class="fu" style="color: #4758AB;">sum</span>(n)) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb7-7">  <span class="fu" style="color: #4758AB;">ungroup</span>()</span></code></pre></div>
</details>
</div>
<p>Finally, we calculate the weighted average of expected points that a team ends up with, and run the same regression that we ran earlier with season-long xPts and xGD.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">understat_sim_placings_agg <span class="ot" style="color: #003B4F;">&lt;-</span> understat_sim_placings <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb8-2">  <span class="fu" style="color: #4758AB;">group_by</span>(season, team) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb8-3">  <span class="fu" style="color: #4758AB;">summarize</span>(<span class="at" style="color: #657422;">xpts =</span> <span class="fu" style="color: #4758AB;">sum</span>(xpts <span class="sc" style="color: #5E5E5E;">*</span> prop)) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb8-4">  <span class="fu" style="color: #4758AB;">ungroup</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb8-5">  <span class="fu" style="color: #4758AB;">select</span>(season, team, xpts) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb8-6">  <span class="fu" style="color: #4758AB;">inner_join</span>(</span>
<span id="cb8-7">    all_raw_understat_xpts_xgd_by_season <span class="sc" style="color: #5E5E5E;">|&gt;</span> <span class="fu" style="color: #4758AB;">select</span>(season, team, pts),</span>
<span id="cb8-8">    <span class="at" style="color: #657422;">by =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'season'</span>, <span class="st" style="color: #20794D;">'team'</span>)</span>
<span id="cb8-9">  ) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb8-10">  <span class="fu" style="color: #4758AB;">arrange</span>(season, <span class="fu" style="color: #4758AB;">desc</span>(xpts))</span>
<span id="cb8-11"></span>
<span id="cb8-12"><span class="fu" style="color: #4758AB;">diagnose_season_feature</span>(understat_sim_placings_agg, <span class="st" style="color: #20794D;">'xpts'</span>)</span>
<span id="cb8-13"><span class="co" style="color: #5E5E5E;">#&gt; # A tibble: 1 × 2</span></span>
<span id="cb8-14"><span class="co" style="color: #5E5E5E;">#&gt;    rmse    r2</span></span>
<span id="cb8-15"><span class="co" style="color: #5E5E5E;">#&gt;   &lt;dbl&gt; &lt;dbl&gt;</span></span>
<span id="cb8-16"><span class="co" style="color: #5E5E5E;">#&gt; 1  7.16 0.839</span></span></code></pre></div>
</details>
</div>
<p>Interestingly, the RMSE and R squared values are almost identical to those for the season-long xPts. Perhaps this is not too surprising—match-level outcome probabilities simulated and averaged to arrive at a singular estimate of season-long xPts should give us something very close to just computing season-long xPts directly.</p>
<p>While the null result may be discouraging, the simulations are useful in and of themselves. They can be used to understand the distribution of outcomes for team in a given season, as seen in the table below.<sup>2</sup></p>
<p><img src="https://itsmetoeknee.netlify.app/posts/epl-xpts-simulation-2/sim_placings.png" class="img-fluid"></p>
<p>We can see that Leicester, Wolves, and Newcastle all placed at the uppper end of their simulated placings, indicating that they over-achieved relative to expectation; on the other hand, Crystal Palace, Brentford, and Leeds placed on the lower end of the distribution of placings, indicating that they under-achieved.</p>
<p>In fact, we can go beyond simple observational judgement of whether teams over- and under-achieved—we can use the relative proportion of simulations where a team ends up at a given placing (or “rank”) in the standings to quantify just how unexpected actual end-of-season placings were.</p>
</section>
</section>
<section id="identifying-un-expected-placings" class="level3">
<h3 class="anchored" data-anchor-id="identifying-un-expected-placings">2. Identifying un-expected placings</h3>
<p>First, we join the <code>table</code> of end-of-season placements (<code>actual_rank</code>) to the simulation results that describe the frequency with which a given team places at a given rank (<code>xrank</code>).</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">understat_sim_placings_with_actual_ranks <span class="ot" style="color: #003B4F;">&lt;-</span> understat_sim_placings <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb9-2">  <span class="fu" style="color: #4758AB;">inner_join</span>(</span>
<span id="cb9-3">    table <span class="sc" style="color: #5E5E5E;">|&gt;</span> <span class="fu" style="color: #4758AB;">select</span>(season, team, <span class="at" style="color: #657422;">actual_pts =</span> pts, <span class="at" style="color: #657422;">actual_rank =</span> rank),</span>
<span id="cb9-4">    <span class="at" style="color: #657422;">by =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'season'</span>, <span class="st" style="color: #20794D;">'team'</span>)</span>
<span id="cb9-5">  ) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb9-6">  <span class="fu" style="color: #4758AB;">inner_join</span>(</span>
<span id="cb9-7">    all_raw_understat_xpts_xgd_by_season <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb9-8">      <span class="fu" style="color: #4758AB;">select</span>(season, team, <span class="at" style="color: #657422;">actual_xpts =</span> xpts, xgd),</span>
<span id="cb9-9">    <span class="at" style="color: #657422;">by =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'season'</span>, <span class="st" style="color: #20794D;">'team'</span>)</span>
<span id="cb9-10">  )</span></code></pre></div>
</details>
</div>
<p>Finally, to identify over-achieving teams, we find the teams that had the lowest cumulative probability of placing at their actual placing or better; and to identify under-achieving teams, we find the teams with the lowest cumulative probability of placing at their actual placing or worse.</p>
<p><img src="https://itsmetoeknee.netlify.app/posts/epl-xpts-simulation-2/unexpected.png" class="img-fluid"></p>
<p>This table certainly passes the eye test. Brighton’s sixteenth place finish in the 2020/21 season was discussed ad nauseum in the analytics sphere. Brighton under-performed historically given their massively positive xGD.</p>
<p>On the other end of the spectrum, it’s not hyperbole to say that Manchester United’s second place finish in the 2017/18 season was an over-achievement. Although they ended up with the third best goal differential that season, they were closely followed by several teams. And their xGD was sixth in the league that season.</p>
<section id="comparison-with-a-simpler-approach" class="level4">
<h4 class="anchored" data-anchor-id="comparison-with-a-simpler-approach">Comparison with a simpler approach</h4>
<p>Notably, we could get somewhat similar results by simply looking at the largest residuals of a model that regresses the actual final table placing on just xGD, which is how most people tend to think of “unexpected placings”.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">table_with_xgd <span class="ot" style="color: #003B4F;">&lt;-</span> table <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb10-2">  <span class="fu" style="color: #4758AB;">select</span>(season, team, <span class="at" style="color: #657422;">actual_pts =</span> pts, <span class="at" style="color: #657422;">actual_rank =</span> rank) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb10-3">  <span class="fu" style="color: #4758AB;">inner_join</span>(</span>
<span id="cb10-4">    all_raw_understat_xpts_xgd_by_season <span class="sc" style="color: #5E5E5E;">|&gt;</span> <span class="fu" style="color: #4758AB;">select</span>(season, team, xgd),</span>
<span id="cb10-5">    <span class="at" style="color: #657422;">by =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'season'</span>, <span class="st" style="color: #20794D;">'team'</span>)</span>
<span id="cb10-6">  )</span>
<span id="cb10-7"></span>
<span id="cb10-8">xgd_rank_fit <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">lm</span>(actual_rank <span class="sc" style="color: #5E5E5E;">~</span> xgd, table_with_xgd)</span></code></pre></div>
</details>
</div>
<p>The table below shows the top five over- and under-achieving teams according to our regression explaining season-ending placing with season-ending xGD. Three of the top five over- and under-performing teams appear in the respective top fives according to the ranks from the simulations of match probabilities shown before.</p>
<p><img src="https://itsmetoeknee.netlify.app/posts/epl-xpts-simulation-2/xgd_unexpected.png" class="img-fluid"></p>
<p>We can also look at this from the opposite perspective. Where do the top five over- and under-achievers according to our simulations with match outcome probabilities fall among the season-ending xGD ranks for unlikelihood?</p>
<p><img src="https://itsmetoeknee.netlify.app/posts/epl-xpts-simulation-2/xgd_matching_unexpected.png" class="img-fluid"></p>
<p>Outside of the the three team-season pairs appearing in the both of the top five over- and under-achievers that we already saw before, one team-season pair is not too far off from the top five—the 2017/18 Manchester United squad ranked as the sixth biggest over-performers by the season-long xGD regression.<sup>3</sup> However, the other over-perfomer, 2019/20 Newcastle, and the two remaining under-performers, 2021/22 Crystal Palace and 2021/22 Brentford, have somewhat large ranking discrepancies. So yes, the two methods can lead to somewhat similar results in some cases, but there is some observational evidence to suggest that there are non-trivial differences in other cases.</p>
<p>In fact, there are some big differences between the two methods once we look outside the top five or so biggest over- and under- achievers. For example, in terms of over-achieving, Arsenal’s fifth place finish 2018/19 season is given just a 7.50% chance of occurring given their season-long xGD, ranking them as the 17th biggest over-performer (among 80 team-season pairs considered to have over-achieved from 2014/15).<sup>4</sup> On the other hand, the match-level simulation approach marks the likelihood of them finishing fourth as 31.63% (37th of 80). The season-long xGD model essentially sees that they finished with an xGD of 7.5—less than any other fifth place finisher from 2014/15 - 2021/22—and penalizes them, while the match-level approach contextualizes them among their competition more robustly.</p>
<p>As another example, Manchester United’s under-achieving sixth place finish in the 2016/17 is given a fairly reasonable 37.36% chance (66th of 80 under-achieving teams) of occurring given their season-long 25.9 xGD, most for any sixth place team in the data set. On the other hand, the match-level simulation approach sees their sixth place finish as more unlikely, at just a 15.88% probability (16th of 80). While one might have their own opinion regarding which approach seems more “correct”, I’d say that likelihoods from the simulation approach seem more appropriate for extreme examples such as this one and the 2018/19 Arsenal example</p>
<p>Overall, both approaches seem reasonable to use to answer the question “Which teams had the most unlikely placings in the table given the quality of all their shots across the season?” But the approach based on simulations using match probabilities seems more appropriate to use to quantify exactly how unlikely a team’s final placing was. While the simpler regression approach can also be used to quantify likelihood, it is more brittle, dependent on statistical assumptions. Additionally, while it contextualizes a team’s xGD with historical xGD, it does not contextualize a team’s xGD among the other teams in the league, meaning that it does not do a good job with capturing likelihood when there are strong xGD over- and under-performances among a set of teams in a given season.</p>
</section>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>While aggregating match-level outcome probabilities to try to predict season-ending points does no better than more direct approaches with season-long xGD or xPts, simulating seasons using match-level outcome probabilities can be used in a perhaps more interesting way—to quantify just how unlikely a team’s placement in the table is, given xG for all of their shots across the season.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Maybe even more simply, we could use <code>worldfootballR::fb_season_team_stats(..., stat_type = 'league_table')</code>, although we’d need to add a column for team names for <a href="https://fbref.com/en/">FBref</a> to our team mapping to corroborate team names.↩︎</p></li>
<li id="fn2"><p>Table code is not shown since it’s not particularly instructive.↩︎</p></li>
<li id="fn3"><p>Note that, given the 160 team-season pairs in the data set, we should expect that 80 teams each are ranked as over-performing and under-performing. No team will be labeled as performing exactly as expected, unless they happen to have only one possible placing in the simulation approach, or a residual of exactly 0 in the regression approach.↩︎</p></li>
<li id="fn4"><p>To quantify the likelihood of a team’s placing with the simple regression, we convert the standard residual of the regression to a tail probability.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>r</category>
  <category>soccer</category>
  <guid>https://itsmetoeknee.netlify.app/posts/epl-xpts-simulation-2/index.html</guid>
  <pubDate>Mon, 05 Sep 2022 05:00:00 GMT</pubDate>
  <media:content url="https://itsmetoeknee.netlify.app/posts/epl-xpts-simulation-2/unexpected.png" medium="image" type="image/png" height="143" width="144"/>
</item>
<item>
  <title>What exactly is an “expected point”? (part 1)</title>
  <dc:creator>Tony ElHabr</dc:creator>
  <link>https://itsmetoeknee.netlify.app/posts/epl-xpts-simulation-1/index.html</link>
  <description><![CDATA[ 



<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p><a href="https://theanalyst.com/na/2021/07/what-are-expected-goals-xg/">Expected goals (xG)</a> in soccer have gone mainstream and are no longer cool to talk about.</p>
<blockquote class="twitter-tweet blockquote">
<p lang="en" dir="ltr">
</p><p>What exactly is an ” expected goal “? Who decides the criteria ? Is there a list of” expected goal scorers ” ? Or even ” unexpected ones ” ?</p>
<p></p>
<p>— Ian Darke (<span class="citation" data-cites="IanDarke">@IanDarke</span>) <a href="https://twitter.com/IanDarke/status/1341904890914885641?ref_src=twsrc%5Etfw">December 24, 2020</a></p>
</blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>So let’s talk about <a href="https://www.bettingodds.com/news/what-are-expected-points-xp-football-betting">expected points (xPts)</a>. The one sentence explainer for xPts: it’s a number between 0 and 3 assigned to each team in a match that we estimate from the xG of each shot in the match. Teams that accumulate more xG than their opponents in the match are more likely to have xPts closer to 3, i.e.&nbsp;the points awarded for a win, and those that accumulate less than their opponents are more likely to earn xPts closer to 0. xPts is convenient for translating a team’s xG (relative to it’s opponents) to the team’s expected placement in the standings.</p>
<p>While <a href="https://luke-beggs.medium.com/creating-an-expected-points-xp-calculator-for-football-matches-ce4edd18d16f">several</a> <a href="https://theshortfuse.sbnation.com/2017/11/15/16655916/how-to-calculate-xpoints-analysis-stats-xg">outlets</a> have described computing expected points with simulation<sup>1</sup>, <a href="https://www.jonaslindstrom.dk/?p=330">simulation is actually not necessary</a> if you have the xG for every shot taken in a match.<sup>2</sup> For example, let’s say team A shoots six times with an xG of 0.1 for each shot, and team B shoots three shots with xG’s of 0.1, 0.2, and 0.3 respectively. Given these goal probabilities, we can analytically compute xPts as follows.</p>
<p>First, we find the probability of scoring 0, 1, 2, etc. goals (up to the number of shots taken).<sup>3</sup></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(poibin)</span>
<span id="cb1-2">xg_a <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rep</span>(<span class="fl" style="color: #AD0000;">0.1</span>, <span class="dv" style="color: #AD0000;">6</span>)</span>
<span id="cb1-3">xg_b <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="fl" style="color: #AD0000;">0.1</span>, <span class="fl" style="color: #AD0000;">0.2</span>, <span class="fl" style="color: #AD0000;">0.3</span>)</span>
<span id="cb1-4"></span>
<span id="cb1-5">probs_a <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">dpoibin</span>(<span class="fu" style="color: #4758AB;">seq.int</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="fu" style="color: #4758AB;">length</span>(xg_a)), xg_a)</span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;">round</span>(probs_a, <span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;">#&gt; [1] 0.53 0.35 0.10 0.01 0.00 0.00 0.00</span></span>
<span id="cb1-8">probs_b <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">dpoibin</span>(<span class="fu" style="color: #4758AB;">seq.int</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="fu" style="color: #4758AB;">length</span>(xg_b)), xg_b)</span>
<span id="cb1-9"><span class="fu" style="color: #4758AB;">round</span>(probs_b, <span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;">#&gt; [1] 0.50 0.40 0.09 0.01</span></span></code></pre></div>
</details>
</div>
<p><img src="https://itsmetoeknee.netlify.app/posts/epl-xpts-simulation-1/ex.png" class="img-fluid"></p>
<p>Second, we convert the goal probabilities to singular probabilities for each team winning the match, as well as the probability of a draw.<sup>4</sup></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">library</span>(gdata)</span>
<span id="cb2-2">outer_prod <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">outer</span>(probs_a, probs_b)</span>
<span id="cb2-3">p_a <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sum</span>(<span class="fu" style="color: #4758AB;">upperTriangle</span>(outer_prod))</span>
<span id="cb2-4">p_b <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sum</span>(<span class="fu" style="color: #4758AB;">lowerTriangle</span>(outer_prod))</span>
<span id="cb2-5">p_draw <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sum</span>(<span class="fu" style="color: #4758AB;">diag</span>(outer_prod))</span>
<span id="cb2-6"><span class="fu" style="color: #4758AB;">round</span>(<span class="fu" style="color: #4758AB;">c</span>(p_a, p_b, p_draw), <span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb2-7"><span class="co" style="color: #5E5E5E;">#&gt; [1] 0.30 0.28 0.42</span></span></code></pre></div>
</details>
</div>
<p>Finally, given the match outcome probabilities, the xPts calculation is straightforward.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">xpts_a <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">3</span> <span class="sc" style="color: #5E5E5E;">*</span> p_a <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span> <span class="sc" style="color: #5E5E5E;">*</span> p_draw</span>
<span id="cb3-2">xpts_b <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">3</span> <span class="sc" style="color: #5E5E5E;">*</span> p_b <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span> <span class="sc" style="color: #5E5E5E;">*</span> p_draw</span>
<span id="cb3-3"><span class="fu" style="color: #4758AB;">round</span>(<span class="fu" style="color: #4758AB;">c</span>(xpts_a, xpts_b), <span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;">#&gt; [1] 1.31 1.27</span></span></code></pre></div>
</details>
</div>
<p>For this example, we arrive at the interesting result that, despite the two teams total xG being equal (=0.6), team A has a slightly higher probability of winning. There have been plenty of <a href="https://hockey-graphs.com/2018/12/19/some-people-were-wrong-on-twitter/">explanations</a> on this “quality vs.&nbsp;quantity” phenomenon, so I won’t go into it in detail. Nonetheless, this simple example illustrates why it can be useful to translate xG into another form—doing so can provide a better perspective on match results and, consequently, team placement in the standings.</p>
<section id="objectives" class="level3">
<h3 class="anchored" data-anchor-id="objectives">Objectives</h3>
<p>So we’ve gone over what expected points are and why they’re important. Now we set out to do the following.</p>
<ol type="1">
<li><strong>Calculate xPts from shot xG for multiple seasons of data.</strong> We’ll limit the scope to the 2020/21 and 2021/22 seasons for the English Premier League.<sup>5</sup></li>
<li><strong>Compare the calibration of the understat and fotmob match outcome probabilities.</strong> <code>{worldfootballR}</code> makes it easy for us to get xG from both <a href="https://understat.com/">understat</a> and <a href="https://www.fotmob.com/">fotmob</a>, and it should be interesting to compare the the predictive performance of the two models.</li>
<li><strong>Compare predictions of actual season-long points using xPts that we derive from understat and fotmob xG.</strong> In particular, we’ll be interested to see if our conclusions regarding the better source for xG here matches the conclusions for (2).</li>
</ol>
</section>
</section>
<section id="analysis" class="level2">
<h2 class="anchored" data-anchor-id="analysis">Analysis</h2>
<section id="calculating-xpts-from-xg" class="level3">
<h3 class="anchored" data-anchor-id="calculating-xpts-from-xg">1. Calculating xPts from xG</h3>
<p>Let’s start by using the <code>load_understat_league_shots()</code> function from <code>{worldfootballR}</code> to retrieve understat xG by shot.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="fu" style="color: #4758AB;">library</span>(readr)</span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;">library</span>(dplyr)</span>
<span id="cb4-3"><span class="fu" style="color: #4758AB;">library</span>(tibble)</span>
<span id="cb4-4"><span class="fu" style="color: #4758AB;">library</span>(tidyr)</span>
<span id="cb4-5"><span class="fu" style="color: #4758AB;">library</span>(stringr)</span>
<span id="cb4-6"><span class="fu" style="color: #4758AB;">library</span>(lubridate)</span>
<span id="cb4-7"><span class="fu" style="color: #4758AB;">library</span>(worldfootballR) <span class="do" style="color: #5E5E5E;
font-style: italic;">## version: 0.5.12.5000</span></span>
<span id="cb4-8"><span class="fu" style="color: #4758AB;">library</span>(janitor)</span>
<span id="cb4-9"></span>
<span id="cb4-10">rename_home_away_teams <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(df) {</span>
<span id="cb4-11">  df <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb4-12">    <span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb4-13">      <span class="at" style="color: #657422;">team =</span> <span class="fu" style="color: #4758AB;">ifelse</span>(is_home, home_team, away_team),</span>
<span id="cb4-14">      <span class="at" style="color: #657422;">opponent =</span> <span class="fu" style="color: #4758AB;">ifelse</span>(is_home, away_team, home_team)</span>
<span id="cb4-15">    ) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb4-16">    <span class="fu" style="color: #4758AB;">select</span>(<span class="sc" style="color: #5E5E5E;">-</span><span class="fu" style="color: #4758AB;">c</span>(home_team, away_team)) </span>
<span id="cb4-17">}</span>
<span id="cb4-18"></span>
<span id="cb4-19">convert_understat_year_to_season <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(x) {</span>
<span id="cb4-20">  <span class="fu" style="color: #4758AB;">sprintf</span>(<span class="st" style="color: #20794D;">'%s/%s'</span>, x, <span class="fu" style="color: #4758AB;">str_sub</span>(x <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">4</span>))</span>
<span id="cb4-21">}</span>
<span id="cb4-22"></span>
<span id="cb4-23"><span class="do" style="color: #5E5E5E;
font-style: italic;">## we'll use all of the shots later when exporing understat data only</span></span>
<span id="cb4-24">all_understat_shots <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">load_understat_league_shots</span>(<span class="st" style="color: #20794D;">'EPL'</span>) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb4-25">  <span class="fu" style="color: #4758AB;">as_tibble</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb4-26">  <span class="do" style="color: #5E5E5E;
font-style: italic;">## camelcase like "xG" is for Java scrubs</span></span>
<span id="cb4-27">  <span class="fu" style="color: #4758AB;">clean_names</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb4-28">  <span class="fu" style="color: #4758AB;">filter</span>(season <span class="sc" style="color: #5E5E5E;">&lt;=</span> <span class="dv" style="color: #AD0000;">2021</span>) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb4-29">  <span class="do" style="color: #5E5E5E;
font-style: italic;">## transmute = select + mutate</span></span>
<span id="cb4-30">  <span class="fu" style="color: #4758AB;">transmute</span>(</span>
<span id="cb4-31">    match_id,</span>
<span id="cb4-32">    <span class="do" style="color: #5E5E5E;
font-style: italic;">## "2021/2022" format so that we have a clear, consistent way to represent season</span></span>
<span id="cb4-33">    <span class="fu" style="color: #4758AB;">across</span>(season, convert_understat_year_to_season),</span>
<span id="cb4-34">    <span class="do" style="color: #5E5E5E;
font-style: italic;">## to convert "2020-09-12 11:30:00" to a date ("2020-09-12")</span></span>
<span id="cb4-35">    <span class="fu" style="color: #4758AB;">across</span>(date, lubridate<span class="sc" style="color: #5E5E5E;">::</span>date),</span>
<span id="cb4-36">    home_team,</span>
<span id="cb4-37">    away_team,</span>
<span id="cb4-38">    <span class="at" style="color: #657422;">is_home =</span> h_a <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'h'</span>,</span>
<span id="cb4-39">    <span class="at" style="color: #657422;">xg =</span> x_g</span>
<span id="cb4-40">  ) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb4-41">  <span class="fu" style="color: #4758AB;">rename_home_away_teams</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb4-42">  <span class="fu" style="color: #4758AB;">arrange</span>(season, date, team)</span>
<span id="cb4-43"></span>
<span id="cb4-44"><span class="do" style="color: #5E5E5E;
font-style: italic;">## but when comparing understat with fotmob, we'll need to limit the seasons to just</span></span>
<span id="cb4-45"><span class="do" style="color: #5E5E5E;
font-style: italic;">##   those that both sources have</span></span>
<span id="cb4-46">understat_shots <span class="ot" style="color: #003B4F;">&lt;-</span> all_understat_shots <span class="sc" style="color: #5E5E5E;">|&gt;</span> <span class="fu" style="color: #4758AB;">filter</span>(season <span class="sc" style="color: #5E5E5E;">&gt;=</span> <span class="dv" style="color: #AD0000;">2020</span>)</span></code></pre></div>
</details>
</div>
<p>We can use <code>load_fotmob_match_details()</code> to get fotmob’s shot xG in a similar fashion.<sup>6</sup></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="do" style="color: #5E5E5E;
font-style: italic;">## manually created CSV with at least 2 columns: team_understat, team_fotmob.</span></span>
<span id="cb5-2"><span class="do" style="color: #5E5E5E;
font-style: italic;">##   use the team_understat name to be consistent across sources.</span></span>
<span id="cb5-3">team_mapping <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">'https://raw.githubusercontent.com/tonyelhabr/sports_viz/master/59-xg_xpoints/team_mapping.csv'</span> <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb5-4">  <span class="fu" style="color: #4758AB;">read_csv</span>()</span>
<span id="cb5-5"></span>
<span id="cb5-6">rename_fotmob_teams <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(df) {</span>
<span id="cb5-7">  df <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb5-8">    <span class="fu" style="color: #4758AB;">left_join</span>(</span>
<span id="cb5-9">      team_mapping <span class="sc" style="color: #5E5E5E;">|&gt;</span> <span class="fu" style="color: #4758AB;">select</span>(team_understat, team_fotmob),</span>
<span id="cb5-10">      <span class="at" style="color: #657422;">by =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'home_team'</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">'team_fotmob'</span>)</span>
<span id="cb5-11">    ) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb5-12">    <span class="fu" style="color: #4758AB;">select</span>(<span class="sc" style="color: #5E5E5E;">-</span>home_team) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb5-13">    <span class="fu" style="color: #4758AB;">rename</span>(<span class="at" style="color: #657422;">home_team =</span> team_understat) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb5-14">    <span class="fu" style="color: #4758AB;">left_join</span>(</span>
<span id="cb5-15">      team_mapping <span class="sc" style="color: #5E5E5E;">|&gt;</span> <span class="fu" style="color: #4758AB;">select</span>(team_understat, team_fotmob),</span>
<span id="cb5-16">      <span class="at" style="color: #657422;">by =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'away_team'</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">'team_fotmob'</span>)</span>
<span id="cb5-17">    ) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb5-18">    <span class="fu" style="color: #4758AB;">select</span>(<span class="sc" style="color: #5E5E5E;">-</span>away_team) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb5-19">    <span class="fu" style="color: #4758AB;">rename</span>(<span class="at" style="color: #657422;">away_team =</span> team_understat)</span>
<span id="cb5-20">}</span>
<span id="cb5-21"></span>
<span id="cb5-22">fotmob_shots <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">load_fotmob_match_details</span>(</span>
<span id="cb5-23">  <span class="at" style="color: #657422;">country =</span> <span class="st" style="color: #20794D;">'ENG'</span>,</span>
<span id="cb5-24">  <span class="at" style="color: #657422;">league_name =</span> <span class="st" style="color: #20794D;">'Premier League'</span></span>
<span id="cb5-25">) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb5-26">  <span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb5-27">    <span class="do" style="color: #5E5E5E;
font-style: italic;">## to convert strings from 'Sat, Sep 12, 2020, 11:30 UTC' to a date</span></span>
<span id="cb5-28">    <span class="at" style="color: #657422;">date =</span> <span class="fu" style="color: #4758AB;">strptime</span>(match_time_utc, <span class="st" style="color: #20794D;">'%a, %b %d, %Y, %H:%M UTC'</span>, <span class="at" style="color: #657422;">tz =</span> <span class="st" style="color: #20794D;">'UTC'</span>) <span class="sc" style="color: #5E5E5E;">|&gt;</span> <span class="fu" style="color: #4758AB;">date</span>(),</span>
<span id="cb5-29">    <span class="do" style="color: #5E5E5E;
font-style: italic;">## fotmob's parent_league_season always reflects the current season, so we need to manually</span></span>
<span id="cb5-30">    <span class="do" style="color: #5E5E5E;
font-style: italic;">##   define the season from the date. we would certainly want a more automated approach</span></span>
<span id="cb5-31">    <span class="do" style="color: #5E5E5E;
font-style: italic;">##   if working with more seasons and more leagues.</span></span>
<span id="cb5-32">    <span class="at" style="color: #657422;">season =</span> <span class="fu" style="color: #4758AB;">case_when</span>(</span>
<span id="cb5-33">      date <span class="sc" style="color: #5E5E5E;">&gt;=</span> <span class="fu" style="color: #4758AB;">ymd</span>(<span class="st" style="color: #20794D;">'2020-09-12'</span>) <span class="sc" style="color: #5E5E5E;">&amp;</span> date <span class="sc" style="color: #5E5E5E;">&lt;=</span> <span class="fu" style="color: #4758AB;">ymd</span>(<span class="st" style="color: #20794D;">'2021-05-23'</span>) <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">'2020/21'</span>,</span>
<span id="cb5-34">      date <span class="sc" style="color: #5E5E5E;">&gt;=</span> <span class="fu" style="color: #4758AB;">ymd</span>(<span class="st" style="color: #20794D;">'2021-08-13'</span>) <span class="sc" style="color: #5E5E5E;">&amp;</span> date <span class="sc" style="color: #5E5E5E;">&lt;=</span> <span class="fu" style="color: #4758AB;">ymd</span>(<span class="st" style="color: #20794D;">'2022-05-22'</span>) <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">'2021/22'</span>,</span>
<span id="cb5-35">      <span class="cn" style="color: #8f5902;">TRUE</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="cn" style="color: #8f5902;">NA_character_</span></span>
<span id="cb5-36">    )</span>
<span id="cb5-37">  ) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb5-38">  <span class="do" style="color: #5E5E5E;
font-style: italic;">## the NAs are for 2022/2023 (incomplete as of writing) and the partial data for 2019/2020</span></span>
<span id="cb5-39">  <span class="fu" style="color: #4758AB;">drop_na</span>(season) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb5-40">  <span class="fu" style="color: #4758AB;">transmute</span>(</span>
<span id="cb5-41">    match_id,</span>
<span id="cb5-42">    season,</span>
<span id="cb5-43">    date,</span>
<span id="cb5-44">    home_team,</span>
<span id="cb5-45">    away_team,</span>
<span id="cb5-46">    <span class="at" style="color: #657422;">is_home =</span> team_id <span class="sc" style="color: #5E5E5E;">==</span> home_team_id,</span>
<span id="cb5-47">    <span class="do" style="color: #5E5E5E;
font-style: italic;">## some shots with NAs for some reason</span></span>
<span id="cb5-48">    <span class="at" style="color: #657422;">xg =</span> <span class="fu" style="color: #4758AB;">coalesce</span>(expected_goals, <span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb5-49">  ) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb5-50">  <span class="fu" style="color: #4758AB;">rename_fotmob_teams</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb5-51">  <span class="fu" style="color: #4758AB;">rename_home_away_teams</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb5-52">  <span class="fu" style="color: #4758AB;">arrange</span>(season, date, team)</span></code></pre></div>
</details>
</div>
<p>Alright, now the fun part. We functionalize the code from the example for calculating the probability that xG will result in 0, 1, 2, etc. goals.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;">library</span>(purrr)</span>
<span id="cb6-2">permute_xg <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(xg) {</span>
<span id="cb6-3">  n <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">length</span>(xg)</span>
<span id="cb6-4">  x <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">seq.int</span>(<span class="dv" style="color: #AD0000;">0</span>, n)</span>
<span id="cb6-5">  <span class="fu" style="color: #4758AB;">dpoibin</span>(x, xg)</span>
<span id="cb6-6">}</span>
<span id="cb6-7"></span>
<span id="cb6-8">calculate_permuted_xg <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(df) {</span>
<span id="cb6-9">  df <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb6-10">    <span class="fu" style="color: #4758AB;">group_by</span>(<span class="fu" style="color: #4758AB;">across</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="fu" style="color: #4758AB;">everything</span>(), <span class="sc" style="color: #5E5E5E;">-</span>xg))) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb6-11">    <span class="fu" style="color: #4758AB;">summarize</span>(<span class="fu" style="color: #4758AB;">across</span>(xg, <span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">list</span>(.x))) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb6-12">    <span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb6-13">      <span class="at" style="color: #657422;">prob =</span> <span class="fu" style="color: #4758AB;">map</span>(xg, <span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">permute_xg</span>(.x))</span>
<span id="cb6-14">    ) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb6-15">    <span class="fu" style="color: #4758AB;">select</span>(<span class="sc" style="color: #5E5E5E;">-</span><span class="fu" style="color: #4758AB;">c</span>(xg)) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb6-16">    <span class="fu" style="color: #4758AB;">unnest</span>(<span class="at" style="color: #657422;">cols =</span> <span class="fu" style="color: #4758AB;">c</span>(prob)) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb6-17">    <span class="fu" style="color: #4758AB;">group_by</span>(<span class="fu" style="color: #4758AB;">across</span>(<span class="sc" style="color: #5E5E5E;">-</span><span class="fu" style="color: #4758AB;">c</span>(prob))) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb6-18">    <span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb6-19">      <span class="at" style="color: #657422;">g =</span> <span class="fu" style="color: #4758AB;">row_number</span>() <span class="sc" style="color: #5E5E5E;">-</span> 1L</span>
<span id="cb6-20">    ) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb6-21">    <span class="fu" style="color: #4758AB;">ungroup</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb6-22">    <span class="fu" style="color: #4758AB;">arrange</span>(match_id, is_home, g)</span>
<span id="cb6-23">}</span>
<span id="cb6-24"></span>
<span id="cb6-25">understat_permuted_xg <span class="ot" style="color: #003B4F;">&lt;-</span> understat_shots <span class="sc" style="color: #5E5E5E;">|&gt;</span> <span class="fu" style="color: #4758AB;">calculate_permuted_xg</span>()</span>
<span id="cb6-26">fotmob_permuted_xg <span class="ot" style="color: #003B4F;">&lt;-</span> fotmob_shots <span class="sc" style="color: #5E5E5E;">|&gt;</span> <span class="fu" style="color: #4758AB;">calculate_permuted_xg</span>()</span></code></pre></div>
</details>
</div>
<p>Next, we identify all possible goal combinations using xG as “weights” to compute the relative likelihood of each combination, and then analytically calculate the probabilities of winning, losing, and drawing.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">summarize_pivoted_permuted_xg <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(prob_away, prob_home) {</span>
<span id="cb7-2">  outer_prod <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">outer</span>(prob_away, prob_home)</span>
<span id="cb7-3">  p_draw <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sum</span>(<span class="fu" style="color: #4758AB;">diag</span>(outer_prod), <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb7-4">  p_home <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sum</span>(<span class="fu" style="color: #4758AB;">upperTriangle</span>(outer_prod), <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb7-5">  p_away <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sum</span>(<span class="fu" style="color: #4758AB;">lowerTriangle</span>(outer_prod), <span class="at" style="color: #657422;">na.rm =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb7-6">  <span class="fu" style="color: #4758AB;">list</span>(</span>
<span id="cb7-7">    <span class="at" style="color: #657422;">draw =</span> p_draw,</span>
<span id="cb7-8">    <span class="at" style="color: #657422;">home =</span> p_home,</span>
<span id="cb7-9">    <span class="at" style="color: #657422;">away =</span> p_away</span>
<span id="cb7-10">  )</span>
<span id="cb7-11">}</span>
<span id="cb7-12"></span>
<span id="cb7-13"><span class="do" style="color: #5E5E5E;
font-style: italic;">## Bournemouth 0 - 1 Manchester City on 2019-03-02</span></span>
<span id="cb7-14"><span class="do" style="color: #5E5E5E;
font-style: italic;">## Huddersfield 0 - 0 Swansea on 2018-03-10</span></span>
<span id="cb7-15">pad_for_matches_without_shots_from_one_team <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(df) {</span>
<span id="cb7-16">  n_teams_per_match <span class="ot" style="color: #003B4F;">&lt;-</span> df <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb7-17">    <span class="fu" style="color: #4758AB;">distinct</span>(match_id, team) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb7-18">    <span class="fu" style="color: #4758AB;">count</span>(match_id, <span class="at" style="color: #657422;">sort =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb7-19">  </span>
<span id="cb7-20">  matches_with_no_shots_from_one_team <span class="ot" style="color: #003B4F;">&lt;-</span> n_teams_per_match <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb7-21">    <span class="fu" style="color: #4758AB;">filter</span>(n <span class="sc" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb7-22">  </span>
<span id="cb7-23">  dummy_opponents <span class="ot" style="color: #003B4F;">&lt;-</span> df <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb7-24">    <span class="fu" style="color: #4758AB;">distinct</span>(match_id, season, date, team, opponent, is_home) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb7-25">    <span class="fu" style="color: #4758AB;">semi_join</span>(</span>
<span id="cb7-26">      matches_with_no_shots_from_one_team,</span>
<span id="cb7-27">      <span class="at" style="color: #657422;">by =</span> <span class="st" style="color: #20794D;">'match_id'</span></span>
<span id="cb7-28">    ) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb7-29">    <span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb7-30">      <span class="at" style="color: #657422;">z =</span> team</span>
<span id="cb7-31">    ) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb7-32">    <span class="fu" style="color: #4758AB;">transmute</span>(</span>
<span id="cb7-33">      match_id, </span>
<span id="cb7-34">      season, </span>
<span id="cb7-35">      date, </span>
<span id="cb7-36">      <span class="at" style="color: #657422;">team =</span> opponent,</span>
<span id="cb7-37">      <span class="at" style="color: #657422;">opponent =</span> z,</span>
<span id="cb7-38">      <span class="fu" style="color: #4758AB;">across</span>(is_home, <span class="sc" style="color: #5E5E5E;">~!</span>.x),</span>
<span id="cb7-39">      <span class="at" style="color: #657422;">prob =</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb7-40">      <span class="at" style="color: #657422;">g =</span> 0L</span>
<span id="cb7-41">    )</span>
<span id="cb7-42">  </span>
<span id="cb7-43">  <span class="fu" style="color: #4758AB;">bind_rows</span>(</span>
<span id="cb7-44">    df,</span>
<span id="cb7-45">    dummy_opponents</span>
<span id="cb7-46">  ) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb7-47">  <span class="fu" style="color: #4758AB;">arrange</span>(season, date, team, g)</span>
<span id="cb7-48">}</span>
<span id="cb7-49"></span>
<span id="cb7-50">summarize_permuted_xg_by_match <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(df) {</span>
<span id="cb7-51">  </span>
<span id="cb7-52">  padded_df <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">pad_for_matches_without_shots_from_one_team</span>(df)</span>
<span id="cb7-53">  </span>
<span id="cb7-54">  pivoted <span class="ot" style="color: #003B4F;">&lt;-</span> padded_df <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb7-55">    <span class="fu" style="color: #4758AB;">transmute</span>(</span>
<span id="cb7-56">      match_id,</span>
<span id="cb7-57">      season,</span>
<span id="cb7-58">      date,</span>
<span id="cb7-59">      g,</span>
<span id="cb7-60">      <span class="at" style="color: #657422;">is_home =</span> <span class="fu" style="color: #4758AB;">ifelse</span>(is_home, <span class="st" style="color: #20794D;">'home'</span>, <span class="st" style="color: #20794D;">'away'</span>),</span>
<span id="cb7-61">      prob</span>
<span id="cb7-62">    ) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb7-63">    <span class="fu" style="color: #4758AB;">pivot_wider</span>(</span>
<span id="cb7-64">      <span class="at" style="color: #657422;">names_from =</span> is_home,</span>
<span id="cb7-65">      <span class="at" style="color: #657422;">names_prefix =</span> <span class="st" style="color: #20794D;">'prob_'</span>,</span>
<span id="cb7-66">      <span class="at" style="color: #657422;">values_from =</span> prob,</span>
<span id="cb7-67">      <span class="at" style="color: #657422;">values_fill =</span> 0L</span>
<span id="cb7-68">    )</span>
<span id="cb7-69">  </span>
<span id="cb7-70">  pivoted <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb7-71">    <span class="fu" style="color: #4758AB;">select</span>(match_id, season, date, prob_away, prob_home) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb7-72">    <span class="fu" style="color: #4758AB;">group_by</span>(match_id, season, date) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb7-73">    <span class="fu" style="color: #4758AB;">summarize</span>(</span>
<span id="cb7-74">      <span class="fu" style="color: #4758AB;">across</span>(<span class="fu" style="color: #4758AB;">starts_with</span>(<span class="st" style="color: #20794D;">'prob_'</span>), <span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">list</span>(.x))</span>
<span id="cb7-75">    ) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb7-76">    <span class="fu" style="color: #4758AB;">ungroup</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb7-77">    <span class="fu" style="color: #4758AB;">inner_join</span>(</span>
<span id="cb7-78">      padded_df <span class="sc" style="color: #5E5E5E;">|&gt;</span> <span class="fu" style="color: #4758AB;">distinct</span>(match_id, team, opponent, is_home),</span>
<span id="cb7-79">      <span class="at" style="color: #657422;">by =</span> <span class="st" style="color: #20794D;">'match_id'</span></span>
<span id="cb7-80">    ) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb7-81">    <span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb7-82">      <span class="at" style="color: #657422;">prob =</span> <span class="fu" style="color: #4758AB;">map2</span>(prob_away, prob_home, summarize_pivoted_permuted_xg)</span>
<span id="cb7-83">    ) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb7-84">    <span class="fu" style="color: #4758AB;">select</span>(<span class="sc" style="color: #5E5E5E;">-</span><span class="fu" style="color: #4758AB;">starts_with</span>(<span class="st" style="color: #20794D;">'prob_'</span>)) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb7-85">    <span class="fu" style="color: #4758AB;">unnest_wider</span>(prob, <span class="at" style="color: #657422;">names_sep =</span> <span class="st" style="color: #20794D;">'_'</span>) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb7-86">    <span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb7-87">      <span class="at" style="color: #657422;">prob_win =</span> <span class="fu" style="color: #4758AB;">ifelse</span>(is_home, prob_home, prob_away),</span>
<span id="cb7-88">      <span class="at" style="color: #657422;">prob_lose =</span> <span class="fu" style="color: #4758AB;">ifelse</span>(is_home, prob_away, prob_home),</span>
<span id="cb7-89">      <span class="at" style="color: #657422;">xpts =</span> <span class="dv" style="color: #AD0000;">3</span> <span class="sc" style="color: #5E5E5E;">*</span> prob_win <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span> <span class="sc" style="color: #5E5E5E;">*</span> prob_draw</span>
<span id="cb7-90">    ) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb7-91">    <span class="fu" style="color: #4758AB;">select</span>(<span class="sc" style="color: #5E5E5E;">-</span><span class="fu" style="color: #4758AB;">c</span>(prob_home, prob_away))</span>
<span id="cb7-92">}</span>
<span id="cb7-93"></span>
<span id="cb7-94">understat_xpts_by_match <span class="ot" style="color: #003B4F;">&lt;-</span> understat_permuted_xg <span class="sc" style="color: #5E5E5E;">|&gt;</span> <span class="fu" style="color: #4758AB;">summarize_permuted_xg_by_match</span>()</span>
<span id="cb7-95">fotmob_xpts_by_match <span class="ot" style="color: #003B4F;">&lt;-</span> fotmob_permuted_xg <span class="sc" style="color: #5E5E5E;">|&gt;</span> <span class="fu" style="color: #4758AB;">summarize_permuted_xg_by_match</span>()</span></code></pre></div>
</details>
</div>
<p>Let’s take a quick peak at the distributions of xG and xPts, both as a sanity check and to enhance our understanding of the relationship between the two. When plotting xPts as a function xG, we should expect to see a monotonically increasing relationship where xPts bottoms out at zero and tops out at three.</p>
<p><img src="https://itsmetoeknee.netlify.app/posts/epl-xpts-simulation-1/xg_vs_xpts.png" class="img-fluid"></p>
<p>Further, if there is any doubt about the expected points calculation, note that understat offers xPts directly in their data. The mean absolute error of our calculation of xPts with theirs is ~0.02.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;">library</span>(understatr)</span>
<span id="cb8-2"></span>
<span id="cb8-3">all_raw_understat_xpts_by_match <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">2014</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">2021</span> <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb8-4">  <span class="fu" style="color: #4758AB;">set_names</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb8-5">  <span class="fu" style="color: #4758AB;">map_dfr</span>(</span>
<span id="cb8-6">    <span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">get_league_teams_stats</span>(<span class="st" style="color: #20794D;">'EPL'</span>, .x),</span>
<span id="cb8-7">    <span class="at" style="color: #657422;">.id =</span> <span class="st" style="color: #20794D;">'season'</span></span>
<span id="cb8-8">  ) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb8-9">  <span class="fu" style="color: #4758AB;">transmute</span>(</span>
<span id="cb8-10">    <span class="fu" style="color: #4758AB;">across</span>(season, <span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">convert_understat_year_to_season</span>(<span class="fu" style="color: #4758AB;">as.integer</span>(.x))),</span>
<span id="cb8-11">    date,</span>
<span id="cb8-12">    <span class="at" style="color: #657422;">team =</span> team_name,</span>
<span id="cb8-13">    result,</span>
<span id="cb8-14">    pts,</span>
<span id="cb8-15">    <span class="at" style="color: #657422;">raw_xpts =</span> xpts,</span>
<span id="cb8-16">    <span class="at" style="color: #657422;">xg =</span> xG</span>
<span id="cb8-17">  )</span>
<span id="cb8-18"></span>
<span id="cb8-19">raw_understat_xpts_by_match <span class="ot" style="color: #003B4F;">&lt;-</span> all_raw_understat_xpts_by_match <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb8-20">  <span class="fu" style="color: #4758AB;">inner_join</span>(</span>
<span id="cb8-21">    understat_xpts_by_match <span class="sc" style="color: #5E5E5E;">|&gt;</span> <span class="fu" style="color: #4758AB;">select</span>(season, date, team, xpts),</span>
<span id="cb8-22">    <span class="at" style="color: #657422;">by =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'season'</span>, <span class="st" style="color: #20794D;">'date'</span>, <span class="st" style="color: #20794D;">'team'</span>)</span>
<span id="cb8-23">  ) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb8-24">  <span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb8-25">    <span class="at" style="color: #657422;">xptsd =</span> raw_xpts <span class="sc" style="color: #5E5E5E;">-</span> xpts</span>
<span id="cb8-26">  ) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb8-27">  <span class="fu" style="color: #4758AB;">arrange</span>(season, date, team)</span>
<span id="cb8-28"></span>
<span id="cb8-29"><span class="do" style="color: #5E5E5E;
font-style: italic;">## mean absolute error</span></span>
<span id="cb8-30"><span class="fu" style="color: #4758AB;">round</span>(<span class="fu" style="color: #4758AB;">mean</span>(<span class="fu" style="color: #4758AB;">abs</span>(raw_understat_xpts_by_match<span class="sc" style="color: #5E5E5E;">$</span>xptsd)), <span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb8-31"><span class="co" style="color: #5E5E5E;">#&gt; [1] 0.02</span></span></code></pre></div>
</details>
</div>
</section>
<section id="match-predictive-performance7" class="level3">
<h3 class="anchored" data-anchor-id="match-predictive-performance7">2. Match predictive performance<sup>7</sup></h3>
<p>As one might guess, the match outcome probabilities implied by the xG from understat and fotmob are strongly correlated.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">rename_xpts_by_match <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(df, src) {</span>
<span id="cb9-2">  df <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb9-3">    <span class="fu" style="color: #4758AB;">select</span>(season, date, team, <span class="fu" style="color: #4758AB;">starts_with</span>(<span class="st" style="color: #20794D;">'prob_'</span>), xpts) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb9-4">    <span class="fu" style="color: #4758AB;">rename_with</span>(</span>
<span id="cb9-5">      <span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">sprintf</span>(<span class="st" style="color: #20794D;">'%s_%s'</span>, .x, src), <span class="fu" style="color: #4758AB;">c</span>(<span class="fu" style="color: #4758AB;">starts_with</span>(<span class="st" style="color: #20794D;">'prob_'</span>), xpts)</span>
<span id="cb9-6">    )</span>
<span id="cb9-7">}</span>
<span id="cb9-8"></span>
<span id="cb9-9">xpts_by_match <span class="ot" style="color: #003B4F;">&lt;-</span> raw_understat_xpts_by_match <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb9-10">  <span class="fu" style="color: #4758AB;">select</span>(season, date, team, result, pts) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb9-11">  <span class="fu" style="color: #4758AB;">inner_join</span>(</span>
<span id="cb9-12">    understat_xpts_by_match <span class="sc" style="color: #5E5E5E;">|&gt;</span> <span class="fu" style="color: #4758AB;">rename_xpts_by_match</span>(<span class="st" style="color: #20794D;">'understat'</span>),</span>
<span id="cb9-13">    <span class="at" style="color: #657422;">by =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'season'</span>, <span class="st" style="color: #20794D;">'date'</span>, <span class="st" style="color: #20794D;">'team'</span>)</span>
<span id="cb9-14">  ) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb9-15">  <span class="fu" style="color: #4758AB;">inner_join</span>(</span>
<span id="cb9-16">    fotmob_xpts_by_match <span class="sc" style="color: #5E5E5E;">|&gt;</span> <span class="fu" style="color: #4758AB;">rename_xpts_by_match</span>(<span class="st" style="color: #20794D;">'fotmob'</span>),</span>
<span id="cb9-17">    <span class="at" style="color: #657422;">by =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'season'</span>, <span class="st" style="color: #20794D;">'date'</span>, <span class="st" style="color: #20794D;">'team'</span>)</span>
<span id="cb9-18">  )</span>
<span id="cb9-19"></span>
<span id="cb9-20">cor_draw <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">cor</span>(xpts_by_match<span class="sc" style="color: #5E5E5E;">$</span>prob_draw_fotmob, xpts_by_match<span class="sc" style="color: #5E5E5E;">$</span>prob_draw_understat)</span>
<span id="cb9-21">cor_win <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">cor</span>(xpts_by_match<span class="sc" style="color: #5E5E5E;">$</span>prob_win_fotmob, xpts_by_match<span class="sc" style="color: #5E5E5E;">$</span>prob_win_understat)</span>
<span id="cb9-22">cor_lose <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">cor</span>(xpts_by_match<span class="sc" style="color: #5E5E5E;">$</span>prob_lose_fotmob, xpts_by_match<span class="sc" style="color: #5E5E5E;">$</span>prob_lose_understat)</span>
<span id="cb9-23"><span class="fu" style="color: #4758AB;">round</span>(<span class="fu" style="color: #4758AB;">c</span>(cor_draw, cor_win, cor_lose), <span class="dv" style="color: #AD0000;">3</span>)</span>
<span id="cb9-24"><span class="co" style="color: #5E5E5E;">#&gt; [1] 0.906 0.958 0.958</span></span></code></pre></div>
</details>
</div>
<p>Note that the win and loss correlations are identical. This is due to the symmetric nature of the data—we have two records for each match, one from each team’s perspective.<sup>8</sup></p>
<section id="predicting-match-outcomes-with-binary-logistic-regression" class="level4">
<h4 class="anchored" data-anchor-id="predicting-match-outcomes-with-binary-logistic-regression">Predicting match outcomes with binary logistic regression</h4>
<p>Now let’s compare how “good” the implied probabilities from the two sources are. To do this, we’ll create binary logistic regression models to predict a given outcome and compute:</p>
<ol type="1">
<li>the <a href="https://en.wikipedia.org/wiki/Mean_squared_error">mean squared error (MSE)</a>;</li>
<li>the <a href="https://en.wikipedia.org/wiki/Brier_score#Brier_Skill_Score_(BSS)">brier skill score (BSS)</a>, treating the empirical proportion of the specified outcome as the reference.<sup>9</sup><sup>10</sup></li>
<li>a <a href="https://changhsinlee.com/python-calibration-plot/">calibration plot</a>, grouping predictions into “buckets” at every 5%.</li>
</ol>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">result_props <span class="ot" style="color: #003B4F;">&lt;-</span> xpts_by_match <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb10-2">  <span class="fu" style="color: #4758AB;">count</span>(result) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb10-3">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">prop =</span> n <span class="sc" style="color: #5E5E5E;">/</span> <span class="fu" style="color: #4758AB;">sum</span>(n))</span>
<span id="cb10-4"></span>
<span id="cb10-5">compute_mse <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(truth, estimate) {</span>
<span id="cb10-6">  <span class="fu" style="color: #4758AB;">mean</span>((truth <span class="sc" style="color: #5E5E5E;">-</span> estimate)<span class="sc" style="color: #5E5E5E;">^</span><span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb10-7">}</span>
<span id="cb10-8"></span>
<span id="cb10-9">diagnose_prob_by_match <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(src, result) {</span>
<span id="cb10-10">  </span>
<span id="cb10-11">  df <span class="ot" style="color: #003B4F;">&lt;-</span> xpts_by_match <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb10-12">    <span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb10-13">      <span class="at" style="color: #657422;">result =</span> <span class="fu" style="color: #4758AB;">ifelse</span>(result <span class="sc" style="color: #5E5E5E;">==</span> <span class="sc" style="color: #5E5E5E;">!!</span>result, 1L, 0L) <span class="sc" style="color: #5E5E5E;">|&gt;</span> <span class="fu" style="color: #4758AB;">factor</span>()</span>
<span id="cb10-14">    )</span>
<span id="cb10-15">  </span>
<span id="cb10-16">  result_name <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">switch</span>(</span>
<span id="cb10-17">    result,</span>
<span id="cb10-18">    <span class="st" style="color: #20794D;">'w'</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">'win'</span>,</span>
<span id="cb10-19">    <span class="st" style="color: #20794D;">'l'</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">'lose'</span>,</span>
<span id="cb10-20">    <span class="st" style="color: #20794D;">'d'</span> <span class="ot" style="color: #003B4F;">=</span> <span class="st" style="color: #20794D;">'draw'</span></span>
<span id="cb10-21">  )</span>
<span id="cb10-22">  col <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sprintf</span>(<span class="st" style="color: #20794D;">'prob_%s_%s'</span>, result_name, src)</span>
<span id="cb10-23">  </span>
<span id="cb10-24">  fit <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">glm</span>(</span>
<span id="cb10-25">    df<span class="sc" style="color: #5E5E5E;">$</span>result <span class="sc" style="color: #5E5E5E;">~</span> df[[col]],</span>
<span id="cb10-26">    <span class="at" style="color: #657422;">family =</span> <span class="st" style="color: #20794D;">'binomial'</span></span>
<span id="cb10-27">  )</span>
<span id="cb10-28">  </span>
<span id="cb10-29">  probs <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">tibble</span>(</span>
<span id="cb10-30">    <span class="at" style="color: #657422;">result_num =</span> <span class="fu" style="color: #4758AB;">as.numeric</span>(df<span class="sc" style="color: #5E5E5E;">$</span>result) <span class="sc" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb10-31">    <span class="at" style="color: #657422;">.prob =</span> <span class="fu" style="color: #4758AB;">unname</span>(<span class="fu" style="color: #4758AB;">predict</span>(fit, <span class="at" style="color: #657422;">type =</span> <span class="st" style="color: #20794D;">'response'</span>))</span>
<span id="cb10-32">  )</span>
<span id="cb10-33">  </span>
<span id="cb10-34">  n_buckets <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">20</span></span>
<span id="cb10-35">  alpha <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fl" style="color: #AD0000;">0.05</span></span>
<span id="cb10-36">  calib <span class="ot" style="color: #003B4F;">&lt;-</span> probs <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb10-37">    <span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb10-38">      <span class="fu" style="color: #4758AB;">across</span>(.prob, <span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">round</span>(.x <span class="sc" style="color: #5E5E5E;">*</span> n_buckets) <span class="sc" style="color: #5E5E5E;">/</span> n_buckets)</span>
<span id="cb10-39">    ) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb10-40">    <span class="fu" style="color: #4758AB;">group_by</span>(.prob) <span class="sc" style="color: #5E5E5E;">|&gt;</span></span>
<span id="cb10-41">    <span class="fu" style="color: #4758AB;">summarize</span>(</span>
<span id="cb10-42">      <span class="do" style="color: #5E5E5E;
font-style: italic;">## Jeffreys' prior</span></span>
<span id="cb10-43">      <span class="at" style="color: #657422;">ci_lower =</span> <span class="fu" style="color: #4758AB;">qbeta</span>(alpha <span class="sc" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span>, <span class="fu" style="color: #4758AB;">sum</span>(result_num) <span class="sc" style="color: #5E5E5E;">+</span> <span class="fl" style="color: #AD0000;">0.5</span>, <span class="fu" style="color: #4758AB;">n</span>() <span class="sc" style="color: #5E5E5E;">-</span> <span class="fu" style="color: #4758AB;">sum</span>(result_num) <span class="sc" style="color: #5E5E5E;">+</span> <span class="fl" style="color: #AD0000;">0.5</span>),</span>
<span id="cb10-44">      <span class="at" style="color: #657422;">ci_upper =</span> <span class="fu" style="color: #4758AB;">qbeta</span>(<span class="dv" style="color: #AD0000;">1</span> <span class="sc" style="color: #5E5E5E;">-</span> alpha <span class="sc" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">2</span>, <span class="fu" style="color: #4758AB;">sum</span>(result_num) <span class="sc" style="color: #5E5E5E;">+</span> <span class="fl" style="color: #AD0000;">0.5</span>, <span class="fu" style="color: #4758AB;">n</span>() <span class="sc" style="color: #5E5E5E;">-</span> <span class="fu" style="color: #4758AB;">sum</span>(result_num) <span class="sc" style="color: #5E5E5E;">+</span> <span class="fl" style="color: #AD0000;">0.5</span>),</span>
<span id="cb10-45">      <span class="at" style="color: #657422;">actual =</span> <span class="fu" style="color: #4758AB;">sum</span>(result_num) <span class="sc" style="color: #5E5E5E;">/</span> <span class="fu" style="color: #4758AB;">n</span>(),</span>
<span id="cb10-46">      <span class="at" style="color: #657422;">n =</span> <span class="fu" style="color: #4758AB;">n</span>()</span>
<span id="cb10-47">    ) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb10-48">    <span class="fu" style="color: #4758AB;">ungroup</span>()</span>
<span id="cb10-49">  </span>
<span id="cb10-50">  mse <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">compute_mse</span>(probs<span class="sc" style="color: #5E5E5E;">$</span>result_num, probs<span class="sc" style="color: #5E5E5E;">$</span>.prob)</span>
<span id="cb10-51">  </span>
<span id="cb10-52">  ref_prob <span class="ot" style="color: #003B4F;">&lt;-</span> result_props <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb10-53">    <span class="fu" style="color: #4758AB;">filter</span>(result <span class="sc" style="color: #5E5E5E;">==</span> <span class="sc" style="color: #5E5E5E;">!!</span>result) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb10-54">    <span class="fu" style="color: #4758AB;">pull</span>(prop)</span>
<span id="cb10-55">  </span>
<span id="cb10-56">  ref_mse <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">compute_mse</span>(probs<span class="sc" style="color: #5E5E5E;">$</span>result_num, ref_prob)</span>
<span id="cb10-57">  bss <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">1</span> <span class="sc" style="color: #5E5E5E;">-</span> (mse <span class="sc" style="color: #5E5E5E;">/</span> ref_mse)</span>
<span id="cb10-58">  </span>
<span id="cb10-59">  <span class="fu" style="color: #4758AB;">list</span>(</span>
<span id="cb10-60">    <span class="at" style="color: #657422;">calib =</span> calib,</span>
<span id="cb10-61">    <span class="at" style="color: #657422;">mse =</span> mse,</span>
<span id="cb10-62">    <span class="at" style="color: #657422;">bss =</span> bss</span>
<span id="cb10-63">  )</span>
<span id="cb10-64">}</span>
<span id="cb10-65"></span>
<span id="cb10-66">diagnostics <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">crossing</span>(</span>
<span id="cb10-67">  <span class="at" style="color: #657422;">result =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'w'</span>, <span class="st" style="color: #20794D;">'d'</span>),</span>
<span id="cb10-68">  <span class="at" style="color: #657422;">src =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'understat'</span>, <span class="st" style="color: #20794D;">'fotmob'</span>)</span>
<span id="cb10-69">) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb10-70">  <span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb10-71">    <span class="at" style="color: #657422;">diagnostics =</span> <span class="fu" style="color: #4758AB;">map2</span>(src, result, diagnose_prob_by_match)</span>
<span id="cb10-72">  ) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb10-73">  <span class="fu" style="color: #4758AB;">unnest_wider</span>(diagnostics)</span>
<span id="cb10-74">diagnostics <span class="sc" style="color: #5E5E5E;">|&gt;</span> <span class="fu" style="color: #4758AB;">select</span>(<span class="sc" style="color: #5E5E5E;">-</span>calib)</span>
<span id="cb10-75"><span class="co" style="color: #5E5E5E;">#&gt; # A tibble: 4 × 4</span></span>
<span id="cb10-76"><span class="co" style="color: #5E5E5E;">#&gt;   result src         mse    bss</span></span>
<span id="cb10-77"><span class="co" style="color: #5E5E5E;">#&gt;   &lt;chr&gt;  &lt;chr&gt;     &lt;dbl&gt;  &lt;dbl&gt;</span></span>
<span id="cb10-78"><span class="co" style="color: #5E5E5E;">#&gt; 1 d      fotmob    0.170 0.0268</span></span>
<span id="cb10-79"><span class="co" style="color: #5E5E5E;">#&gt; 2 d      understat 0.166 0.0466</span></span>
<span id="cb10-80"><span class="co" style="color: #5E5E5E;">#&gt; 3 w      fotmob    0.173 0.270 </span></span>
<span id="cb10-81"><span class="co" style="color: #5E5E5E;">#&gt; 4 w      understat 0.162 0.317</span></span></code></pre></div>
</details>
</div>
<p>The MSE (where lower is “better”) and the BSS (where higher is “better”) lead us to the same conclusion—the models based on understat’s xG slightly outperform the one based on fotmob’s xG.</p>
<p>Moreover, looking at the calibration plot, the understat model predictions seem to stick closer to the 45 degree slope representing perfect calibration.</p>
<p><img src="https://itsmetoeknee.netlify.app/posts/epl-xpts-simulation-1/calib.png" class="img-fluid"></p>
</section>
<section id="predicting-points-with-linear-regression" class="level4">
<h4 class="anchored" data-anchor-id="predicting-points-with-linear-regression">Predicting points with linear regression</h4>
<p>Alternatively, we could regress points on expected points. For linear regression, we can use the <a href="https://en.wikipedia.org/wiki/Root-mean-square_deviation">root mean squared error (RMSE)</a> (where lower is “better”) and <a href="https://en.wikipedia.org/wiki/Coefficient_of_determination">R squared</a> (where higher is “better”) to compare the models.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">compute_rmse <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(truth, estimate) {</span>
<span id="cb11-2">  <span class="fu" style="color: #4758AB;">sqrt</span>(<span class="fu" style="color: #4758AB;">mean</span>((truth <span class="sc" style="color: #5E5E5E;">-</span> estimate)<span class="sc" style="color: #5E5E5E;">^</span><span class="dv" style="color: #AD0000;">2</span>))</span>
<span id="cb11-3">}</span>
<span id="cb11-4"></span>
<span id="cb11-5">diagnose_xpts_by_match <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(src) {</span>
<span id="cb11-6">  </span>
<span id="cb11-7">  col <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sprintf</span>(<span class="st" style="color: #20794D;">'xpts_%s'</span>, src)</span>
<span id="cb11-8">  fit <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">lm</span>(xpts_by_match<span class="sc" style="color: #5E5E5E;">$</span>pts <span class="sc" style="color: #5E5E5E;">~</span> xpts_by_match[[col]])</span>
<span id="cb11-9">  </span>
<span id="cb11-10">  pred <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">predict</span>(fit)</span>
<span id="cb11-11">  </span>
<span id="cb11-12">  <span class="fu" style="color: #4758AB;">tibble</span>(</span>
<span id="cb11-13">    <span class="at" style="color: #657422;">rmse =</span> <span class="fu" style="color: #4758AB;">compute_rmse</span>(xpts_by_match<span class="sc" style="color: #5E5E5E;">$</span>pts, pred),</span>
<span id="cb11-14">    <span class="at" style="color: #657422;">r2 =</span> <span class="fu" style="color: #4758AB;">summary</span>(fit)<span class="sc" style="color: #5E5E5E;">$</span>r.squared</span>
<span id="cb11-15">  )</span>
<span id="cb11-16">}</span>
<span id="cb11-17"></span>
<span id="cb11-18"><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'understat'</span>, <span class="st" style="color: #20794D;">'fotmob'</span>) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb11-19">  <span class="fu" style="color: #4758AB;">set_names</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb11-20">  <span class="fu" style="color: #4758AB;">map_dfr</span>(diagnose_xpts_by_match, <span class="at" style="color: #657422;">.id =</span> <span class="st" style="color: #20794D;">'src'</span>)</span>
<span id="cb11-21"><span class="co" style="color: #5E5E5E;">#&gt; # A tibble: 2 × 3</span></span>
<span id="cb11-22"><span class="co" style="color: #5E5E5E;">#&gt;   src        rmse    r2</span></span>
<span id="cb11-23"><span class="co" style="color: #5E5E5E;">#&gt;   &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;</span></span>
<span id="cb11-24"><span class="co" style="color: #5E5E5E;">#&gt; 1 understat  1.06 0.374</span></span>
<span id="cb11-25"><span class="co" style="color: #5E5E5E;">#&gt; 2 fotmob     1.10 0.323</span></span></code></pre></div>
</details>
</div>
<p>The understat model proves to be better by both metrics, having a lower RMSE and higher R squared than the fotmob model.</p>
</section>
<section id="predicting-match-outcomes-with-multinomial-logistic-regression" class="level4">
<h4 class="anchored" data-anchor-id="predicting-match-outcomes-with-multinomial-logistic-regression">Predicting match outcomes with multinomial logistic regression</h4>
<p>Personally, I don’t like predicting points directly like this since it’s a discrete variable that can only take on three values (0, 1, and 3). If we’re going to predict points instead of a probability, I think the better approach is to run a multinomial logistic regression and to convert the predicted probabilities to expected points.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="fu" style="color: #4758AB;">library</span>(nnet)</span>
<span id="cb12-2">diagnose_implied_xpts_by_match <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(src) {</span>
<span id="cb12-3">  </span>
<span id="cb12-4">  col_win <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sprintf</span>(<span class="st" style="color: #20794D;">'prob_win_%s'</span>, src)</span>
<span id="cb12-5">  col_draw <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sprintf</span>(<span class="st" style="color: #20794D;">'prob_draw_%s'</span>, src)</span>
<span id="cb12-6">  fit <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">multinom</span>(</span>
<span id="cb12-7">    xpts_by_match<span class="sc" style="color: #5E5E5E;">$</span>result <span class="sc" style="color: #5E5E5E;">~</span> xpts_by_match[[col_win]] <span class="sc" style="color: #5E5E5E;">+</span> xpts_by_match[[col_draw]],</span>
<span id="cb12-8">    <span class="at" style="color: #657422;">trace =</span> <span class="cn" style="color: #8f5902;">FALSE</span></span>
<span id="cb12-9">  )</span>
<span id="cb12-10">  probs <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">predict</span>(fit, <span class="at" style="color: #657422;">type =</span> <span class="st" style="color: #20794D;">'probs'</span>) <span class="sc" style="color: #5E5E5E;">|&gt;</span> <span class="fu" style="color: #4758AB;">as_tibble</span>()</span>
<span id="cb12-11">  preds <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">3</span> <span class="sc" style="color: #5E5E5E;">*</span> probs<span class="sc" style="color: #5E5E5E;">$</span>w <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span> <span class="sc" style="color: #5E5E5E;">*</span> probs<span class="sc" style="color: #5E5E5E;">$</span>d</span>
<span id="cb12-12">  </span>
<span id="cb12-13">  <span class="fu" style="color: #4758AB;">tibble</span>(</span>
<span id="cb12-14">    <span class="at" style="color: #657422;">rmse =</span> <span class="fu" style="color: #4758AB;">compute_rmse</span>(xpts_by_match<span class="sc" style="color: #5E5E5E;">$</span>pts, preds),</span>
<span id="cb12-15">    <span class="at" style="color: #657422;">r2 =</span> <span class="fu" style="color: #4758AB;">cor</span>(xpts_by_match<span class="sc" style="color: #5E5E5E;">$</span>pts, preds)<span class="sc" style="color: #5E5E5E;">^</span><span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb12-16">  )</span>
<span id="cb12-17">}</span>
<span id="cb12-18"></span>
<span id="cb12-19"><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'understat'</span>, <span class="st" style="color: #20794D;">'fotmob'</span>) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb12-20">  <span class="fu" style="color: #4758AB;">set_names</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb12-21">  <span class="fu" style="color: #4758AB;">map_dfr</span>(diagnose_implied_xpts_by_match, <span class="at" style="color: #657422;">.id =</span> <span class="st" style="color: #20794D;">'src'</span>)</span>
<span id="cb12-22"><span class="co" style="color: #5E5E5E;">#&gt; # A tibble: 2 × 3</span></span>
<span id="cb12-23"><span class="co" style="color: #5E5E5E;">#&gt;   src        rmse    r2</span></span>
<span id="cb12-24"><span class="co" style="color: #5E5E5E;">#&gt;   &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;</span></span>
<span id="cb12-25"><span class="co" style="color: #5E5E5E;">#&gt; 1 understat  1.06 0.374</span></span>
<span id="cb12-26"><span class="co" style="color: #5E5E5E;">#&gt; 2 fotmob     1.10 0.321</span></span></code></pre></div>
</details>
</div>
<p>Again, we see that understat has a lower RMSE and higher R squared. The implication that understat performs slightly better than fotmob agrees with the results from the binary logistic regression approiach for predicting match outcome probabilities and the linear regression approach for predicting points.</p>
<p>Overall, we might say that understat seems to be the better of the two xG sources for explaining individual match results, although the margin is small enough that I would hesitate to say that this is the true across all leagues and all seasons.</p>
</section>
</section>
<section id="season-predictive-performance" class="level3">
<h3 class="anchored" data-anchor-id="season-predictive-performance">3. Season predictive performance</h3>
<p>How do the understat and fotmob models fare if we aggregate up the expected points to the season level and predict actual points?<sup>11</sup></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">xpts_by_season <span class="ot" style="color: #003B4F;">&lt;-</span> xpts_by_match <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb13-2">  <span class="fu" style="color: #4758AB;">group_by</span>(season, team) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb13-3">  <span class="fu" style="color: #4758AB;">summarize</span>(</span>
<span id="cb13-4">    <span class="fu" style="color: #4758AB;">across</span>(<span class="fu" style="color: #4758AB;">c</span>(pts, <span class="fu" style="color: #4758AB;">starts_with</span>(<span class="st" style="color: #20794D;">'xpts'</span>)), sum)</span>
<span id="cb13-5">  ) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb13-6">  <span class="fu" style="color: #4758AB;">ungroup</span>()</span>
<span id="cb13-7"></span>
<span id="cb13-8">diagnose_xpts_by_season <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(src) {</span>
<span id="cb13-9">  </span>
<span id="cb13-10">  col <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sprintf</span>(<span class="st" style="color: #20794D;">'xpts_%s'</span>, src)</span>
<span id="cb13-11">  fit <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">lm</span>(xpts_by_season<span class="sc" style="color: #5E5E5E;">$</span>pts <span class="sc" style="color: #5E5E5E;">~</span> xpts_by_season[[col]])</span>
<span id="cb13-12">  </span>
<span id="cb13-13">  preds <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">predict</span>(fit)</span>
<span id="cb13-14">  </span>
<span id="cb13-15">  <span class="fu" style="color: #4758AB;">tibble</span>(</span>
<span id="cb13-16">    <span class="at" style="color: #657422;">rmse =</span> <span class="fu" style="color: #4758AB;">compute_rmse</span>(xpts_by_match<span class="sc" style="color: #5E5E5E;">$</span>pts, preds),</span>
<span id="cb13-17">    <span class="at" style="color: #657422;">r2 =</span> <span class="fu" style="color: #4758AB;">summary</span>(fit)<span class="sc" style="color: #5E5E5E;">$</span>r.squared</span>
<span id="cb13-18">  )</span>
<span id="cb13-19">}</span>
<span id="cb13-20"></span>
<span id="cb13-21"><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'understat'</span>, <span class="st" style="color: #20794D;">'fotmob'</span>) <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb13-22">  <span class="fu" style="color: #4758AB;">set_names</span>() <span class="sc" style="color: #5E5E5E;">|&gt;</span> </span>
<span id="cb13-23">  <span class="fu" style="color: #4758AB;">map_dfr</span>(diagnose_xpts_by_season, <span class="at" style="color: #657422;">.id =</span> <span class="st" style="color: #20794D;">'src'</span>)</span>
<span id="cb13-24"><span class="co" style="color: #5E5E5E;">#&gt; # A tibble: 2 × 3</span></span>
<span id="cb13-25"><span class="co" style="color: #5E5E5E;">#&gt;   src        rmse    r2</span></span>
<span id="cb13-26"><span class="co" style="color: #5E5E5E;">#&gt;   &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;</span></span>
<span id="cb13-27"><span class="co" style="color: #5E5E5E;">#&gt; 1 understat  53.9 0.845</span></span>
<span id="cb13-28"><span class="co" style="color: #5E5E5E;">#&gt; 2 fotmob     53.8 0.825</span></span></code></pre></div>
</details>
</div>
<p>The results are closer than those at the match-level. In fact, fotmob just barely edges out understat in terms of RMSE xPts, although understat outperforms fotmob according to R squared by a relatively comfortable 0.02. It’s harder to make a general statement regarding which data source provides better xG for explaining season-long expected points, although we might lean in favor of understat again.</p>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Overall, we find that understat’s xG model seems to very slightly outperform fotmob’s in terms of explaining match results and season-long point totals.</p>
<p>In a follow up post, we’ll go more in depth regarding how we can leverage the match outcome probabilities to simulate season-ending points in a more rigorous fashion that done in the last section above.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p><a href="https://danny.page/expected_goals.html">Danny Page’s interactive web app</a> also uses simulation.↩︎</p></li>
<li id="fn2"><p>Now, if you desire the statistical properties that simulation offers, such as an estimation of error, that’s understandable; however, in write-ups that I’ve seen, such is not mentioned explicitly. Additionally, if one chooses to go down the simulation route because they believe that it helps to suppress flaws with the xG model, that’s also understandable. On the other hand, the analytical approach I present should present nearly identical results to that which one would find with simulation, and it offers the advantage of being much faster.↩︎</p></li>
<li id="fn3"><p>Plotting code is omitted throughout the post since it’s not particularly instructive.↩︎</p></li>
<li id="fn4"><p>How does this work? Under the assumption that xG comes from a <a href="https://en.wikipedia.org/wiki/Poisson_binomial_distribution">Poisson binomial distribution</a>, we look at all combinations of makes and misses of the shots and compare the relative proportion of instances in which one team’s number of success, i.e.&nbsp;goals, is greater than, equal to, or less than their opponent’s.↩︎</p></li>
<li id="fn5"><p>We’ve limited the scope for several reasons: (1) fotmob only has complete xG data for the 2020/21 and 2021/22 seasons as of writing, (2) I didn’t want to have to map team names across the two data sources for a ton of teams; and (3) of all league, I’m most interested in the EPL 😄.↩︎</p></li>
<li id="fn6"><p>Note that there are three additional shots in the fotmob data. There’s no simple solution to resolving this data discrepancy since we don’t have matching shot identifiers in the two data sets 🤷.↩︎</p></li>
<li id="fn7"><p>Using the adjective “predictive” is a little misleading, since we’re not actually making predictions out-of-sample. Rather, we’re using models based on xG to evaluate which xG data source better explains the observed results.↩︎</p></li>
<li id="fn8"><p>Home field advantage is treated as a feature instead of defined directly via columns, i.e.&nbsp;<code>home_team</code>, <code>home_score</code>, etc., which is good practice in general.↩︎</p></li>
<li id="fn9"><p>Draws occur for 22.5% of matches in the data set, and wins and losses occur in 38.8% of matches each.↩︎</p></li>
<li id="fn10"><p>Personally, I tend to rely on BSS wherever I can. Not only is it more interpretable—it’s a number between 0 and 1, while MSE can take on any value, depending on the context—I like that it forces one to compare to a baseline, which is a good principle in general.↩︎</p></li>
<li id="fn11"><p>Note that aggregating match-level probabilities to the season-level is not a statistically valid way to use the probabilities, which are intended to be treated independently.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>r</category>
  <category>soccer</category>
  <guid>https://itsmetoeknee.netlify.app/posts/epl-xpts-simulation-1/index.html</guid>
  <pubDate>Sun, 04 Sep 2022 05:00:00 GMT</pubDate>
  <media:content url="https://itsmetoeknee.netlify.app/posts/epl-xpts-simulation-1/calib.png" medium="image" type="image/png" height="108" width="144"/>
</item>
<item>
  <title>Yet Another (Advanced?) Soccer Statistic</title>
  <dc:creator>Tony ElHabr</dc:creator>
  <link>https://itsmetoeknee.netlify.app/posts/soccer-pass-network-max-cut/index.html</link>
  <description><![CDATA[ 



<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p><a href="https://www.datofutbol.cl/passing-networks-r/">Pass networks</a> are a common visualization form used to summarize a team’s behavior in a soccer match. Nodes represent average player position on passes that they are involved with, and edges represent passes between players. Most pass networks also weight node size and edge width by the total number of passes.</p>
<p><img src="https://itsmetoeknee.netlify.app/posts/soccer-pass-network-max-cut/betweentheposts-example-pass-network.jpg" class="img-fluid"></p>
<p>While pass networks provide a nice visual tool for providing insight that can (and should) be supplemented by more detailed analysis, they’re often just that—purely a visual tool. In order to gain meaning beyond just anecdotal insight (“Look at how far the wingbacks were up the field!”), practitioners may leverage graph theory concepts such as <a href="https://en.wikipedia.org/wiki/Centrality">centrality</a> to quantify relationships.<sup>1</sup></p>
<p>Inspired by the findings of Eliakim et al.&nbsp;in <a href="https://www.tandfonline.com/doi/abs/10.1080/24733938.2021.1919747">“The development of metrics for measuring the level of symmetry in team formation and ball movement flow, and their association with performance”</a>, I wanted to evaluate a graph theory concept that has not been explored in relation to soccer pass networks (except for by Eliakim et al.): <a href="https://en.wikipedia.org/wiki/Maximum_cut">maximum cuts</a>.</p>
<p>To do so, I’ll be using data from the 2017/18 - 2020/21 Premier League seasons, along with the games up through Boxing Day of the 2021/22 season. Passes and other events are only considered up through the first substitution or red card of each match.</p>
</section>
<section id="examples" class="level2">
<h2 class="anchored" data-anchor-id="examples">Examples</h2>
<section id="simple" class="level3">
<h3 class="anchored" data-anchor-id="simple">Simple</h3>
<p>What is a maximum cut? Visually, it’s an arbitrary line that you can draw through the edges of a network that maximizes the sum of the edge weights.</p>
<p><img src="https://itsmetoeknee.netlify.app/posts/soccer-pass-network-max-cut/example_max_cut.png" class="img-fluid"></p>
<p>For this example, 15 is actually a <em>weighted</em> max cut, since edges are treated differently, according to their assigned value. (An unweighted max cut would assign each edge a value of 1.)</p>
<p>On the other side of things, the min cut would be 2+4=6 for this example.</p>
</section>
<section id="in-soccer" class="level3">
<h3 class="anchored" data-anchor-id="in-soccer">In Soccer</h3>
<p>A 4-node, 5-edge network is nice for illustration, but how does this bear out in soccer?</p>
<p>To give a soccer example, Here’s the pass network and weighted max cut numbers for <a href="https://www.fotmob.com/match/3609994/matchfacts/liverpool-vs-manchester-city">the match between Liverpool and Manchester City on October 3, 2021</a>. <sup>2</sup></p>
<p><img src="https://itsmetoeknee.netlify.app/posts/soccer-pass-network-max-cut/network-game_id=1549604-max_cut_weighted_norm_w_logo.png" class="img-fluid"></p>
<p>Zooming out from a single example to all games in our data set, the distribution of weighted max cuts per 90 minutes looks relatively normal, perhaps log-normal. <em>Note: It’s important to adjust for time since not all games have the same number of minutes played due to variance in the occurrence of the first formation change.</em></p>
<p><img src="https://itsmetoeknee.netlify.app/posts/soccer-pass-network-max-cut/game_mc_hist_w_logo.png" class="img-fluid"></p>
</section>
</section>
<section id="but-is-max-cut-useful" class="level2">
<h2 class="anchored" data-anchor-id="but-is-max-cut-useful">But is Max Cut Useful?</h2>
<section id="setup" class="level3">
<h3 class="anchored" data-anchor-id="setup">Setup</h3>
<p>To quantify the impact of weighted max cuts, we’ll look at two measures of quality of play.</p>
<ol type="1">
<li><a href="https://theanalyst.com/na/2021/07/what-are-expected-goals-xg/"><strong>expected goals (xG)</strong></a>: xG tells the story of shot quality and quantity, which is massively important in a low-scoring game like soccer.</li>
<li><a href="https://karun.in/blog/expected-threat.html"><strong>expected threat (xT)</strong></a>: xT quantifies scoring opportunities more generally, looking beyond shots.</li>
</ol>
<p>I’d argue that xT is more informative for our purposes since max cut is related to passes and xT accounts for passes; xG is so tied up in shots that their relationship to passes leading up to those shots may be lost. Nonetheless, we’ll be considering both since both are commonly used for judging overall “value” in soccer.</p>
<p>We’ll be transforming these xG and xT in two manners.</p>
<ol type="1">
<li><strong>Volume-adjusting</strong>, i.e.&nbsp;taking each value per 90 minutes. The justification for adjusting max cut for time also applies here.</li>
<li><strong>Opponent-adjusting</strong>, or “differencing”, i.e.&nbsp;subtracting one side’s value from the other’s value. Sure, having a lot of touches in the opponent’s half and taking a lot of shots means scoring is more likely, but if you’re also giving up a ton of shots, then that effort is essentially negated.</li>
</ol>
<p>Given that we’ll be making our two quality-of-play stats—xG and xT—relative to the opponent, I prefer to opponent-adjust weighted max cut in the same manner. I’d argue that weighted max cut differential is more informative than just the weighted max cut of one side or the other. Suppressing your opponent’s weighted max cut is reflective of limiting their pass volume, and, consequently, makes it more likely that your weighted max cut is higher.</p>
<p>The relationship between weighted max cut and weighted max cut differential is very linear, so, ultimately, it shouldn’t matter too much if we look at opponent-adjust weighted max cut versus just raw weighted max cut.</p>
<p><img src="https://itsmetoeknee.netlify.app/posts/soccer-pass-network-max-cut/game_mc_scatter_diff_w_logo.png" class="img-fluid"></p>
<p>Differencing has the added benefit of making our distributions look more “normal”, by making them symmetric about 0. This generally is beneficial for regression analysis, which we go on to conduct.</p>
</section>
<section id="correlations" class="level3">
<h3 class="anchored" data-anchor-id="correlations">Correlations</h3>
<p>A first step in looking at the relationship between weighted max cut with xG and xT is a <a href="https://en.wikipedia.org/wiki/Correlation">correlation</a>.</p>
<p><img src="https://itsmetoeknee.netlify.app/posts/soccer-pass-network-max-cut/game_x_cors_table.png" class="img-fluid"></p>
<p>Weighted max cut compares favorably to other network stats for summarizing (pass) networks. Perhaps this isn’t too surprising; Eliakim et al.&nbsp;argue that, in relation to soccer, maximum cut surmises what is captured separately by various measures of centrality (<a href="https://en.wikipedia.org/wiki/Betweenness_centrality">betweenness</a>, <a href="https://en.wikipedia.org/wiki/Directed_graph#Indegree_and_outdegree">indegree and outdegree</a>, etc.).</p>
<p>Weighted max cut has a similar correlation to traditional pass metrics such as relative percentage of passes, but not as strong as counting stats for shots. We really shouldn’t expect any metric to have as strong a relation with xG and xT (especially xG) as shot-based metrics since these are derived from shots and their outcomes.</p>
<p>Overall, the game-level correlations are not super strong, indicating that we can’t read too much into them for individual games. The correlations are much stronger at the season-level, showing the same ordinality in magnitude of correlation.</p>
<p><img src="https://itsmetoeknee.netlify.app/posts/soccer-pass-network-max-cut/season_x_cors_table.png" class="img-fluid"></p>
<p>Observing the difference in the game-level and season-level correlations should be a good reminder that single-game stats should not be scrutinized too heavily when evaluating a team’s performance over the course of a season. The same is true for max cuts!</p>
</section>
<section id="accounting-for-confounders" class="level3">
<h3 class="anchored" data-anchor-id="accounting-for-confounders">Accounting for Confounders</h3>
<p>The correlation approach for quantifying the descriptive role of max cuts in quality of play is a bit naive. Single-variable regressions, i.e.&nbsp;correlations, overstate the impact of the “treatment” variables.</p>
<p>If we regress max cut on xG and xT with z-score normalized counts of shots and passes as <a href="https://en.wikipedia.org/wiki/Confounding">confounders</a>, we see that the influence of max cut is negated.</p>
<p><img src="https://itsmetoeknee.netlify.app/posts/soccer-pass-network-max-cut/team_stat_coefs_w_logo.png" class="img-fluid"></p>
<p>In the case of xG, the coefficient estimate for weighted max cut is offset by the coefficient for the passing term. This is due to their <a href="https://en.wikipedia.org/wiki/Collinearity">collinearity</a> (over 90%) and their lack of explanatory value in the presence of shot counts, which directly informs xG. For xT, the weighted max cut coefficient is completely suppressed, likely due to collinearity with passing.</p>
<p>Of course, we could be a little more sophisticated here, drawing out <a href="https://en.wikipedia.org/wiki/Directed_acyclic_graph">directed acyclic graphs (DAG)</a> and running a more formal <a href="https://en.wikipedia.org/wiki/Causal_inference">causal analysis</a>. But my intuition is that we would come to the same general conclusion: in the face of more traditional metrics like shot and pass counts, possibly the most robust pass-network-derived statistic—weighted max cut—provides minimal additional descriptive power for quantifying quality of play.</p>
</section>
<section id="why-havent-people-tried-this-before" class="level3">
<h3 class="anchored" data-anchor-id="why-havent-people-tried-this-before">Why Haven’t People Tried this Before?</h3>
<p>I can think of a couple of reasons why weighted max cut isn’t commonly seen in soccer literature:</p>
<ol type="1">
<li>The calculation requires an un-directed network. In our context, this requires treating passes between players as equal, regardless of who is the passer and who is the receiver. This can distort the role of a striker, who may receive much more than pass, or a keeper, who may pass much more than receive.</li>
<li>It’s difficult to visualize beyond just reporting a single number, and, thus, may not resonate with an audience.</li>
<li>It’s not super easy to calculate! In fact, <code>{igraph}</code>—the most popular R framework for network analysis—doesn’t have a function for it!</li>
</ol>
<p>For what it’s worth, the code that I wrote to calculate the weighted maximum cut for a pass network looks something like this.<sup>3</sup> (This is the calculation for the 4-node example network shown before.)</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(tibble)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(dplyr)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">library</span>(tidyr)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">library</span>(sdpt3r) <span class="do" style="color: #5E5E5E;
font-style: italic;">## Semi-Definite Quadratic Linear Programming Solver</span></span>
<span id="cb1-5"></span>
<span id="cb1-6">df <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">tibble</span>(</span>
<span id="cb1-7">  <span class="at" style="color: #657422;">from =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'a'</span>, <span class="st" style="color: #20794D;">'a'</span>, <span class="st" style="color: #20794D;">'a'</span>, <span class="st" style="color: #20794D;">'b'</span>, <span class="st" style="color: #20794D;">'b'</span>, <span class="st" style="color: #20794D;">'b'</span>, <span class="st" style="color: #20794D;">'c'</span>, <span class="st" style="color: #20794D;">'c'</span>, <span class="st" style="color: #20794D;">'c'</span>, <span class="st" style="color: #20794D;">'d'</span>, <span class="st" style="color: #20794D;">'d'</span>, <span class="st" style="color: #20794D;">'d'</span>),</span>
<span id="cb1-8">  <span class="at" style="color: #657422;">to   =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'b'</span>, <span class="st" style="color: #20794D;">'c'</span>, <span class="st" style="color: #20794D;">'d'</span>, <span class="st" style="color: #20794D;">'a'</span>, <span class="st" style="color: #20794D;">'c'</span>, <span class="st" style="color: #20794D;">'d'</span>, <span class="st" style="color: #20794D;">'a'</span>, <span class="st" style="color: #20794D;">'b'</span>, <span class="st" style="color: #20794D;">'d'</span>, <span class="st" style="color: #20794D;">'a'</span>, <span class="st" style="color: #20794D;">'b'</span>, <span class="st" style="color: #20794D;">'c'</span>),</span>
<span id="cb1-9">  <span class="at" style="color: #657422;">n    =</span> <span class="fu" style="color: #4758AB;">c</span>( 1L,  0L,  3L,  1L,  1L,  1L,  0L,  2L,  1L,  1L,  5L,  4L)</span>
<span id="cb1-10">)</span>
<span id="cb1-11"></span>
<span id="cb1-12">wide_df <span class="ot" style="color: #003B4F;">&lt;-</span> df <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb1-13">  <span class="fu" style="color: #4758AB;">pivot_wider</span>(</span>
<span id="cb1-14">    <span class="at" style="color: #657422;">names_from =</span> to,</span>
<span id="cb1-15">    <span class="at" style="color: #657422;">values_from =</span> n,</span>
<span id="cb1-16">    <span class="at" style="color: #657422;">values_fill =</span> 0L</span>
<span id="cb1-17">  ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb1-18">  <span class="fu" style="color: #4758AB;">select</span>(from, a, b, c, d) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb1-19">  <span class="fu" style="color: #4758AB;">arrange</span>(from) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb1-20">  <span class="fu" style="color: #4758AB;">select</span>(<span class="sc" style="color: #5E5E5E;">-</span>from)</span>
<span id="cb1-21">wide_df</span>
<span id="cb1-22"><span class="co" style="color: #5E5E5E;">#&gt; # A tibble: 4 x 4</span></span>
<span id="cb1-23"><span class="co" style="color: #5E5E5E;">#&gt;       a     b     c     d</span></span>
<span id="cb1-24"><span class="co" style="color: #5E5E5E;">#&gt;   &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;</span></span>
<span id="cb1-25"><span class="co" style="color: #5E5E5E;">#&gt; 1     0     1     0     3</span></span>
<span id="cb1-26"><span class="co" style="color: #5E5E5E;">#&gt; 2     1     0     1     1</span></span>
<span id="cb1-27"><span class="co" style="color: #5E5E5E;">#&gt; 3     0     2     0     1</span></span>
<span id="cb1-28"><span class="co" style="color: #5E5E5E;">#&gt; 4     1     5     4     0</span></span>
<span id="cb1-29"></span>
<span id="cb1-30">m <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">as.matrix</span>(wide_df)</span>
<span id="cb1-31">symmetric_m <span class="ot" style="color: #003B4F;">&lt;-</span> m <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">t</span>(m) <span class="do" style="color: #5E5E5E;
font-style: italic;">## must be symmetric</span></span>
<span id="cb1-32">mc <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">maxcut</span>(symmetric_m)</span>
<span id="cb1-33">max_cut <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="sc" style="color: #5E5E5E;">-</span><span class="fu" style="color: #4758AB;">round</span>(mc<span class="sc" style="color: #5E5E5E;">$</span>pobj, <span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb1-34">max_cut</span>
<span id="cb1-35"><span class="co" style="color: #5E5E5E;">#&gt; [1] 15</span></span></code></pre></div>
</details>
</div>
<p>Or, perhaps, people have actually evaluated max cut for pass networks, but have found the same non-significant result that I have found, and have simply opted not to write about it. 🤷</p>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Weighted max cut can be a very informative metric for summarizing pass volume and pass network structure, as seen in a correlation analysis. It’s merit surpasses that of other summary network stats and is nearly equivalent to traditional pass-derived stats for explaining xG and xT. However, I don’t think it should supersede more traditional stats like shots and passes if purely evaluating attacking quality.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>There are other things researchers have done, such as <a href="https://karun.in/blog/interactive-passing-networks.html">subsetting the passes that make up the network based on game situation</a>, or <a href="https://statsbomb.com/2018/08/explaining-xgchain-passing-networks/">supplement the visual with meaningful color</a>↩︎</p></li>
<li id="fn2"><p>Unfortunately, max cuts can be difficult to visualize for graphs with lots of edges and/or nodes, so reporting just the quantity is often the best thing we can do. 🤷↩︎</p></li>
<li id="fn3"><p>If we wanted to do an un-weighted calculation, we would use <code>1</code> for any <code>n&gt;0</code> in the example here.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>r</category>
  <category>soccer</category>
  <guid>https://itsmetoeknee.netlify.app/posts/soccer-pass-network-max-cut/index.html</guid>
  <pubDate>Mon, 31 Jan 2022 06:00:00 GMT</pubDate>
  <media:content url="https://itsmetoeknee.netlify.app/posts/soccer-pass-network-max-cut/network-game_id=1549604-max_cut_weighted_norm_w_logo.png" medium="image" type="image/png" height="111" width="144"/>
</item>
<item>
  <title>Tired: PCA + kmeans, Wired: UMAP + GMM</title>
  <dc:creator>Tony ElHabr</dc:creator>
  <link>https://itsmetoeknee.netlify.app/posts/dimensionality-reduction-and-clustering/index.html</link>
  <description><![CDATA[ 



<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Combining <a href="https://en.wikipedia.org/wiki/Principal_component_analysis">principal component analysis (PCA)</a> and <a href="https://en.wikipedia.org/wiki/K-means_clustering">kmeans clustering</a> seems to be a pretty popular 1-2 punch in data science. While there is some debate about whether combining <a href="https://en.wikipedia.org/wiki/Dimensionality_reduction">dimensionality reduction</a> and <a href="https://en.wikipedia.org/wiki/Clustering">clustering</a> is something we should ever do<sup>1</sup>, I’m not here to debate that. I’m here to illustrate the potential advantages of upgrading your PCA + kmeans workflow to <a href="https://umap-learn.readthedocs.io/en/latest/">Uniform Manifold Approximation and Projection (UMAP)</a> + <a href="https://en.wikipedia.org/wiki/Mixture_model">Gaussian Mixture Model (GMM)</a>, as noted in <a href="https://twitter.com/TonyElHabr/status/1400149998629703681">my reply here</a>.</p>
<blockquote class="twitter-tweet blockquote">
<p lang="tl" dir="ltr">
</p><p>tired: PCA + kmeans<br>wired: UMAP + GMM</p>
<p></p>
<p>— Tony (<span class="citation" data-cites="TonyElHabr">@TonyElHabr</span>) <a href="https://twitter.com/TonyElHabr/status/1400149998629703681?ref_src=twsrc%5Etfw">June 2, 2021</a></p>
</blockquote>
<script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>For this demonstration, I’ll be using <a href="https://docs.google.com/spreadsheets/d/1lQgIDcxsHT1m_IayMldmiHVOt4ICbX-ys8Mh9rggPHM/edit?usp=sharing">this data set</a> pointed out <a href="https://twitter.com/ronanmann/status/1408504415690969089?s=21">here</a>, including over 100 stats for players from <a href="https://fbref.com/en/comps/Big5/Big-5-European-Leagues-Stats">soccer’s “Big 5” leagues</a>.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb1-2">raw_df <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">'FBRef 2020-21 T5 League Data.xlsx'</span> <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb1-3">  readxl<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">read_excel</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb1-4">  janitor<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">clean_names</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb1-5">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="fu" style="color: #4758AB;">across</span>(<span class="fu" style="color: #4758AB;">where</span>(is.double), <span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">replace_na</span>(.x, <span class="dv" style="color: #AD0000;">0</span>)))</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;"># Let's only use players with a 10 matches' worth of minutes.</span></span>
<span id="cb1-8">df <span class="ot" style="color: #003B4F;">&lt;-</span> raw_df <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">filter</span>(min <span class="sc" style="color: #5E5E5E;">&gt;</span> (<span class="dv" style="color: #AD0000;">10</span> <span class="sc" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">90</span>))</span>
<span id="cb1-9"><span class="fu" style="color: #4758AB;">dim</span>(df)</span>
<span id="cb1-10"><span class="do" style="color: #5E5E5E;
font-style: italic;">## [1] 1626  128</span></span></code></pre></div>
</details>
</div>
<p>Trying to infer something from the correlation matrix doesn’t get you very far, so one can see why dimensionality reduction will be useful.</p>
<p><img src="https://itsmetoeknee.netlify.app/posts/dimensionality-reduction-and-clustering/viz_cors.png" class="img-fluid"></p>
<p>Also, we don’t really have “labels” here (more on this later), so clustering can be useful for learning something from our data.</p>
</section>
<section id="unsupervised-evaluation" class="level2">
<h2 class="anchored" data-anchor-id="unsupervised-evaluation">Unsupervised Evaluation</h2>
<p>We’ll be feeding in the results from the dimensionality reduction—either PCA or UMAP—to a clustering method—either kmeans or GMM. So, since clustering comes last, all we need to do is figure out how to judge the clustering; this will tell us something about how “good” the combination of dimensionality reduction and clustering is overall.</p>
<p>I’ll save you from google-ing and just tell you that <a href="https://en.wikipedia.org/wiki/Total_sum_of_squares">within-cluster sum of squares (WSS)</a> is typically used for kmeans, and <a href="https://en.wikipedia.org/wiki/Bayesian_information_criterion">Bayesian Information Criteria (BIC)</a> is the go-to metric for GMM. WSS and BIC are not on the same scale, so we can’t directly compare kmeans and GMM at this point. Nonetheless, we can experiment with different numbers of components—the one major <a href="https://en.wikipedia.org/wiki/Hyperparameter_(machine_learning)">“hyperparameter”</a> for dimensionality reduction—prior to the clustering to identify if more or less components is “better”, given the clustering method. Oh, and why not also vary the number of clusters—the one notable hyperparameter for clustering—while we’re at it?</p>
<p><img src="https://itsmetoeknee.netlify.app/posts/dimensionality-reduction-and-clustering/viz_kmeans_wss.png" class="img-fluid"></p>
<p>For kmeans, we see that WSS decreases with increasing number of clusters, which is typically what we see in <a href="https://en.wikipedia.org/wiki/Elbow_method_(clustering)">“elbow” plots</a> like this. Additionally, we see that WSS decreases with increasing number of components. This makes sense—additional components means more data is accounted for.<sup>2</sup> There is definitely a point of “diminishing returns”, somewhere around 3 clusters, after which WSS barely improves.<sup>3</sup> Overall, we observe that the kmeans models using UMAP pre-processing do better, compared to those using PCA.</p>
<p>Moving on to GMM, we observe that BIC generally increases with the number of clusters as well. (Note that, due to the way <a href="https://stats.stackexchange.com/questions/237220/mclust-model-selection">the <code>{mclust}</code> package defines its objective function, higher BIC is “better”</a>.)</p>
<p><img src="https://itsmetoeknee.netlify.app/posts/dimensionality-reduction-and-clustering/viz_gmm_bic.png" class="img-fluid"></p>
<p>Regarding number of components, we see that the GMM models using more UMAP components do better, as we should have expected. On the other hand, we observe that GMM models using less PCA components do better than those with more components. This is a bit of an odd finding that I don’t have a great explanation for. (Someone please math-splain to me.) Nonetheless, we see that UMAP does better than PCA overall, as we observed with kmeans.</p>
<p>For those interested in the code, I <code>map</code>-ed a function across a grid of parameters to generate the data for these plots.<sup>4</sup></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">do_dimr_clust <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(df, n, k, dimr, clust, ...) {</span>
<span id="cb2-2">  step_f <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">switch</span>(dimr, <span class="st" style="color: #20794D;">'pca'</span> <span class="ot" style="color: #003B4F;">=</span> recipes<span class="sc" style="color: #5E5E5E;">::</span>step_pca, <span class="st" style="color: #20794D;">'umap'</span> <span class="ot" style="color: #003B4F;">=</span> embed<span class="sc" style="color: #5E5E5E;">::</span>step_umap)</span>
<span id="cb2-3">  fit_f <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">switch</span>(clust, <span class="st" style="color: #20794D;">'kmeans'</span> <span class="ot" style="color: #003B4F;">=</span> stats<span class="sc" style="color: #5E5E5E;">::</span>kmeans, <span class="st" style="color: #20794D;">'gmm'</span> <span class="ot" style="color: #003B4F;">=</span> mclust<span class="sc" style="color: #5E5E5E;">::</span>Mclust)</span>
<span id="cb2-4">  </span>
<span id="cb2-5">  d <span class="ot" style="color: #003B4F;">&lt;-</span> recipes<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">recipe</span>(<span class="fu" style="color: #4758AB;">formula</span>( <span class="sc" style="color: #5E5E5E;">~</span> .), <span class="at" style="color: #657422;">data =</span> df) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb2-6">    recipes<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">step_normalize</span>(recipes<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">all_numeric_predictors</span>()) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb2-7">    <span class="fu" style="color: #4758AB;">step_f</span>(recipes<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">all_numeric_predictors</span>(), <span class="at" style="color: #657422;">num_comp =</span> n) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb2-8">    recipes<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">prep</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb2-9">    recipes<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">juice</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb2-10">    <span class="fu" style="color: #4758AB;">select</span>(<span class="fu" style="color: #4758AB;">where</span>(is.numeric))</span>
<span id="cb2-11">  fit <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">fit_f</span>(d, k, ...)</span>
<span id="cb2-12">  broom<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">glance</span>(fit)</span>
<span id="cb2-13">}</span>
<span id="cb2-14"></span>
<span id="cb2-15">metrics <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">crossing</span>(</span>
<span id="cb2-16">  <span class="at" style="color: #657422;">n =</span> <span class="fu" style="color: #4758AB;">seq.int</span>(<span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">8</span>),</span>
<span id="cb2-17">  <span class="at" style="color: #657422;">k =</span> <span class="fu" style="color: #4758AB;">seq.int</span>(<span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">8</span>),</span>
<span id="cb2-18">  <span class="at" style="color: #657422;">f_dimr =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'pca'</span>, <span class="st" style="color: #20794D;">'umap'</span>),</span>
<span id="cb2-19">  <span class="at" style="color: #657422;">f_clust =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'kmeans'</span>, <span class="st" style="color: #20794D;">'mclust'</span>)</span>
<span id="cb2-20">) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb2-21">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">metrics =</span> <span class="fu" style="color: #4758AB;">pmap</span>(</span>
<span id="cb2-22">    <span class="fu" style="color: #4758AB;">list</span>(n, k, f_dimr, f_clust),</span>
<span id="cb2-23">    <span class="sc" style="color: #5E5E5E;">~</span> <span class="fu" style="color: #4758AB;">do_dimr_clust</span>(</span>
<span id="cb2-24">      <span class="at" style="color: #657422;">df =</span> df,</span>
<span id="cb2-25">      <span class="at" style="color: #657422;">n =</span> ..<span class="dv" style="color: #AD0000;">1</span>,</span>
<span id="cb2-26">      <span class="at" style="color: #657422;">k =</span> ..<span class="dv" style="color: #AD0000;">2</span>,</span>
<span id="cb2-27">      <span class="at" style="color: #657422;">f_dimr =</span> ..<span class="dv" style="color: #AD0000;">3</span>,</span>
<span id="cb2-28">      <span class="at" style="color: #657422;">f_clust =</span> ..<span class="dv" style="color: #AD0000;">4</span></span>
<span id="cb2-29">    )</span>
<span id="cb2-30">  ))</span>
<span id="cb2-31">metrics</span>
<span id="cb2-32"><span class="co" style="color: #5E5E5E;">#&gt; # A tibble: 196 x 5</span></span>
<span id="cb2-33"><span class="co" style="color: #5E5E5E;">#&gt;        n     k f     g      metrics         </span></span>
<span id="cb2-34"><span class="co" style="color: #5E5E5E;">#&gt;    &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt;  &lt;list&gt;          </span></span>
<span id="cb2-35"><span class="co" style="color: #5E5E5E;">#&gt;  1     2     2 pca   kmeans &lt;tibble [1 x 4]&gt;</span></span>
<span id="cb2-36"><span class="co" style="color: #5E5E5E;">#&gt;  2     2     2 pca   gmm    &lt;tibble [1 x 7]&gt;</span></span>
<span id="cb2-37"><span class="co" style="color: #5E5E5E;">#&gt;  3     2     2 umap  kmeans &lt;tibble [1 x 4]&gt;</span></span>
<span id="cb2-38"><span class="co" style="color: #5E5E5E;">#&gt;  4     2     2 umap  gmm    &lt;tibble [1 x 7]&gt;</span></span>
<span id="cb2-39"><span class="co" style="color: #5E5E5E;">#&gt;  5     2     3 pca   kmeans &lt;tibble [1 x 4]&gt;</span></span>
<span id="cb2-40"><span class="co" style="color: #5E5E5E;">#&gt;  6     2     3 pca   gmm    &lt;tibble [1 x 7]&gt;</span></span>
<span id="cb2-41"><span class="co" style="color: #5E5E5E;">#&gt;  7     2     3 umap  kmeans &lt;tibble [1 x 4]&gt;</span></span>
<span id="cb2-42"><span class="co" style="color: #5E5E5E;">#&gt;  8     2     3 umap  gmm    &lt;tibble [1 x 7]&gt;</span></span>
<span id="cb2-43"><span class="co" style="color: #5E5E5E;">#&gt;  9     2     4 pca   kmeans &lt;tibble [1 x 4]&gt;</span></span>
<span id="cb2-44"><span class="co" style="color: #5E5E5E;">#&gt; 10     2     4 pca   gmm    &lt;tibble [1 x 7]&gt;</span></span>
<span id="cb2-45"><span class="co" style="color: #5E5E5E;">#&gt; # ... with 186 more rows</span></span></code></pre></div>
</details>
</div>
</section>
<section id="supervised-evaluation" class="level2">
<h2 class="anchored" data-anchor-id="supervised-evaluation">“Supervised” Evaluation</h2>
<p>We actually do have something that we can use to help us identify clusters—player position (<code>pos</code>). Let’s treat these position groups as pseudo-labels with which we can gauge the effectiveness of the clustering.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">df <span class="ot" style="color: #003B4F;">&lt;-</span> df <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-2">  <span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb3-3">    <span class="fu" style="color: #4758AB;">across</span>(</span>
<span id="cb3-4">      pos,</span>
<span id="cb3-5">      <span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">case_when</span>(</span>
<span id="cb3-6">        .x <span class="sc" style="color: #5E5E5E;">%in%</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'DF,MF'</span>, <span class="st" style="color: #20794D;">'MF,DF'</span>) <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">'DM'</span>,</span>
<span id="cb3-7">        .x <span class="sc" style="color: #5E5E5E;">%in%</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'DF,FW'</span>, <span class="st" style="color: #20794D;">'FW,DF'</span>) <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">'M'</span>,</span>
<span id="cb3-8">        .x <span class="sc" style="color: #5E5E5E;">%in%</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'MF,FW'</span>, <span class="st" style="color: #20794D;">'FW,MF'</span>) <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">'AM'</span>,</span>
<span id="cb3-9">        .x <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'DF'</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">'D'</span>,</span>
<span id="cb3-10">        .x <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'MF'</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">'M'</span>,</span>
<span id="cb3-11">        .x <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'FW'</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">'F'</span>,</span>
<span id="cb3-12">        .x <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'GK'</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">'G'</span>,</span>
<span id="cb3-13">        .x <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'GK,MF'</span> <span class="sc" style="color: #5E5E5E;">~</span> <span class="st" style="color: #20794D;">'G'</span>,</span>
<span id="cb3-14">        <span class="cn" style="color: #8f5902;">TRUE</span> <span class="sc" style="color: #5E5E5E;">~</span> .x</span>
<span id="cb3-15">      )</span>
<span id="cb3-16">    )</span>
<span id="cb3-17">  )</span>
<span id="cb3-18">df <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">count</span>(pos, <span class="at" style="color: #657422;">sort =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb3-19"><span class="co" style="color: #5E5E5E;">#&gt; # A tibble: 6 x 2</span></span>
<span id="cb3-20"><span class="co" style="color: #5E5E5E;">#&gt;   pos       n</span></span>
<span id="cb3-21"><span class="co" style="color: #5E5E5E;">#&gt;   &lt;chr&gt; &lt;int&gt;</span></span>
<span id="cb3-22"><span class="co" style="color: #5E5E5E;">#&gt; 1 D       595</span></span>
<span id="cb3-23"><span class="co" style="color: #5E5E5E;">#&gt; 2 M       364</span></span>
<span id="cb3-24"><span class="co" style="color: #5E5E5E;">#&gt; 3 AM      273</span></span>
<span id="cb3-25"><span class="co" style="color: #5E5E5E;">#&gt; 4 F       196</span></span>
<span id="cb3-26"><span class="co" style="color: #5E5E5E;">#&gt; 5 G       113</span></span>
<span id="cb3-27"><span class="co" style="color: #5E5E5E;">#&gt; 6 DM       85</span></span></code></pre></div>
</details>
</div>
<p>Typically we don’t have labels for clustering tasks; if we do, we’re usually doing some kind of supervised multi-label classification. But our labels aren’t “true” labels in this case, both because:</p>
<ol type="1">
<li>a player’s nominal position often doesn’t completely describe their style of play, and</li>
<li>the grouping I did to reduce the number of positions from 11 to 6 was perhaps not optimal.</li>
</ol>
<p>So now let’s do the same as before—evaluate different combinations of PCA and UMAP with kmeans and GMM. But now we can use some supervised evaluation metrics: (1) <a href="https://en.wikipedia.org/wiki/Accuracy_and_precision">accuracy</a> and (2) mean <a href="https://en.wikipedia.org/wiki/Cross_entropy">log loss</a>. While the former is based on the “hard” predictions, the latter is based on probabilities for each class. kmeans returns just hard cluster assignments, so computing accuracy is straightforward; since it doesn’t return probabilities, we’ll treat the hard assignments as having a probability of 1 to compute log loss.<sup>5</sup></p>
<p>We can compare the two clustering methods more directly now using these two metrics. Since we know that there are 6 position groups, we’ll keep the number of clusters constant at 6. (Note that number of <strong>clusters</strong> was shown on the x-axis before; but since we have fixed number of components at 6, now we show the number of <strong>components</strong> on the x-axis.)</p>
<p>Looking at accuracy first, we see that the best combo depends on our choice for number of components. Overall, we might say that the UMAP combos are better.</p>
<p><img src="https://itsmetoeknee.netlify.app/posts/dimensionality-reduction-and-clustering/viz_acc.png" class="img-fluid"></p>
<p>Next, looking at average log loss, we see that the GMM clustering methods seem to do better overall (although this may be due to the fact that log loss is not typically used for supervised kmeans). The PCA + GMM does the best across all number of components, with the exception of 7. Note that we get a mean log loss around 28 when we predict the majority class (defender) with a probability of 1 for all observations. (This is a good “baseline” to contextualize our numbers.)</p>
<p><img src="https://itsmetoeknee.netlify.app/posts/dimensionality-reduction-and-clustering/viz_ll.png" class="img-fluid"></p>
<p>UMAP shines relative to PCA according to accuracy, and GMM beats out kmeans in terms of log loss. Despite these conclusions, we still don’t have clear evidence that UMAP + GMM is the best 1-2 combo; nonetheless, we can at least feel good about its general strength.</p>
<section id="aside-re-coding-clusters" class="level3">
<h3 class="anchored" data-anchor-id="aside-re-coding-clusters">Aside: Re-coding Clusters</h3>
<p>I won’t bother to show all the code to generate the above plots since it’s mostly just <code>broom::augmment()</code> and <code>{ggplot2}</code>. But, if you have ever worked with supervised stuff like this (if we can call it that), you’ll know that figuring out which of your clusters correspond to your known groups can be difficult. In this case, I started from a variable holding the predicted <code>.class</code> and the true class (<code>pos</code>).</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">assignments</span>
<span id="cb4-2"><span class="co" style="color: #5E5E5E;">#&gt; # A tibble: 1,626 x 2</span></span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;">#&gt;    .class pos  </span></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;">#&gt;     &lt;int&gt; &lt;chr&gt;</span></span>
<span id="cb4-5"><span class="co" style="color: #5E5E5E;">#&gt;  1      1 D    </span></span>
<span id="cb4-6"><span class="co" style="color: #5E5E5E;">#&gt;  2      2 D    </span></span>
<span id="cb4-7"><span class="co" style="color: #5E5E5E;">#&gt;  3      3 M    </span></span>
<span id="cb4-8"><span class="co" style="color: #5E5E5E;">#&gt;  4      3 M    </span></span>
<span id="cb4-9"><span class="co" style="color: #5E5E5E;">#&gt;  5      4 AM   </span></span>
<span id="cb4-10"><span class="co" style="color: #5E5E5E;">#&gt;  6      2 D    </span></span>
<span id="cb4-11"><span class="co" style="color: #5E5E5E;">#&gt;  7      2 D    </span></span>
<span id="cb4-12"><span class="co" style="color: #5E5E5E;">#&gt;  8      4 F    </span></span>
<span id="cb4-13"><span class="co" style="color: #5E5E5E;">#&gt;  9      2 D    </span></span>
<span id="cb4-14"><span class="co" style="color: #5E5E5E;">#&gt; 10      1 D    </span></span>
<span id="cb4-15"><span class="co" style="color: #5E5E5E;">#&gt; # ... with 1,616 more rows</span></span></code></pre></div>
</details>
</div>
<p>I generated a correlation matrix for these two columns, ready to pass into a matching procedure.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">assignments <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-2">  fastDummies<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">dummy_cols</span>(<span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'.class'</span>, <span class="st" style="color: #20794D;">'pos'</span>), <span class="at" style="color: #657422;">remove_selected_columns =</span> <span class="cn" style="color: #8f5902;">TRUE</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-3">  corrr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">correlate</span>(<span class="at" style="color: #657422;">method =</span> <span class="st" style="color: #20794D;">'spearman'</span>, <span class="at" style="color: #657422;">quiet =</span> <span class="cn" style="color: #8f5902;">TRUE</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-4">  <span class="fu" style="color: #4758AB;">filter</span>(term <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">str_detect</span>(<span class="st" style="color: #20794D;">'pos'</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-5">  <span class="fu" style="color: #4758AB;">select</span>(term, <span class="fu" style="color: #4758AB;">matches</span>(<span class="st" style="color: #20794D;">'^[.]class'</span>))</span>
<span id="cb5-6"><span class="co" style="color: #5E5E5E;">#&gt; # A tibble: 6 x 7</span></span>
<span id="cb5-7"><span class="co" style="color: #5E5E5E;">#&gt;   term   .class_1 .class_2 .class_3 .class_4 .class_5 .class_6</span></span>
<span id="cb5-8"><span class="co" style="color: #5E5E5E;">#&gt;   &lt;chr&gt;     &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;</span></span>
<span id="cb5-9"><span class="co" style="color: #5E5E5E;">#&gt; 1 pos_AM  -0.208   -0.241   -0.178    0.0251   0.625   -0.123 </span></span>
<span id="cb5-10"><span class="co" style="color: #5E5E5E;">#&gt; 2 pos_D    0.499    0.615   -0.335   -0.264   -0.428   -0.208 </span></span>
<span id="cb5-11"><span class="co" style="color: #5E5E5E;">#&gt; 3 pos_DM   0.0797   0.0330   0.0548  -0.0829  -0.0519  -0.0642</span></span>
<span id="cb5-12"><span class="co" style="color: #5E5E5E;">#&gt; 4 pos_F   -0.171   -0.199   -0.168    0.724    0.0232  -0.101 </span></span>
<span id="cb5-13"><span class="co" style="color: #5E5E5E;">#&gt; 5 pos_G   -0.127   -0.147   -0.124   -0.0964  -0.157    1     </span></span>
<span id="cb5-14"><span class="co" style="color: #5E5E5E;">#&gt; 6 pos_M   -0.222   -0.267    0.724   -0.180    0.0395  -0.147</span></span></code></pre></div>
</details>
</div>
<p>Then I used <code>clue::solve_LSAP()</code> to do the <a href="https://en.wikipedia.org/wiki/Hungarian_algorithm">bipartite matching magic</a>. The rest is just pre- and post-processing.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">k <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">6</span> <span class="co" style="color: #5E5E5E;"># number of clusters</span></span>
<span id="cb6-2">cols_idx <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">2</span><span class="sc" style="color: #5E5E5E;">:</span>(k<span class="sc" style="color: #5E5E5E;">+</span><span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb6-3">cors_mat <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">as.matrix</span>(cors[,cols_idx]) <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span> <span class="co" style="color: #5E5E5E;"># all values have to be positive</span></span>
<span id="cb6-4"><span class="fu" style="color: #4758AB;">rownames</span>(cors_mat) <span class="ot" style="color: #003B4F;">&lt;-</span> cors<span class="sc" style="color: #5E5E5E;">$</span>term</span>
<span id="cb6-5">cols <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">names</span>(cors)[cols_idx]</span>
<span id="cb6-6"><span class="fu" style="color: #4758AB;">colnames</span>(cors_mat) <span class="ot" style="color: #003B4F;">&lt;-</span> cols</span>
<span id="cb6-7">cols_idx_min <span class="ot" style="color: #003B4F;">&lt;-</span> clue<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">solve_LSAP</span>(cors_mat, <span class="at" style="color: #657422;">maximum =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb6-8">cols_min <span class="ot" style="color: #003B4F;">&lt;-</span> cols[cols_idx_min]</span>
<span id="cb6-9">tibble<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">tibble</span>(</span>
<span id="cb6-10">  <span class="at" style="color: #657422;">.class =</span> cols_min <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">str_remove</span>(<span class="st" style="color: #20794D;">'^[.]class_'</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">as.integer</span>(),</span>
<span id="cb6-11">  <span class="at" style="color: #657422;">pos =</span> cors<span class="sc" style="color: #5E5E5E;">$</span>term <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">str_remove</span>(<span class="st" style="color: #20794D;">'pos_'</span>)</span>
<span id="cb6-12">)</span>
<span id="cb6-13"><span class="co" style="color: #5E5E5E;">#&gt; # A tibble: 6 x 2</span></span>
<span id="cb6-14"><span class="co" style="color: #5E5E5E;">#&gt;   .class pos  </span></span>
<span id="cb6-15"><span class="co" style="color: #5E5E5E;">#&gt;    &lt;int&gt; &lt;chr&gt;</span></span>
<span id="cb6-16"><span class="co" style="color: #5E5E5E;">#&gt; 1      5 AM   </span></span>
<span id="cb6-17"><span class="co" style="color: #5E5E5E;">#&gt; 2      2 D    </span></span>
<span id="cb6-18"><span class="co" style="color: #5E5E5E;">#&gt; 3      1 DM   </span></span>
<span id="cb6-19"><span class="co" style="color: #5E5E5E;">#&gt; 4      4 F    </span></span>
<span id="cb6-20"><span class="co" style="color: #5E5E5E;">#&gt; 5      6 G    </span></span>
<span id="cb6-21"><span class="co" style="color: #5E5E5E;">#&gt; 6      3 M </span></span></code></pre></div>
</details>
</div>
<p>This <code>pairs</code> variable can be used to re-code the <code>.class</code> column in our <code>assignments</code> from before.</p>
</section>
</section>
<section id="case-study-pca-vs.-umap" class="level2">
<h2 class="anchored" data-anchor-id="case-study-pca-vs.-umap">Case Study: PCA vs.&nbsp;UMAP</h2>
<p>Let’s step back from the clustering techniques and focus on dimensionality reduction for a moment. One of the ways that dimensionality reduction can be leveraged in sports like soccer is for player similarity metrics.<sup>6</sup> Let’s take a look at how this can be done, comparing the PCA and UMAP results while we’re at it.</p>
<p>Direct comparison of the similarity “scores” we’ll compute—based on Euclidean distance between a chosen player’s components and other players’ components—is not wise given the different ranges of our PCA and UMAP components, so we’ll rely on rankings based on these scores.<sup>7</sup> Additionally, <a href="https://fbref.com/">fbref</a> provides a “baseline” that we can use to judge our similarity rankings.<sup>8</sup></p>
<p>We’ll start with <a href="https://fbref.com/en/players/dbf053da/Jadon-Sancho">Jadon Sancho</a>, a highly discussed player at the moment (as a potential transfer).</p>
<span style="max-width:100%; height:auto"><img src="https://itsmetoeknee.netlify.app/posts/dimensionality-reduction-and-clustering/jadon-sancho-fbref.PNG"></span>
<p>We first need to set up our data into the following format. (This is for 2-component, 6-cluster UMAP + GMM.)</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">sims_int</span>
<span id="cb7-2"><span class="co" style="color: #5E5E5E;">#&gt; # A tibble: 1,664 x 6</span></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;">#&gt;    player_1     player_2           comp_1 comp_2 value_1 value_2</span></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;">#&gt;    &lt;chr&gt;        &lt;chr&gt;               &lt;int&gt;  &lt;int&gt;   &lt;dbl&gt;   &lt;dbl&gt;</span></span>
<span id="cb7-5"><span class="co" style="color: #5E5E5E;">#&gt;  1 Jadon Sancho Aaron Leya Iseka        1      1  -4.18  -5.14  </span></span>
<span id="cb7-6"><span class="co" style="color: #5E5E5E;">#&gt;  2 Jadon Sancho Aaron Leya Iseka        2      2  -0.678  2.49  </span></span>
<span id="cb7-7"><span class="co" style="color: #5E5E5E;">#&gt;  3 Jadon Sancho Aaron Ramsey            1      1  -4.18  -3.25  </span></span>
<span id="cb7-8"><span class="co" style="color: #5E5E5E;">#&gt;  4 Jadon Sancho Aaron Ramsey            2      2  -0.678 -0.738 </span></span>
<span id="cb7-9"><span class="co" style="color: #5E5E5E;">#&gt;  5 Jadon Sancho Abdoul Kader Bamba      1      1  -4.18  -3.40  </span></span>
<span id="cb7-10"><span class="co" style="color: #5E5E5E;">#&gt;  6 Jadon Sancho Abdoul Kader Bamba      2      2  -0.678  0.0929</span></span>
<span id="cb7-11"><span class="co" style="color: #5E5E5E;">#&gt;  7 Jadon Sancho Abdoulaye Doucouré      1      1  -4.18  -1.36  </span></span>
<span id="cb7-12"><span class="co" style="color: #5E5E5E;">#&gt;  8 Jadon Sancho Abdoulaye Doucouré      2      2  -0.678 -2.66  </span></span>
<span id="cb7-13"><span class="co" style="color: #5E5E5E;">#&gt;  9 Jadon Sancho Abdoulaye Touré         1      1  -4.18  -1.36  </span></span>
<span id="cb7-14"><span class="co" style="color: #5E5E5E;">#&gt; 10 Jadon Sancho Abdoulaye Touré         2      2  -0.678 -2.89  </span></span>
<span id="cb7-15"><span class="co" style="color: #5E5E5E;">#&gt; # ... with 1,654 more rows</span></span></code></pre></div>
</details>
</div>
<p>Then the Euclidean distance calculation is fairly straightforward.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">sims_init <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-2">  <span class="fu" style="color: #4758AB;">group_by</span>(player_1, player_2) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-3">  <span class="fu" style="color: #4758AB;">summarize</span>(</span>
<span id="cb8-4">    <span class="at" style="color: #657422;">d =</span> <span class="fu" style="color: #4758AB;">sqrt</span>(<span class="fu" style="color: #4758AB;">sum</span>((value_1 <span class="sc" style="color: #5E5E5E;">-</span> value_2)<span class="sc" style="color: #5E5E5E;">^</span><span class="dv" style="color: #AD0000;">2</span>))</span>
<span id="cb8-5">  ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-6">  <span class="fu" style="color: #4758AB;">ungroup</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-7">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">score =</span> <span class="dv" style="color: #AD0000;">1</span> <span class="sc" style="color: #5E5E5E;">-</span> ((d <span class="sc" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">0</span>) <span class="sc" style="color: #5E5E5E;">/</span> (<span class="fu" style="color: #4758AB;">max</span>(d) <span class="sc" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">0</span>))) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-8">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">rnk =</span> <span class="fu" style="color: #4758AB;">row_number</span>(<span class="fu" style="color: #4758AB;">desc</span>(score))) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-9">  <span class="fu" style="color: #4758AB;">arrange</span>(rnk) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-10">  <span class="fu" style="color: #4758AB;">select</span>(<span class="at" style="color: #657422;">player =</span> player_2, d, score, rnk)</span>
<span id="cb8-11"><span class="co" style="color: #5E5E5E;">#&gt; # A tibble: 830 x 4</span></span>
<span id="cb8-12"><span class="co" style="color: #5E5E5E;">#&gt;    player                  d score   rnk</span></span>
<span id="cb8-13"><span class="co" style="color: #5E5E5E;">#&gt;    &lt;chr&gt;               &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt;</span></span>
<span id="cb8-14"><span class="co" style="color: #5E5E5E;">#&gt;  1 Alexis Sánchez     0.0581 0.994     1</span></span>
<span id="cb8-15"><span class="co" style="color: #5E5E5E;">#&gt;  2 Riyad Mahrez       0.120  0.988     2</span></span>
<span id="cb8-16"><span class="co" style="color: #5E5E5E;">#&gt;  3 Serge Gnabry       0.132  0.986     3</span></span>
<span id="cb8-17"><span class="co" style="color: #5E5E5E;">#&gt;  4 Jack Grealish      0.137  0.986     4</span></span>
<span id="cb8-18"><span class="co" style="color: #5E5E5E;">#&gt;  5 Pablo Sarabia      0.171  0.983     5</span></span>
<span id="cb8-19"><span class="co" style="color: #5E5E5E;">#&gt;  6 Thomas Müller      0.214  0.978     6</span></span>
<span id="cb8-20"><span class="co" style="color: #5E5E5E;">#&gt;  7 Leroy Sané         0.223  0.977     7</span></span>
<span id="cb8-21"><span class="co" style="color: #5E5E5E;">#&gt;  8 Callum Hudson-Odoi 0.226  0.977     8</span></span>
<span id="cb8-22"><span class="co" style="color: #5E5E5E;">#&gt;  9 Jesse Lingard      0.260  0.973     9</span></span>
<span id="cb8-23"><span class="co" style="color: #5E5E5E;">#&gt; 10 Ousmane Dembélé    0.263  0.973    10</span></span>
<span id="cb8-24"><span class="co" style="color: #5E5E5E;">#&gt; # ... with 820 more rows</span></span></code></pre></div>
</details>
</div>
<p>Doing the same for PCA and combining all results, we get the following set of rankings.</p>
<span style="max-width:80%; height:auto"><img src="https://itsmetoeknee.netlify.app/posts/dimensionality-reduction-and-clustering/gt_similarity_jadon_sancho.png"></span>
<p>We see that the UMAP rankings are “closer” overall to the fbref rankings. Of course, there are some caveats:</p>
<ol type="1">
<li>This is just one player.</li>
<li>This is with a specific number of components and clusters.</li>
<li>We are comparing to similarity rankings based on a separate methodology.</li>
</ol>
<p>Our observation here (that UMAP &gt; PCA) shouldn’t be taken out of context to conclude that UMAP &gt; PCA in all contexts. Nonetheless, I think this is an interesting use case for dimensionality reduction, where one can justify PCA, UMAP, or any other similar technique, depending on how intuitive the results are.</p>
</section>
<section id="case-study-umap-gmm" class="level2">
<h2 class="anchored" data-anchor-id="case-study-umap-gmm">Case Study: UMAP + GMM</h2>
<p>Finally, let’s bring clustering back into the conversation. We’re going to focus on how the heralded UMAP + GMM combo can be visualized to provide insight that supports (or debunks) our prior understanding.</p>
<p>With a 2-component UMAP + 6-cluster GMM, we can see how the 6 position groups can be identified in a 2-D space.</p>
<p><img src="https://itsmetoeknee.netlify.app/posts/dimensionality-reduction-and-clustering/viz_uncertainty_umap_full.png" class="img-fluid"></p>
<p>For those curious, using PCA instead of UMAP also leads to an identifiable set of clusters. However, uncertainties are generally higher across the board (larger point sizes, more overlap between covariance ellipsoids).</p>
<p><img src="https://itsmetoeknee.netlify.app/posts/dimensionality-reduction-and-clustering/viz_uncertainty_pca_full.png" class="img-fluid"></p>
<p>If we exclude keepers (G) and defenders (D) to focus on the other 4 positions with our UMAP + GMM approach, we can better see how some individual points —at the edges or outside of covariance ellipsoids—are classified with a higher degree of uncertainty.<sup>9</sup></p>
<p><img src="https://itsmetoeknee.netlify.app/posts/dimensionality-reduction-and-clustering/viz_uncertainty_umap_filt.png" class="img-fluid"></p>
<p>Now, highlighting incorrect classifications, we can see how the defensive midfielder (DM) position group (upper left) seems to be a blind spot in our approach.</p>
<p><img src="https://itsmetoeknee.netlify.app/posts/dimensionality-reduction-and-clustering/viz_misclassified_umap.png" class="img-fluid"></p>
<p>A more traditional confusion matrix<sup>10</sup> also illustrates the inaccuracy with classifying DMs. (Note the lack of dark grey fill in the DM column.)</p>
<p><img src="https://itsmetoeknee.netlify.app/posts/dimensionality-reduction-and-clustering/viz_cm_umap.png" class="img-fluid"></p>
<p>DMs are often classified as defenders instead. I think this poor result has is more so due to my lazy grouping of players with <code>"MF,DF"</code> or <code>"DF,MF"</code> positions in the original data set than a fault in our approach.</p>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>So, should our overall conclusion be that we should never use PCA or kmeans? No, not necessarily. They can both be much faster to compute than UMAP and GMMs respectively, which can be a huge positive if computation is a concern. PCA is linear while UMAP is not, so you may want to choose PCA to make it easier to explain to your friends. Regarding clustering, kmeans is technically a specific form of a GMM, so if you want to sound cool to your friends and tell them that you use GMMs, you can do that.</p>
<p>Anyways, I hope I’ve shown why you should try out UMAP and GMM the next time you think about using PCA and kmeans.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>In some contexts you may want to do feature selection and/or manual grouping of data.↩︎</p></li>
<li id="fn2"><p>While this whole thing is more about comparing techniques, I should make a note about WSS. We don’t want to increase the number of components for the sake of minimizing WSS. We lose some degree of interpretation with increasing components. Additionally, we could be <a href="https://en.wikipedia.org/wiki/Overfitting">overfitting</a> the model by increasing the number of components. Although we don’t have the intention of classifying new observations in this demo, it’s still good to keep overfitting in mind.↩︎</p></li>
<li id="fn3"><p>This demo isn’t really intended to be a study in how to choose the best number of clusters, but I figured I’d point this out.↩︎</p></li>
<li id="fn4"><p>I’d suggest <a href="https://juliasilge.com/blog/kmeans-employment/">this blog post from Julia Silge</a> for a better explanation of clustering with R and <a href="https://www.tidymodels.org/"><code>{tidymodels}</code></a>.↩︎</p></li>
<li id="fn5"><p>Perhaps this is against best practice, but we’ll do it here for the sake of comparison.↩︎</p></li>
<li id="fn6"><p>Normalization perhaps doesn’t help much here given the clustered nature of the reduced data.↩︎</p></li>
<li id="fn7"><p>Normalization perhaps doesn’t help much here given the clustered nature of the reduced data.↩︎</p></li>
<li id="fn8"><p>fbref uses a different methodology, so perhaps it’s unwise to compare to them.↩︎</p></li>
<li id="fn9"><p>Sure, one can argue that a player like Diogo Jota should have been classified as an attacking midfielder (AM) to begin with, in which case he might not have been misclassified here.↩︎</p></li>
<li id="fn10"><p>By the way, the <code>autoplot()</code> function for <code>yardstick::conf_mat()</code> results is awesome if you haven’t ever used it.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>r</category>
  <category>soccer</category>
  <guid>https://itsmetoeknee.netlify.app/posts/dimensionality-reduction-and-clustering/index.html</guid>
  <pubDate>Wed, 30 Jun 2021 05:00:00 GMT</pubDate>
  <media:content url="https://itsmetoeknee.netlify.app/posts/dimensionality-reduction-and-clustering/featured.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Quantifying Relative Soccer League Strength</title>
  <dc:creator>Tony ElHabr</dc:creator>
  <link>https://itsmetoeknee.netlify.app/posts/soccer-league-strength/index.html</link>
  <description><![CDATA[ 



<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Arguing about domestic league strength is something that soccer fans seems to never tire of. (<a href="https://www.goal.com/en-us/news/what-does-can-they-do-it-on-a-cold-rainy-night-in-stoke-mean/1f7alegnrwfr01i5vj34vak59k"><em>“Could Messi do it on a cold rainy night in Stoke?”</em></a>) Many of these conversations are anecdotal, leading to “hot takes” that are unfalsifiable. While we’ll probably never move away from these kinds of discussions, we can at least try to inform them with a quantitative approach.</p>
<p>Perhaps the obvious way to do so is to take match results from international tournaments (e.g.&nbsp;Champions League, Europa). But such an approach can be flawed—there’s not a large sample, and match results may not be reflective of “true” team strength (e.g.&nbsp;one team may win on xG by a large margin, but lose the game.)</p>
</section>
<section id="methodology" class="level2">
<h2 class="anchored" data-anchor-id="methodology">Methodology</h2>
<p>But what if we used an approach rooted in player performance? <a href="https://twitter.com/TonyElHabr/status/1405946557237796871">I asked myself</a> that very question and came up with the following approach. (Thanks to <a href="https://twitter.com/canzhiye">Cahnzhi Ye</a> for the data.)</p>
<ol type="1">
<li>Identify players who played in more than one league within the same season or across consecutive seasons. Calculate the difference in each player’s <a href="https://arxiv.org/pdf/1802.07127.pdf">atomic VAEP</a><sup>1</sup> per 90 minutes (VAEP/90) after changing leagues.</li>
</ol>
<p>Why VAEP? Theoretically it should capture more about in-game actions (including defense) than other stats such as <a href="https://fbref.com/en/expected-goals-model-explained/">xG</a>, which is biased in favor of attacking players. VAEP is not perfect by any means (e.g.&nbsp;it does not capture off-ball actions), but, in theory, it should be a better measure of overall performance. <sup>2</sup></p>
<p>Notably, we give up a little in interpretability in using VAEP, since it’s not directly translatable to goals. <sup>3</sup> The following table of top season-long xG totals since 2012 to contextualize the magnitudes of xG and VAEP.</p>
<p>And a scatter plot, because who doesn’t love a graph.</p>
<p><img src="https://itsmetoeknee.netlify.app/posts/soccer-league-strength/viz_xg_v_vaep.png" class="img-fluid"></p>
<ol start="2" type="1">
<li>Convert the player-level VAEP/90 differences to z-scores by position and age group.</li>
</ol>
<p>Why grouping? This is intended to account for the fact that attacking players and “peaking” players (usually age 24-30) tend to have higher VAEP/90, so their league-to-league differences have larger variation. The choice to normalize is perhaps more questionable. The mean of differences is ~0 for all groups already, but the dispersion is smaller without normalization (i.e.&nbsp;standard deviations are closer to 0). So, in this case, normalization should help the linear model capture variation.</p>
<ol start="3" type="1">
<li>Run a single regression where the response variable is the z-transformed VAEP/90 difference, and the features are indicators for leagues, where -1 indicates player departure, a +1 indicates player arrival, and all other values are 0.<sup>4</sup> <sup>5</sup></li>
</ol>
<p>For those familiar with basketball and hockey, this is similar to the set-up for <a href="https://squared2020.com/2017/09/18/deep-dive-on-regularized-adjusted-plus-minus-i-introductory-example/">an adjusted plus-minus (APM) calculation</a>. Here, each feature column is a league (instead of a player), each row represents a player (instead of a “stint”), and the response is transformed VAEP/90 (instead of net points per possession).</p>
<p>The result is a set of coefficient estimates corresponding to each league. Notably, these are all positive (even if subtracting the intercept), and the Netherlands coefficient is <code>NA</code> due to multi-collinearity in the data. <sup>6</sup></p>
<p>For hockey/basketball APM, we would say the coefficient estimate represents how much a player contributes relative to an “average” player. We might be tempted to try to interpret these coefficients directly as well. Yes, we can infer the league “power rankings” from just this singular coefficient list (Premier League as the strongest and Bundesliga 2 as the weakest), but there are some issues.</p>
<ul>
<li><p>We first need to “un-transform” this back to the VAEP/90 scale. (See next step.)</p></li>
<li><p>Note that this is not a zero-sum situation (even after un-transforming). There is no notion of a matchup between one league and another like there is in hockey/basketball with players on the ice/court. Instead, our data is more analogous to a player playing against themselves (not a set of players versus another set of players).</p></li>
<li><p>Even if this were a zero-sum type of problem and the model returned some negative coefficient estimates, it’s unclear what the intercept (or 0) even means. Does it mean “average”? If so, what is an “average” league?</p></li>
<li><p>We accounted for minutes played—the “per 90” denominator—prior to subtracting rates (difference in VAEP/90), which is different than how APM works. In APM, the minutes played is directly accounted for in the response variable (net points, divided by possessions).</p></li>
</ul>
<p>The take-away here is that we can only interpret the model coefficients on a relative basis.</p>
<ol start="4" type="1">
<li>“Un-transform” the coefficients of the regression using a “weighted-average” standard deviation and mean from the z-transformations of groups. <sup>7</sup></li>
</ol>
<p>Interpretation after this transformation can be a little tricky. The differences between a specified pair of these post-transformed coefficients represents the expected change in an “average” player’s VAEP/90 (<code>Diff. (VAEP/90)</code>) when moving between the specified leagues.</p>
<p>To interpret these differences as a percentage (so that we can “scale” the properly for a player with a VAEP/90 of 1.5, compared to a player with a lower VAEP/90 rate), we use the median VAEP/90 across all leagues as a “baseline”. For example, for Bundesliga -&gt; Premier League, since the overall median VAEP/90 is 0.305 and the <code>Diff. (VAEP/90)</code> between league A and league B is 0.0509, the <code>% Difference</code> is 0.0509/0.305 = 17%.</p>
<p><img src="https://itsmetoeknee.netlify.app/posts/soccer-league-strength/viz_relative_p_vaep_direct2z.png" class="img-fluid"></p>
</section>
<section id="improvements-further-work" class="level2">
<h2 class="anchored" data-anchor-id="improvements-further-work">Improvements &amp; Further Work</h2>
<ul>
<li><p>Although my approach does eventually get back to the original units (VAEP/90), it does feel a little convoluted. <a href="https://twitter.com/thecomeonman">Aditya Kothari</a> proposed re-defining the target variable in the regression to be the <strong>ratio of VAEP/minute</strong> (instead of a z-transformed difference in VAEP/90) between the leagues that a player moves to and from. (<a href="https://thecomeonman.github.io/PredictingTransferSuccesses/">See his full post.</a>) In my eyes, the main advantage of such an approach is that it is more direct. A player-level ratio embeds information about position and age—a forward will tend to have higher VAEP/minute than a defender, and will continue to have higher VAEP/minute than a defender after transferring—so normalizing for age and position is not necessarily justified. Additionally, the model’s league coefficients can be directly interpreted, unlike my approach. Perhaps the main disadvantage is sensitivity to low minutes played. <sup>8</sup></p></li>
<li><p>Another weakness in my approach is the assumption that relative league strengths are the same every year, which is most certainly not true. One could apply a decaying weight to past seasons to account for varying league strength.</p></li>
<li><p>I would be hesitant to use my results to directly infer how a specific player will translate going from one league to another. My approach focuses on leagues and is more about the “average” player. One aught to include additional features about play style (e.g.&nbsp;touches, progressive passes, team role) if interested in predicting individual player performance with a high degree of accuracy.</p></li>
<li><p>One can swap out the response variable with other reasonable metrics of player performance, such as xG (which is more readily available than atomic VAEP). In fact, I did this myself and came up with the result below (showing in units of xG/90 instead of as a percentage, since most fans are accustomed to seeing xG and are used to its relative magnitude).</p></li>
</ul>
<p><img src="https://itsmetoeknee.netlify.app/posts/soccer-league-strength/viz_relative_vp_xg_direct2z.png" class="img-fluid"></p>
<ul>
<li>One could stay in the realm of just purely “power rankings” and focus more on the estimates and error. For example, in an earlier iteration of this methodology, I used a Bradley-Terry approach to come up with a distribution of estimates for each league.<sup>9</sup> Here, the x-axis could be loosely interpreted as the log odds of one league winning in a match versus another league, although it’s not clear exactly what that means. (An “average” team from both leagues? A matchup of teams composed of “average” players from any team in each league?)</li>
</ul>
<p><img src="https://itsmetoeknee.netlify.app/posts/soccer-league-strength/coefs_bt.png" class="img-fluid"></p>
<ul>
<li>Notably, I’m not using match results at all! Certainly a model could learn something from international and tournament matches. However, using match-level data would require a whole new approach. Also, most would agree that tournament data can be biased by atypical lineups. For example, a manager on one side may opt to rest their best players, saving them for domestic league games, while the other manager may play their side at full strength.<sup>10</sup></li>
</ul>
<!-- -->
<ul>
<li>Sample size is an issue on two levels: (1) the number of transfers (more data would be better) and (2) minutes played.</li>
</ul>
<p>Regarding (1), one could expand the data set by including all seasons played by a player that has played in more than one league, taking all combinations of seasons in different leagues (i.e.&nbsp;relaxing the the same-season or subsequent-season criteria). I actually did attempt this and found that overall the results were somewhat similar, but there were more questionable results overall. (Brazil’s Serie A was found to be the second strongest league overall with this approach.).</p>
<p>Regarding (2), one has to make a choice to drop players with low minutes played to prevent outliers affecting the results of the model. However, in some cases, a loaned player coming in at the end of the season and making a huge impact can tell us a lot about the difference in strength of two leagues, so we may not want to drop some of the records after all. An empirical bayes adjustment to VAEP/90, not unlike <a href="http://varianceexplained.org/r/empirical_bayes_baseball/">the one described here</a> by <a href="https://twitter.com/drob">David Robinson</a>, can help overcome this. Below shows how such an adjustment slightly “shrinks” VAEP/90 numbers, especially for those who played less.</p>
<p><img src="https://itsmetoeknee.netlify.app/posts/soccer-league-strength/viz_vaep_adj.png" class="img-fluid"></p>
<p>On the topic of “shrinking”, we could have used ridge regression (regression with some penalty) to get more robust league estimates overall. However, there is a downside to ridge regression—we give up some level of interpretability.<sup>11</sup> Nonetheless, the relative ranking of leagues would be more reliable with ridge regression.</p>
</section>
<section id="ancillary-take-away" class="level2">
<h2 class="anchored" data-anchor-id="ancillary-take-away">Ancillary Take-away</h2>
<p>One final thing I’d like to point out here: I think this whole approach really showcases the inference made possible by player stats (xG, possession value metrics like atomic VAEP, etc.) aggregated over long periods of time. While such stats are often used to evaluate player performance in single games or even for singular in-game actions, they are most effective in providing insight when employed in higher-level analyses.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Valuing Actions by Estimating Probabilities (VAEP) based on the atomic SPADL format.↩︎</p></li>
<li id="fn2"><p><a href="https://twitter.com/TonyElHabr/status/1393553732659519490">I had a Twitter thread in May 2021 describing how one could use VAEP ratings.</a>↩︎</p></li>
<li id="fn3"><p>It’s closer to <a href="https://www.optasports.com/services/analytics/advanced-metrics/">xG+xA</a>, although the authors might disagree with that as well. It’s really best treated separately, which perhaps explains why the authors often using “rating” and “contribution” when referring to VAEP.↩︎</p></li>
<li id="fn4"><p>Each row represents one player. Each row only has one +1 and one -1, and 0s for other features.↩︎</p></li>
<li id="fn5"><p>We’re including all positions and ages in this regression, even though these groupings have varying standard deviations for transformation of the response variable. (All have 0 mean, as one might expect with a feature representing the difference between values with the same distribution.)↩︎</p></li>
<li id="fn6"><p>This <code>NA</code> occurs even when setting the intercept to 0, which is typically the way to get around this kind of issue with <code>lm</code> in R. When changing the order of columns in the regression and forcing the Netherlands coefficient to be non-<code>NA</code>, its estimate is lower than that of Bundesliga 2 (and a different league’s estimate is <code>NA</code>).↩︎</p></li>
<li id="fn7"><p>“Weighted-average”: <code>Diff. (VAEP/90) = (Diff. * sum(SD * (N * sum(N)))) - sum(Mean * (N * sum(N)))</code>↩︎</p></li>
<li id="fn8"><p>This is also a weakness of my approach, but arguably ratios exacerbate this.↩︎</p></li>
<li id="fn9"><p>Here I was treating the Champions League and Europa as their own “leagues”, purely out of curiosity.↩︎</p></li>
<li id="fn10"><p>Arguably you’ll have this kind of issue no matter what, due to injuries.↩︎</p></li>
<li id="fn11"><p>“Un-transformation” becomes more difficult since we have to account for the ridge penalty.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>r</category>
  <category>soccer</category>
  <guid>https://itsmetoeknee.netlify.app/posts/soccer-league-strength/index.html</guid>
  <pubDate>Sat, 26 Jun 2021 05:00:00 GMT</pubDate>
  <media:content url="https://itsmetoeknee.netlify.app/posts/soccer-league-strength/featured.png" medium="image" type="image/png" height="72" width="144"/>
</item>
<item>
  <title>Fantasy Football and the Classical Scheduling Problem</title>
  <dc:creator>Tony ElHabr</dc:creator>
  <link>https://itsmetoeknee.netlify.app/posts/fantasy-football-schedule-problem/index.html</link>
  <description><![CDATA[ 



<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Every year I play in several fantasy football (American) leagues. For those who are unaware, it’s a game that occurs every year in sync with the <a href="https://en.wikipedia.org/wiki/National_Football_League">National Football League (NFL)</a> where participants play in weekly head-to-head games as general managers of virtual football teams. (Yes, it’s very silly.) The winner at the end of the season is often not the player with the team that scores the most points; often a fortunate sequence of matchups dictates who comes out on top.</p>
<p>I didn’t fare so well this year in one of my leagues, but my disappointing placement was not due to my team struggling to score points; rather, I was extremely unlucky. I finished the season in 7th place despite scoring the most points!</p>
<p>This inspired me to quantify just how unlikely I was. The most common way to calculate the likelihood of a given team’s ranking in a league with is with a <a href="https://mathworld.wolfram.com/MonteCarloMethod.html">Monte Carlo simulation</a> based on some parameterized model of scoring to generate probabilities for the final standings. <a href="https://fivethirtyeight.com/methodology/how-our-club-soccer-predictions-work/">FiveThirtyEight uses such a model for their soccer models</a>, for example. For a setting in which team scores are independent of one another, such as fantasy football, another approach is to simply <a href="https://github.com/JakePartusch/fantasy-tools">calculate what each team’s record would be if they had played every other team each week</a>. (So, if your league has 10 teams and each plays each other once, each team would have a hypothetical count of 90 games played.) However, I was particularly interested in answering the question: “In how many different schedules would I have finished where I did?”</p>
</section>
<section id="problem" class="level2">
<h2 class="anchored" data-anchor-id="problem">Problem</h2>
<p>Figuring out how unlucky I was to finish 7th requires me to first figure out how many possible schedules there are. Formally, the problem can be put as follows<sup>1</sup>:</p>
<blockquote class="blockquote">
<p>Let <img src="https://latex.codecogs.com/png.latex?T=%7Bt_1,%20.,%20t_n%7D"> be a set of an even <img src="https://latex.codecogs.com/png.latex?n"> teams. Let <img src="https://latex.codecogs.com/png.latex?R"> denote a round consisting of a set of pairs <img src="https://latex.codecogs.com/png.latex?(t_i,%20t_j)"> (denoting a match), such that <img src="https://latex.codecogs.com/png.latex?0%20%3C%20i%20%3Cj%20???%20n">, and such that each team in <img src="https://latex.codecogs.com/png.latex?T"> is participates exactly once in <img src="https://latex.codecogs.com/png.latex?R">. Let <img src="https://latex.codecogs.com/png.latex?S"> be a schedule consisting of a tuple of <img src="https://latex.codecogs.com/png.latex?n???1"> valid rounds <img src="https://latex.codecogs.com/png.latex?(R_1,%20.,%20R_%7Bn???1%7D)">, such that all rounds in <img src="https://latex.codecogs.com/png.latex?S"> are pair-wise disjoint (no round shares a match). How many valid constructions of <img src="https://latex.codecogs.com/png.latex?S"> are there for <img src="https://latex.codecogs.com/png.latex?n"> input teams?</p>
</blockquote>
<p>For a small number of teams, it’s fairly simple to write out all possible combinations of matchups. For example, for a two-team league (where each team plays each other once), there is only one possible schedule (solution)—Team 1 vs.&nbsp;Team 2. For a four-team league, there are six possible schedules. Two are shown below.</p>
<table class="table">
<thead>
<tr class="header">
<th>solution</th>
<th>round</th>
<th>team1</th>
<th>team2</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>1</td>
<td>1</td>
<td>2</td>
</tr>
<tr class="even">
<td></td>
<td></td>
<td>3</td>
<td>4</td>
</tr>
<tr class="odd">
<td></td>
<td>2</td>
<td>1</td>
<td>3</td>
</tr>
<tr class="even">
<td></td>
<td></td>
<td>2</td>
<td>4</td>
</tr>
<tr class="odd">
<td></td>
<td>3</td>
<td>1</td>
<td>4</td>
</tr>
<tr class="even">
<td></td>
<td></td>
<td>2</td>
<td>3</td>
</tr>
<tr class="odd">
<td>2</td>
<td>1</td>
<td>1</td>
<td>3</td>
</tr>
<tr class="even">
<td></td>
<td></td>
<td>2</td>
<td>4</td>
</tr>
<tr class="odd">
<td></td>
<td>2</td>
<td>1</td>
<td>2</td>
</tr>
<tr class="even">
<td></td>
<td></td>
<td>3</td>
<td>4</td>
</tr>
<tr class="odd">
<td></td>
<td>3</td>
<td>1</td>
<td>4</td>
</tr>
<tr class="even">
<td></td>
<td></td>
<td>2</td>
<td>3</td>
</tr>
</tbody>
</table>
<p>Note that there is no concept of “home advantage” in fantasy football, so the order of teams in a given matchup does not matter. Also, note that if our restriction (“constraint”) that each team must play each other once and only once, implies that the number of teams has to be an even number.</p>
</section>
<section id="constraint-programming" class="level2">
<h2 class="anchored" data-anchor-id="constraint-programming">Constraint Programming</h2>
<p>To truly answer this question, we can turn to <a href="https://en.wikipedia.org/wiki/Constraint_programming">constraint programming</a>. If you’re familiar with constraint programming, then you’ll notice that this set-up is similar to the canonical <a href="https://en.wikipedia.org/wiki/Nurse_scheduling_problem">nurse scheduling problem</a> and is a specific form of the <a href="https://en.wikipedia.org/wiki/Traveling_tournament_problem">tournament problem</a>.</p>
<p>Below is some python code that is able to identify the number feasible solutions for four teams. I print out the first solution for illustrative purposes.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">from</span> ortools.sat.python <span class="im" style="color: #00769E;">import</span> cp_model</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="kw" style="color: #003B4F;">class</span> SolutionPrinter(cp_model.CpSolverSolutionCallback):</span>
<span id="cb1-4">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, games, n_team, n_show<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>):</span>
<span id="cb1-5">        cp_model.CpSolverSolutionCallback.<span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>)</span>
<span id="cb1-6">        <span class="va" style="color: #111111;">self</span>._games <span class="op" style="color: #5E5E5E;">=</span> games</span>
<span id="cb1-7">        <span class="va" style="color: #111111;">self</span>._n_show <span class="op" style="color: #5E5E5E;">=</span> n_show</span>
<span id="cb1-8">        <span class="va" style="color: #111111;">self</span>._n_team <span class="op" style="color: #5E5E5E;">=</span> n_team</span>
<span id="cb1-9">        <span class="va" style="color: #111111;">self</span>._n_sol <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb1-10"></span>
<span id="cb1-11">    <span class="kw" style="color: #003B4F;">def</span> on_solution_callback(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb1-12">        <span class="va" style="color: #111111;">self</span>._n_sol <span class="op" style="color: #5E5E5E;">+=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb1-13">        <span class="bu" style="color: null;">print</span>()</span>
<span id="cb1-14">        <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>._n_show <span class="kw" style="color: #003B4F;">is</span> <span class="va" style="color: #111111;">None</span> <span class="kw" style="color: #003B4F;">or</span> <span class="va" style="color: #111111;">self</span>._n_sol <span class="op" style="color: #5E5E5E;">&lt;=</span> <span class="va" style="color: #111111;">self</span>._n_show:</span>
<span id="cb1-15">            <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'Solution </span><span class="sc" style="color: #5E5E5E;">{</span><span class="va" style="color: #111111;">self</span><span class="sc" style="color: #5E5E5E;">.</span>_n_sol<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">.'</span>)</span>
<span id="cb1-16">            <span class="cf" style="color: #003B4F;">for</span> team1 <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="va" style="color: #111111;">self</span>._n_team):</span>
<span id="cb1-17">                <span class="cf" style="color: #003B4F;">for</span> team2 <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="va" style="color: #111111;">self</span>._n_team):</span>
<span id="cb1-18">                    <span class="cf" style="color: #003B4F;">if</span> team1 <span class="op" style="color: #5E5E5E;">!=</span> team2:</span>
<span id="cb1-19">                        <span class="bu" style="color: null;">print</span>(</span>
<span id="cb1-20">                            <span class="ss" style="color: #20794D;">f'Team </span><span class="sc" style="color: #5E5E5E;">{</span>team1 <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> vs. Team </span><span class="sc" style="color: #5E5E5E;">{</span>team2 <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> in Round </span><span class="sc" style="color: #5E5E5E;">{</span><span class="va" style="color: #111111;">self</span><span class="sc" style="color: #5E5E5E;">.</span>Value(<span class="va" style="color: #111111;">self</span>._games[(team1, team2)])<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span></span>
<span id="cb1-21">                        )</span>
<span id="cb1-22">        <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb1-23">            <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'Found solution </span><span class="sc" style="color: #5E5E5E;">{</span><span class="va" style="color: #111111;">self</span><span class="sc" style="color: #5E5E5E;">.</span>_n_sol<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">.'</span>)</span>
<span id="cb1-24"></span>
<span id="cb1-25">    <span class="kw" style="color: #003B4F;">def</span> get_n_sol(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb1-26">        <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">self</span>._n_sol</span>
<span id="cb1-27"></span>
<span id="cb1-28">n_team <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">4</span></span>
<span id="cb1-29">n_w <span class="op" style="color: #5E5E5E;">=</span> n_team <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb1-30">model <span class="op" style="color: #5E5E5E;">=</span> cp_model.CpModel()</span>
<span id="cb1-31">games <span class="op" style="color: #5E5E5E;">=</span> {}</span>
<span id="cb1-32"><span class="cf" style="color: #003B4F;">for</span> team1 <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(n_team):</span>
<span id="cb1-33">    <span class="cf" style="color: #003B4F;">for</span> team2 <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(n_team):</span>
<span id="cb1-34">        <span class="cf" style="color: #003B4F;">if</span> team1 <span class="op" style="color: #5E5E5E;">!=</span> team2:</span>
<span id="cb1-35">            games[(team1, team2)] <span class="op" style="color: #5E5E5E;">=</span> model.NewIntVar(<span class="dv" style="color: #AD0000;">1</span>, n_w, <span class="ss" style="color: #20794D;">f'</span><span class="sc" style="color: #5E5E5E;">{</span>team1<span class="sc" style="color: #5E5E5E;">:02}</span><span class="ss" style="color: #20794D;">_</span><span class="sc" style="color: #5E5E5E;">{</span>team2<span class="sc" style="color: #5E5E5E;">:02}</span><span class="ss" style="color: #20794D;">'</span>)</span>
<span id="cb1-36"></span>
<span id="cb1-37"><span class="cf" style="color: #003B4F;">for</span> team1 <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(n_team):</span>
<span id="cb1-38">    <span class="cf" style="color: #003B4F;">for</span> team2 <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(n_team):</span>
<span id="cb1-39">        <span class="cf" style="color: #003B4F;">if</span> team1 <span class="op" style="color: #5E5E5E;">!=</span> team2:</span>
<span id="cb1-40">            model.Add(games[(team1, team2)] <span class="op" style="color: #5E5E5E;">==</span> games[(team2, team1)])</span>
<span id="cb1-41"></span>
<span id="cb1-42"></span>
<span id="cb1-43"><span class="co" style="color: #5E5E5E;"># Each team can only play in 1 game each week</span></span>
<span id="cb1-44"><span class="cf" style="color: #003B4F;">for</span> t <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(n_team):</span>
<span id="cb1-45">    model.AddAllDifferent(</span>
<span id="cb1-46">        [games[(t, team2)] <span class="cf" style="color: #003B4F;">for</span> team2 <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(n_team) <span class="cf" style="color: #003B4F;">if</span> t <span class="op" style="color: #5E5E5E;">!=</span> team2]</span>
<span id="cb1-47">    )</span>
<span id="cb1-48"></span>
<span id="cb1-49">solver <span class="op" style="color: #5E5E5E;">=</span> cp_model.CpSolver()</span>
<span id="cb1-50">solution_printer <span class="op" style="color: #5E5E5E;">=</span> SolutionPrinter(games, n_team<span class="op" style="color: #5E5E5E;">=</span>n_team, n_show<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb1-51">status <span class="op" style="color: #5E5E5E;">=</span> solver.SearchForAllSolutions(model, solution_printer)</span>
<span id="cb1-52"></span>
<span id="cb1-53"><span class="bu" style="color: null;">print</span>()</span>
<span id="cb1-54"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'Solve status: </span><span class="sc" style="color: #5E5E5E;">{</span>solver<span class="sc" style="color: #5E5E5E;">.</span>StatusName(status)<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span>
<span id="cb1-55"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f'Solutions found: </span><span class="sc" style="color: #5E5E5E;">{</span>solution_printer<span class="sc" style="color: #5E5E5E;">.</span>get_n_sol()<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">'</span>)</span>
<span id="cb1-56"><span class="co" style="color: #5E5E5E;">#&gt; Solution 1.</span></span>
<span id="cb1-57"><span class="co" style="color: #5E5E5E;">#&gt; Team 1 vs. Team 2 in Round 3</span></span>
<span id="cb1-58"><span class="co" style="color: #5E5E5E;">#&gt; Team 1 vs. Team 3 in Round 2</span></span>
<span id="cb1-59"><span class="co" style="color: #5E5E5E;">#&gt; Team 1 vs. Team 4 in Round 1</span></span>
<span id="cb1-60"><span class="co" style="color: #5E5E5E;">#&gt; Team 2 vs. Team 1 in Round 3</span></span>
<span id="cb1-61"><span class="co" style="color: #5E5E5E;">#&gt; Team 2 vs. Team 3 in Round 1</span></span>
<span id="cb1-62"><span class="co" style="color: #5E5E5E;">#&gt; Team 2 vs. Team 4 in Round 2</span></span>
<span id="cb1-63"><span class="co" style="color: #5E5E5E;">#&gt; Team 3 vs. Team 1 in Round 2</span></span>
<span id="cb1-64"><span class="co" style="color: #5E5E5E;">#&gt; Team 3 vs. Team 2 in Round 1</span></span>
<span id="cb1-65"><span class="co" style="color: #5E5E5E;">#&gt; Team 3 vs. Team 4 in Round 3</span></span>
<span id="cb1-66"><span class="co" style="color: #5E5E5E;">#&gt; Team 4 vs. Team 1 in Round 1</span></span>
<span id="cb1-67"><span class="co" style="color: #5E5E5E;">#&gt; Team 4 vs. Team 2 in Round 2</span></span>
<span id="cb1-68"><span class="co" style="color: #5E5E5E;">#&gt; Team 4 vs. Team 3 in Round 3</span></span>
<span id="cb1-69"><span class="co" style="color: #5E5E5E;">#&gt; </span></span>
<span id="cb1-70"><span class="co" style="color: #5E5E5E;">#&gt; Found solution 2.</span></span>
<span id="cb1-71"><span class="co" style="color: #5E5E5E;">#&gt; </span></span>
<span id="cb1-72"><span class="co" style="color: #5E5E5E;">#&gt; Found solution 3.</span></span>
<span id="cb1-73"><span class="co" style="color: #5E5E5E;">#&gt; </span></span>
<span id="cb1-74"><span class="co" style="color: #5E5E5E;">#&gt; Found solution 4.</span></span>
<span id="cb1-75"><span class="co" style="color: #5E5E5E;">#&gt; </span></span>
<span id="cb1-76"><span class="co" style="color: #5E5E5E;">#&gt; Found solution 5.</span></span>
<span id="cb1-77"><span class="co" style="color: #5E5E5E;">#&gt; </span></span>
<span id="cb1-78"><span class="co" style="color: #5E5E5E;">#&gt; Found solution 6.</span></span>
<span id="cb1-79"><span class="co" style="color: #5E5E5E;">#&gt; </span></span>
<span id="cb1-80"><span class="co" style="color: #5E5E5E;">#&gt; Solve status: OPTIMAL</span></span>
<span id="cb1-81"><span class="co" style="color: #5E5E5E;">#&gt; Solutions found: 6</span></span></code></pre></div>
</details>
</div>
<p>Easy enough to run for 10 teams and get an answer, right? <strong>WRONG</strong>. Turns out this the number of feasible solutions (schedules) starts to blow up really quickly. In fact, I believe the number of solutions for this particular problem is only known up to 14 teams. (I’ve intentionally left the numbers un-rounded to emphasize just how much the number of solutions increases as a function of the number of teams.)</p>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: right;">n</th>
<th style="text-align: left;">solutions</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: right;">2</td>
<td style="text-align: left;">1</td>
</tr>
<tr class="even">
<td style="text-align: right;">4</td>
<td style="text-align: left;">6</td>
</tr>
<tr class="odd">
<td style="text-align: right;">6</td>
<td style="text-align: left;">720</td>
</tr>
<tr class="even">
<td style="text-align: right;">8</td>
<td style="text-align: left;">31,449,600</td>
</tr>
<tr class="odd">
<td style="text-align: right;">10</td>
<td style="text-align: left;">444,733,651,353,600</td>
</tr>
<tr class="even">
<td style="text-align: right;">12</td>
<td style="text-align: left;">10,070,314,878,246,925,803,220,024</td>
</tr>
<tr class="odd">
<td style="text-align: right;">14</td>
<td style="text-align: left;">614,972,203,951,464,579,840,082,248,206,026,604,282</td>
</tr>
</tbody>
</table>
<p>Unless you happen to be an expert in <a href="https://en.wikipedia.org/wiki/Graph_(discrete_mathematics)">graph theory</a> and <a href="https://mathworld.wolfram.com/Combinatorics.html">combinatorics</a>, you probably wouldn’t be able to figure this out by hand; for us non-experts out there, we can refer to a known sequence of <a href="http://oeis.org/A000438">1-factorizations of a complete graph <img src="https://latex.codecogs.com/png.latex?K_%7B2n%7D"></a> and use our brain to figure out permutations in a given round. (Don’t worry if that makes no sense.)</p>
<p>Why do I bring this up? Well, I realized that generating all possible schedules for a 10-team league (such as my aforementioned league) is just not reasonable for anyone without a supercomputer and a lot of time. I enhanced the above python code a bit and tried it out for a 10-team league and was only able to generate a couple of million solutions after 3 hours.</p>
</section>
<section id="alternative-exhaustive-search" class="level2">
<h2 class="anchored" data-anchor-id="alternative-exhaustive-search">Alternative: Exhaustive Search</h2>
<p>The failure to generate all solutions made me reconsider things a bit. If I can’t reasonably “have it all”, I should simplify things a bit. By “simplify”, I mean perform an <a href="https://en.wikipedia.org/wiki/Brute-force_search">“exhaustive” (or “brute-force) search</a> that stops after a specified number of solutions. And, by re-writing things in R, I can eliminate dependencies on <a href="https://developers.google.com/optimization">Google’s ortools package</a> and python. (Both are great, but, nonetheless, they are potential obstacles for R users.)</p>
<p>Writing a script to perform an exhaustive search is not so easy itself, and, in this case, requires a completely different approach to the problem. My steps are as follows:</p>
<ol type="1">
<li>Set up an <img src="https://latex.codecogs.com/png.latex?n"> x <img src="https://latex.codecogs.com/png.latex?n-1"> matrix, where the <img src="https://latex.codecogs.com/png.latex?n"> rows designate teams and the <img src="https://latex.codecogs.com/png.latex?n-1"> columns designate rounds.</li>
</ol>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">league_size <span class="ot" style="color: #003B4F;">=</span> <span class="dv" style="color: #AD0000;">4</span></span>
<span id="cb2-2">rounds <span class="ot" style="color: #003B4F;">&lt;-</span> league_size <span class="sc" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb2-3">mat <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">matrix</span>(<span class="at" style="color: #657422;">nrow =</span> league_size, <span class="at" style="color: #657422;">ncol =</span> rounds)</span>
<span id="cb2-4">mat</span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;">#&gt;      [,1] [,2] [,3]</span></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;">#&gt; [1,]   NA   NA   NA</span></span>
<span id="cb2-7"><span class="co" style="color: #5E5E5E;">#&gt; [2,]   NA   NA   NA</span></span>
<span id="cb2-8"><span class="co" style="color: #5E5E5E;">#&gt; [3,]   NA   NA   NA</span></span>
<span id="cb2-9"><span class="co" style="color: #5E5E5E;">#&gt; [4,]   NA   NA   NA</span></span></code></pre></div>
</details>
</div>
<ol start="2" type="1">
<li>Randomly select the opponent of team 1 in round 1.</li>
</ol>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">team_i <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb3-2">round_i <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb3-3">retry_i <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb3-4">idx_team <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>league_size</span>
<span id="cb3-5"><span class="fu" style="color: #4758AB;">set.seed</span>(<span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb3-6"></span>
<span id="cb3-7">team_1_round_1 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sample</span>(<span class="dv" style="color: #AD0000;">2</span><span class="sc" style="color: #5E5E5E;">:</span>league_size, <span class="dv" style="color: #AD0000;">1</span>, <span class="at" style="color: #657422;">replace =</span> <span class="cn" style="color: #8f5902;">FALSE</span>)</span>
<span id="cb3-8">mat[team_i, round_i] <span class="ot" style="color: #003B4F;">&lt;-</span> team_1_round_1</span>
<span id="cb3-9">mat</span>
<span id="cb3-10"><span class="co" style="color: #5E5E5E;">#&gt;      [,1] [,2] [,3]</span></span>
<span id="cb3-11"><span class="co" style="color: #5E5E5E;">#&gt; [1,]    2   NA   NA</span></span>
<span id="cb3-12"><span class="co" style="color: #5E5E5E;">#&gt; [2,]   NA   NA   NA</span></span>
<span id="cb3-13"><span class="co" style="color: #5E5E5E;">#&gt; [3,]   NA   NA   NA</span></span>
<span id="cb3-14"><span class="co" style="color: #5E5E5E;">#&gt; [4,]   NA   NA   NA</span></span></code></pre></div>
</details>
</div>
<ol start="3" type="1">
<li>Find a unique set of opponents for teams 2 through <img src="https://latex.codecogs.com/png.latex?n"> to fill the rest of the cells in column 1.</li>
</ol>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="cf" style="color: #003B4F;">while</span>(team_i <span class="sc" style="color: #5E5E5E;">&lt;=</span> league_size) {</span>
<span id="cb4-2">  <span class="cf" style="color: #003B4F;">if</span>(team_i <span class="sc" style="color: #5E5E5E;">%in%</span> teams_already_matched) {</span>
<span id="cb4-3">    team_i_round_i <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">which</span>(team_i <span class="sc" style="color: #5E5E5E;">==</span> teams_already_matched)</span>
<span id="cb4-4">    mat[team_i, round_i] <span class="ot" style="color: #003B4F;">&lt;-</span> team_i_round_i</span>
<span id="cb4-5">    team_i <span class="ot" style="color: #003B4F;">&lt;-</span> team_i <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb4-6">  } <span class="cf" style="color: #003B4F;">else</span> {</span>
<span id="cb4-7">    teams_cant_match <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">unique</span>(<span class="fu" style="color: #4758AB;">c</span>(teams_already_indexed, teams_already_matched))</span>
<span id="cb4-8">    teams_unmatched <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">setdiff</span>(teams_possible, teams_cant_match)</span>
<span id="cb4-9">    n_matched <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">length</span>(teams_unmatched)</span>
<span id="cb4-10">    <span class="cf" style="color: #003B4F;">if</span>(n_matched <span class="sc" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>) {</span>
<span id="cb4-11">      mat[<span class="dv" style="color: #AD0000;">2</span><span class="sc" style="color: #5E5E5E;">:</span>league_size, round_i] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cn" style="color: #8f5902;">NA</span></span>
<span id="cb4-12">      team_i <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb4-13">    } <span class="cf" style="color: #003B4F;">else</span> {</span>
<span id="cb4-14">      team_i_round_i <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">if</span>(n_matched <span class="sc" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">1</span>) {</span>
<span id="cb4-15">        teams_unmatched</span>
<span id="cb4-16">      } <span class="cf" style="color: #003B4F;">else</span> {</span>
<span id="cb4-17">        <span class="fu" style="color: #4758AB;">sample</span>(teams_unmatched, <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb4-18">      }</span>
<span id="cb4-19"></span>
<span id="cb4-20">      mat[team_i, round_i] <span class="ot" style="color: #003B4F;">&lt;-</span> team_i_round_i</span>
<span id="cb4-21">      team_i <span class="ot" style="color: #003B4F;">&lt;-</span> team_i <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb4-22">    }</span>
<span id="cb4-23">  }</span>
<span id="cb4-24">}</span>
<span id="cb4-25"><span class="co" style="color: #5E5E5E;">#&gt;      [,1] [,2] [,3]</span></span>
<span id="cb4-26"><span class="co" style="color: #5E5E5E;">#&gt; [1,]    2   NA   NA</span></span>
<span id="cb4-27"><span class="co" style="color: #5E5E5E;">#&gt; [2,]    1   NA   NA</span></span>
<span id="cb4-28"><span class="co" style="color: #5E5E5E;">#&gt; [3,]    4   NA   NA</span></span>
<span id="cb4-29"><span class="co" style="color: #5E5E5E;">#&gt; [4,]    3   NA   NA</span></span></code></pre></div>
</details>
</div>
<ol start="4" type="1">
<li>Identify a unique set of opponents for team 1 for all other rounds (rounds 2 through <img src="https://latex.codecogs.com/png.latex?n-1">).</li>
</ol>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">teams_possible <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">setdiff</span>(idx_team, <span class="fu" style="color: #4758AB;">c</span>(<span class="dv" style="color: #AD0000;">1</span>, team_1_round_1))</span>
<span id="cb5-2">team1_all_rounds <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sample</span>(teams_possible, <span class="at" style="color: #657422;">size =</span> <span class="fu" style="color: #4758AB;">length</span>(teams_possible))</span>
<span id="cb5-3">mat[<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span><span class="sc" style="color: #5E5E5E;">:</span>rounds] <span class="ot" style="color: #003B4F;">&lt;-</span> team1_all_rounds</span>
<span id="cb5-4">mat</span>
<span id="cb5-5"><span class="co" style="color: #5E5E5E;">#&gt;      [,1] [,2] [,3]</span></span>
<span id="cb5-6"><span class="co" style="color: #5E5E5E;">#&gt; [1,]    2    3    4</span></span>
<span id="cb5-7"><span class="co" style="color: #5E5E5E;">#&gt; [2,]    1   NA   NA</span></span>
<span id="cb5-8"><span class="co" style="color: #5E5E5E;">#&gt; [3,]    4   NA   NA</span></span>
<span id="cb5-9"><span class="co" style="color: #5E5E5E;">#&gt; [4,]    3   NA   NA</span></span></code></pre></div>
</details>
</div>
<ol start="5" type="1">
<li>Repeat step 3 for rounds 2 through <img src="https://latex.codecogs.com/png.latex?n-2"> (penultimate round).</li>
</ol>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="cf" style="color: #003B4F;">while</span>(round_i <span class="sc" style="color: #5E5E5E;">&lt;</span> rounds) {</span>
<span id="cb6-2">  team_i <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb6-3">  <span class="cf" style="color: #003B4F;">while</span>(team_i <span class="sc" style="color: #5E5E5E;">&lt;=</span> league_size) {</span>
<span id="cb6-4">    teams_possible <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">setdiff</span>(idx_team, team_i)</span>
<span id="cb6-5">    teams_already_indexed <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>(team_i <span class="sc" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb6-6">    teams_already_matched <span class="ot" style="color: #003B4F;">&lt;-</span> mat[teams_already_indexed, round_i]</span>
<span id="cb6-7">    teams_already_played <span class="ot" style="color: #003B4F;">&lt;-</span> mat[team_i, <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>(round_i <span class="sc" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span>)]</span>
<span id="cb6-8">    reset <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cn" style="color: #8f5902;">FALSE</span></span>
<span id="cb6-9">    <span class="cf" style="color: #003B4F;">if</span>(team_i <span class="sc" style="color: #5E5E5E;">%in%</span> teams_already_matched) {</span>
<span id="cb6-10">      team_i_round_i <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">which</span>(team_i <span class="sc" style="color: #5E5E5E;">==</span> teams_already_matched)</span>
<span id="cb6-11">      <span class="cf" style="color: #003B4F;">if</span>(<span class="fu" style="color: #4758AB;">any</span>(team_i_round_i <span class="sc" style="color: #5E5E5E;">==</span> teams_already_played)) {</span>
<span id="cb6-12">        reset <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cn" style="color: #8f5902;">TRUE</span></span>
<span id="cb6-13">      }</span>
<span id="cb6-14">    } <span class="cf" style="color: #003B4F;">else</span> {</span>
<span id="cb6-15">      teams_cant_match <span class="ot" style="color: #003B4F;">&lt;-</span></span>
<span id="cb6-16">        <span class="fu" style="color: #4758AB;">unique</span>(<span class="fu" style="color: #4758AB;">c</span>(teams_already_indexed, teams_already_matched, teams_already_played))</span>
<span id="cb6-17">      teams_unmatched <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">setdiff</span>(teams_possible, teams_cant_match)</span>
<span id="cb6-18">      n_matched <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">length</span>(teams_unmatched)</span>
<span id="cb6-19">      <span class="cf" style="color: #003B4F;">if</span> (n_matched <span class="sc" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>) {</span>
<span id="cb6-20">        reset <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cn" style="color: #8f5902;">TRUE</span></span>
<span id="cb6-21">      } <span class="cf" style="color: #003B4F;">else</span> {</span>
<span id="cb6-22">        team_i_round_i <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">if</span>(n_matched <span class="sc" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">1</span>) {</span>
<span id="cb6-23">          teams_unmatched</span>
<span id="cb6-24">        } <span class="cf" style="color: #003B4F;">else</span> {</span>
<span id="cb6-25">          <span class="fu" style="color: #4758AB;">sample</span>(teams_unmatched, <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb6-26">        }</span>
<span id="cb6-27">      }</span>
<span id="cb6-28">    }</span>
<span id="cb6-29">    </span>
<span id="cb6-30">    <span class="cf" style="color: #003B4F;">if</span>(reset) {</span>
<span id="cb6-31">      mat[<span class="dv" style="color: #AD0000;">2</span><span class="sc" style="color: #5E5E5E;">:</span>league_size, round_i] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cn" style="color: #8f5902;">NA</span></span>
<span id="cb6-32">      team_i <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb6-33">      retry_i <span class="ot" style="color: #003B4F;">&lt;-</span> retry_i <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb6-34">    } <span class="cf" style="color: #003B4F;">else</span> {</span>
<span id="cb6-35">      mat[team_i, round_i] <span class="ot" style="color: #003B4F;">&lt;-</span> team_i_round_i</span>
<span id="cb6-36">      team_i <span class="ot" style="color: #003B4F;">&lt;-</span> team_i <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb6-37">    }</span>
<span id="cb6-38">  }</span>
<span id="cb6-39">  round_i <span class="ot" style="color: #003B4F;">&lt;-</span> round_i <span class="sc" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb6-40">}</span>
<span id="cb6-41">mat</span>
<span id="cb6-42"><span class="co" style="color: #5E5E5E;">#&gt;      [,1] [,2] [,3]</span></span>
<span id="cb6-43"><span class="co" style="color: #5E5E5E;">#&gt; [1,]    2    3    4</span></span>
<span id="cb6-44"><span class="co" style="color: #5E5E5E;">#&gt; [2,]    1    4   NA</span></span>
<span id="cb6-45"><span class="co" style="color: #5E5E5E;">#&gt; [3,]    4    1   NA</span></span>
<span id="cb6-46"><span class="co" style="color: #5E5E5E;">#&gt; [4,]    3    2   NA</span></span></code></pre></div>
</details>
</div>
<ol start="6" type="1">
<li>Identify the only valid set of matchups for the last round <img src="https://latex.codecogs.com/png.latex?n-1">.</li>
</ol>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">idx_not1 <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">2</span><span class="sc" style="color: #5E5E5E;">:</span>league_size</span>
<span id="cb7-2">total <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">Reduce</span>(sum, idx_team) <span class="sc" style="color: #5E5E5E;">-</span> idx_not1</span>
<span id="cb7-3">rs <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">rowSums</span>(mat[idx_not1, <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>(rounds <span class="sc" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span>)])</span>
<span id="cb7-4">teams_last <span class="ot" style="color: #003B4F;">&lt;-</span> total <span class="sc" style="color: #5E5E5E;">-</span> rs</span>
<span id="cb7-5">mat[idx_not1, rounds] <span class="ot" style="color: #003B4F;">&lt;-</span> teams_last</span>
<span id="cb7-6">mat</span>
<span id="cb7-7"><span class="co" style="color: #5E5E5E;">#&gt;      [,1] [,2] [,3]</span></span>
<span id="cb7-8"><span class="co" style="color: #5E5E5E;">#&gt; [1,]    2    3    4</span></span>
<span id="cb7-9"><span class="co" style="color: #5E5E5E;">#&gt; [2,]    1    4    3</span></span>
<span id="cb7-10"><span class="co" style="color: #5E5E5E;">#&gt; [3,]    4    1    2</span></span>
<span id="cb7-11"><span class="co" style="color: #5E5E5E;">#&gt; [4,]    3    2    1</span></span></code></pre></div>
</details>
</div>
<p>That is the core of the solution. The rest of the work<sup>2</sup> involves repeating the steps for however many times you want, always checking for duplicates of previous solutions, i.e.&nbsp;<a href="https://en.wikipedia.org/wiki/Simple_random_sample#Distinction_between_a_systematic_random_sample_and_a_simple_random_sample">sampling without replacement</a>. (Or, if you don’t care about schedules being unique, i.e.&nbsp;sampling with replacement, it’s even easier.)</p>
</section>
<section id="application" class="level2">
<h2 class="anchored" data-anchor-id="application">Application</h2>
<p>Since generating unique schedules is something I’d like to be able to do every year for my fantasy football leagues, I <a href="https://github.com/tonyelhabr/ffsched">wrote a package for it, called <code>{ffsched}</code></a>. The package includes functionality to retrieve your league’s fantasy scores from <a href="https://www.espn.com/fantasy/">ESPN</a>, which you can combine with the simulated schedules to generate a plot such as the following.</p>
<p><img src="https://itsmetoeknee.netlify.app/posts/fantasy-football-schedule-problem/viz_standings_tile_2020.png" class="img-fluid"></p>
<p>It’s immediately evident how un-lucky I (“Tony El Tigre”) was. In the 100,000 simulations, I never finished below 7th, and I only finished 7th 1.1% of the time!</p>
<p>In the previous year I scored the most points and finished first. “The Juggernaut” got the short end of the stick in 2019, finishing 7th. He only finished 7th or lower in 6.6% of schedules.</p>
<p><img src="https://itsmetoeknee.netlify.app/posts/fantasy-football-schedule-problem/viz_standings_tile_2019.png" class="img-fluid"></p>
</section>
<section id="take-away" class="level2">
<h2 class="anchored" data-anchor-id="take-away">Take-away</h2>
<p>An exhaustive search as a work-around for true constraint programming isn’t always elegant and can be difficult to implement, but if you’re motivated enough to do it—as I was to prove my extreme lack of fortune—it can generate what you need to make a compelling point. My use case (for generating unique fantasy generating football schedules) is inconsequential, but such techniques are often immensely important in real world contexts.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>This is almost directly taken from <a href="https://math.stackexchange.com/questions/284416/how-many-possible-arrangements-for-a-round-robin-tournament" class="uri">https://math.stackexchange.com/questions/284416/how-many-possible-arrangements-for-a-round-robin-tournament</a>.↩︎</p></li>
<li id="fn2"><p>In fantasy football, teams often play each other more than once in a year (depending on your league size), so I’ve somewhat simplified the problem for the purpose of this post. More work could be done to figure out the number of possibilities when more than one game has to be scheduled for each pair of teams.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>r</category>
  <category>python</category>
  <category>football (american)</category>
  <guid>https://itsmetoeknee.netlify.app/posts/fantasy-football-schedule-problem/index.html</guid>
  <pubDate>Mon, 11 Jan 2021 06:00:00 GMT</pubDate>
  <media:content url="https://itsmetoeknee.netlify.app/posts/fantasy-football-schedule-problem/viz_standings_tile_2020.png" medium="image" type="image/png" height="96" width="144"/>
</item>
<item>
  <title>Decomposing and Smoothing Soccer Spatial Tendencies</title>
  <dc:creator>Tony ElHabr</dc:creator>
  <link>https://itsmetoeknee.netlify.app/posts/decomposition-smoothing-soccer/index.html</link>
  <description><![CDATA[ 



<p>While reading up on modern soccer analytics (<a href="../../posts/soccer-pitch-control-r/">I’ve had an itch for soccer and tracking data recently</a>, I stumbled upon <a href="https://github.com/devinpleuler/analytics-handbook">an excellent set of tutorials</a> written by <a href="https://twitter.com/devinpleuler">Devin Pleuler</a>. In particular, his notebook on <a href="https://en.wikipedia.org/wiki/Non-negative_matrix_factorization">non-negative matrix factorization (NNMF)</a> caught my eye. I hadn’t really heard of the concept before, but it turned out to be much less daunting once I realized that it is just another type of matrix decomposition. <a href="https://en.wikipedia.org/wiki/Singular_value_decomposition">Singular value decomposition (SVD)</a>, which I’m much more familiar with, belongs to the same family of calculations (although NNMF and SVD are quite different). In an effort to really gain a better understanding of NNMF, I set out to emulate his notebook.</p>
<p>In the process of converting his python code to R, I encountered three challenges with resolutions worth documenting.</p>
<ol type="1">
<li><p>Before the NNMF calculation, I needed to perform <a href="https://www.w3resource.com/sql/joins/perform-a-non-equi-join.php">non-equi join</a> with a fairly size-able data set. Unfortunately, <a href="https://dplyr.tidyverse.org/"><code>{dplyr}</code></a><sup>1</sup> does not have built-in support for such a join. I tossed aside any kind of personal implicit bias against <a href="https://cran.r-project.org/web/packages/data.table/index.html"><code>{data.table}</code></a>—which is certainly the go-to option in the R ecosystem for non-equi joins—and used it for this process.</p></li>
<li><p>For the NNMF calculation, the only R implementation (that I could find) comes with the <a href="https://cran.r-project.org/web/packages/NMF/index.html">{NMF} package</a><sup>2</sup>, which requires the installation of the <a href="https://cran.r-project.org/web/packages/BiocManager/index.html">Bioconductor-exclusive {BiocManager} package</a>. I’m relatively unfamiliar with <a href="https://www.bioconductor.org/">Bioconductor</a>, so this was not very appealing (although I did end up downloading <code>{NMF}</code> and trying it out). Instead, I ended up using <a href="https://rstudio.github.io/reticulate/"><code>{reticulate}</code></a> to call the <a href="https://scikit-learn.org/stable/modules/generated/sklearn.decomposition.NMF.html"><code>skearn.decomposition.NMF()</code></a> function directly (as is done in the python code). This is a perfect example of using <code>{reticulate}</code> for a non-trivial reason (i.e.&nbsp;for an algorithm).</p></li>
<li><p>After the NNMF computation, I needed to perform <a href="https://en.wikipedia.org/wiki/Gaussian_blur">2-D Gaussian smoothing</a>, which is helpful for making the output of the NNMF output more interpretable. The <a href="https://cran.r-project.org/web/packages/spatstat/index.html"><code>{spatstat}</code> package</a> had just the function for the job (<code>spatstat::blur()</code>), and it all it took for me was to write some a tidy wrapper function to integrate it nicely into my workflow.</p></li>
</ol>
<p>I’ve always considered myself a “whatever gets the job done” kind of person, not insistent on ignoring solutions that use “base” R, <code>{data.table}</code>, python, etc. Nonetheless, replicating Devin’s notebook really underscored the importance of being comfortable outside of a <code>{tidyverse}</code>-centric workflow.</p>
<p>Anyways, this post outlines the code and my thought process in porting Devin’s code to R. I’ll skip some of the details, emphasizing the things that are most interesting.</p>
<section id="data" class="level2">
<h2 class="anchored" data-anchor-id="data">Data</h2>
<p>We’ll be working with the <a href="https://github.com/statsbomb/open-data">open-sourced StatsBomb data</a> for the <a href="https://en.wikipedia.org/wiki/2018_FIFA_World_Cup">2018 Men’s World Cup</a>, which I’ve called <code>events</code> below. <sup>3</sup></p>
<p>This is a relatively large data set with lots of columns (and rows). However, we only need three columns for what we’re going to do: (1) a unique identifier for each player, <code>player_id</code>, along with their (2) <code>x</code> and (3) <code>y</code> coordinates.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb1-2">comps <span class="ot" style="color: #003B4F;">&lt;-</span> StatsBombR<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">FreeCompetitions</span>()</span>
<span id="cb1-3"></span>
<span id="cb1-4">matches <span class="ot" style="color: #003B4F;">&lt;-</span> comps <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb1-5">  <span class="fu" style="color: #4758AB;">filter</span>(competition_id <span class="sc" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">43</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb1-6">  StatsBombR<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">FreeMatches</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb1-7">  <span class="fu" style="color: #4758AB;">arrange</span>(match_date)</span>
<span id="cb1-8"></span>
<span id="cb1-9">events <span class="ot" style="color: #003B4F;">&lt;-</span> StatsBombR<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">StatsBombFreeEvents</span>(matches)</span>
<span id="cb1-10">events <span class="ot" style="color: #003B4F;">&lt;-</span> StatsBombR<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">allclean</span>(events)</span>
<span id="cb1-11">events <span class="ot" style="color: #003B4F;">&lt;-</span> events <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb1-12">  <span class="fu" style="color: #4758AB;">select</span>(<span class="at" style="color: #657422;">player_id =</span> player.id, <span class="at" style="color: #657422;">x =</span> location.x, <span class="at" style="color: #657422;">y =</span> location.y) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb1-13">  <span class="fu" style="color: #4758AB;">drop_na</span>()</span></code></pre></div>
</details>
</div>
<p>A quick summary of the data shows that there are 603 unique players, and that the <code>x</code> and <code>y</code> coordinates range from 1 to 120 (yards) and 1 to 80 respectively.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">events <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb2-2">  <span class="fu" style="color: #4758AB;">summarize</span>(</span>
<span id="cb2-3">    <span class="at" style="color: #657422;">n =</span> <span class="fu" style="color: #4758AB;">n</span>(),</span>
<span id="cb2-4">    <span class="at" style="color: #657422;">n_player =</span> <span class="fu" style="color: #4758AB;">n_distinct</span>(player_id),</span>
<span id="cb2-5">    <span class="fu" style="color: #4758AB;">across</span>(<span class="fu" style="color: #4758AB;">c</span>(x, y), <span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">min =</span> min, <span class="at" style="color: #657422;">max =</span> max, <span class="at" style="color: #657422;">mean =</span> mean))</span>
<span id="cb2-6">  )</span>
<span id="cb2-7"><span class="co" style="color: #5E5E5E;">#&gt; # A tibble: 1 x 8</span></span>
<span id="cb2-8"><span class="co" style="color: #5E5E5E;">#&gt;       n n_player x_min x_max x_mean y_min y_max y_mean</span></span>
<span id="cb2-9"><span class="co" style="color: #5E5E5E;">#&gt;   &lt;int&gt;    &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;</span></span>
<span id="cb2-10"><span class="co" style="color: #5E5E5E;">#&gt; 1 224018      603     1   120  60.05     1    80  40.37</span></span></code></pre></div>
</details>
</div>
</section>
<section id="non-equi-joining-with-data.table" class="level2">
<h2 class="anchored" data-anchor-id="non-equi-joining-with-data.table">Non-Equi Joining with <code>{data.table}</code></h2>
<p>Our first challenge is to convert the following chunk of python.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb3-2"></span>
<span id="cb3-3">x_scale, y_scale <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">30</span>, <span class="dv" style="color: #AD0000;">20</span></span>
<span id="cb3-4"></span>
<span id="cb3-5">x_bins <span class="op" style="color: #5E5E5E;">=</span> np.linspace(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">120</span>, x_scale)</span>
<span id="cb3-6">y_bins <span class="op" style="color: #5E5E5E;">=</span> np.linspace(<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">80</span>, y_scale)</span>
<span id="cb3-7"></span>
<span id="cb3-8">players <span class="op" style="color: #5E5E5E;">=</span> {}</span>
<span id="cb3-9"></span>
<span id="cb3-10"><span class="cf" style="color: #003B4F;">for</span> e <span class="kw" style="color: #003B4F;">in</span> events:</span>
<span id="cb3-11">    <span class="cf" style="color: #003B4F;">if</span> <span class="st" style="color: #20794D;">'player'</span> <span class="kw" style="color: #003B4F;">in</span> e.keys():</span>
<span id="cb3-12">        player_id <span class="op" style="color: #5E5E5E;">=</span> e[<span class="st" style="color: #20794D;">'player'</span>][<span class="st" style="color: #20794D;">'id'</span>]</span>
<span id="cb3-13">        <span class="cf" style="color: #003B4F;">if</span> player_id <span class="kw" style="color: #003B4F;">not</span> <span class="kw" style="color: #003B4F;">in</span> players.keys():</span>
<span id="cb3-14">            players[player_id] <span class="op" style="color: #5E5E5E;">=</span> np.zeros((x_scale, y_scale))</span>
<span id="cb3-15">        <span class="cf" style="color: #003B4F;">try</span>:</span>
<span id="cb3-16">            x_bin <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">int</span>(np.digitize(e[<span class="st" style="color: #20794D;">'location'</span>][<span class="dv" style="color: #AD0000;">0</span>], x_bins[<span class="dv" style="color: #AD0000;">1</span>:], right<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>))</span>
<span id="cb3-17">            y_bin <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">int</span>(np.digitize(e[<span class="st" style="color: #20794D;">'location'</span>][<span class="dv" style="color: #AD0000;">1</span>], y_bins[<span class="dv" style="color: #AD0000;">1</span>:], right<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>))</span>
<span id="cb3-18">            players[player_id][x_bin][y_bin] <span class="op" style="color: #5E5E5E;">+=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb3-19">        <span class="cf" style="color: #003B4F;">except</span>:</span>
<span id="cb3-20">            <span class="cf" style="color: #003B4F;">pass</span></span></code></pre></div>
</details>
</div>
<p>This code creates a nested <code>dict</code>, where the keys are player id’s and the values are 20x30 matrices. Each element in the matrix is an integer that represents the count of times that the player was recorded being at a certain position on the pitch. (These counts range from 0 to 94 for this data set.)</p>
<p>Some technical details:</p>
<ol type="1">
<li>The python <code>events</code> is actually a pretty heavily nested list<sup>4</sup>, hence the non-rectangular operations such as <code>e['player']['id']</code>.</li>
<li>Observations with missing coordinates are ignored with the <code>try</code>-<code>except</code> block.</li>
<li><code>x</code> and <code>y</code> values (elements of the <code>'location'</code> sub-list) are mapped to “bins” using <code>numpy</code>’s <code>digitize()</code> function, which is analogous to <code>base::cut()</code>.</li>
</ol>
<p>How can we do this same data manipulation in an idiomatic R fashion? We could certainly create a named list element and use <code>base::cut()</code> to closely match the python approach. However, I prefer to stick with data frames and SQL-ish operations since I think these are much more “natural” for R users.<sup>5</sup></p>
<p>So, going forward with data frames and joins, it’s quickly apparent that we’ll have to do some non-equi joining. <code>{fuzzyjoin}</code> and <a href="https://cran.r-project.org/web/packages/sqldf/index.html"><code>{sqldf}</code></a> offer functionality for such an approach, but <code>{data.table}</code> is really the best option. The only minor inconvenience here is that we have to explicitly coerce our <code>events</code> data frame to a data.table.</p>
<p>We’ll also need a helper, grid-like data frame to assist with the binning. The 600-row <code>grid_xy_yards</code> data frame (30 <code>x</code> bins * 20 <code>y</code> bins) below is essentially a tidy definition of the cells of the grid upon which we are binning the <code>events</code> data. (One can use whatever flavor of <code>crossing()</code>, <code>expand.grid()</code>, <code>seq()</code>, etc. that you prefer to create a data frame like this.)</p>
<p>Visually, this grid looks like this.</p>
<p><img src="https://itsmetoeknee.netlify.app/posts/decomposition-smoothing-soccer/viz_grid_nnmf.png" class="img-fluid"></p>
<p>And if you prefer numbers instead of a chart, see the first 10 rows below.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">grid_xy_yards</span>
<span id="cb4-2"><span class="co" style="color: #5E5E5E;">#&gt; # A tibble: 600 x 5</span></span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;">#&gt;     idx     x      y next_y next_x</span></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;">#&gt;   &lt;int&gt; &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;</span></span>
<span id="cb4-5"><span class="co" style="color: #5E5E5E;">#&gt; 1     1     0  0      4.211  4.138</span></span>
<span id="cb4-6"><span class="co" style="color: #5E5E5E;">#&gt; 2     2     0  4.211  8.421  4.138</span></span>
<span id="cb4-7"><span class="co" style="color: #5E5E5E;">#&gt; 3     3     0  8.421 12.63   4.138</span></span>
<span id="cb4-8"><span class="co" style="color: #5E5E5E;">#&gt; 4     4     0 12.63  16.84   4.138</span></span>
<span id="cb4-9"><span class="co" style="color: #5E5E5E;">#&gt; 5     5     0 16.84  21.05   4.138</span></span>
<span id="cb4-10"><span class="co" style="color: #5E5E5E;">#&gt; 6     6     0 21.05  25.26   4.138</span></span>
<span id="cb4-11"><span class="co" style="color: #5E5E5E;">#&gt; 7     7     0 25.26  29.47   4.138</span></span>
<span id="cb4-12"><span class="co" style="color: #5E5E5E;">#&gt; 8     8     0 29.47  33.68   4.138</span></span>
<span id="cb4-13"><span class="co" style="color: #5E5E5E;">#&gt; 9     9     0 33.68  37.89   4.138</span></span>
<span id="cb4-14"><span class="co" style="color: #5E5E5E;">#&gt; 10    10    0 37.89  42.11   4.138</span></span>
<span id="cb4-15"><span class="co" style="color: #5E5E5E;">#&gt; # ... with 590 more rows</span></span></code></pre></div>
</details>
</div>
<p>Two things to note about this supplementary data frame:</p>
<ol type="1">
<li><p>Cells aren’t evenly spaced integers, i.e.&nbsp;<code>x</code> cells are defined at 0, 4.138, 8.276, …, 80 instead of something like 0, 4, 8, …, 80, and <code>y</code> cells are defined at 0, 4.211, 8.421, …, 120 instead of something like 0, 4, 8, …, 120). That’s simply due to using 30 and 20 instead of 31 and 21 to split up the <code>x</code> and <code>y</code> ranges respectively. I point this out because this SQL-ish approach would have been much easier if these numbers were just integers! We could have done an inner join on an integer grid instead of non-equi-joining upon a grid of floating point numbers. Unfortunately, joining on floating point numbers as keys leads to <a href="https://stackoverflow.com/questions/52207851/how-do-you-join-on-floating-point-columns-in-sql">inconsistent results, simply due to the nature of floating points</a>.<sup>6</sup></p></li>
<li><p>The index <code>idx</code> is important! This will come back into play when we do the NNMF procedure, at which point we’ll “flatten” out our <code>x</code>-<code>y</code> pairs into a 1-d format.</p></li>
</ol>
<p>Ok, on to the actual data joining.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">events_dt <span class="ot" style="color: #003B4F;">&lt;-</span> events <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">drop_na</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> data.table<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">as.data.table</span>()</span>
<span id="cb5-2">grid_xy_yards_dt <span class="ot" style="color: #003B4F;">&lt;-</span> grid_xy_yards <span class="sc" style="color: #5E5E5E;">%&gt;%</span> data.table<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">as.data.table</span>()</span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;"># We don't even have to load `{data.table}` for this to work!</span></span>
<span id="cb5-5">events_binned <span class="ot" style="color: #003B4F;">&lt;-</span> events_dt[grid_xy_yards_dt, on<span class="ot" style="color: #003B4F;">=</span>.(x <span class="sc" style="color: #5E5E5E;">&gt;</span> x, x <span class="sc" style="color: #5E5E5E;">&lt;=</span> next_x, y <span class="sc" style="color: #5E5E5E;">&gt;=</span> y, y <span class="sc" style="color: #5E5E5E;">&lt;</span> next_y)] <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-6">  <span class="fu" style="color: #4758AB;">as_tibble</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-7">  <span class="fu" style="color: #4758AB;">select</span>(player_id, idx, x, y)</span>
<span id="cb5-8">events_binned</span>
<span id="cb5-9"><span class="co" style="color: #5E5E5E;">#&gt; # A tibble: 224,038 x 4</span></span>
<span id="cb5-10"><span class="co" style="color: #5E5E5E;">#&gt;    player_id   idx     x     y</span></span>
<span id="cb5-11"><span class="co" style="color: #5E5E5E;">#&gt;        &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt;</span></span>
<span id="cb5-12"><span class="co" style="color: #5E5E5E;">#&gt;  1      5462     1     0     0</span></span>
<span id="cb5-13"><span class="co" style="color: #5E5E5E;">#&gt;  2      5467     1     0     0</span></span>
<span id="cb5-14"><span class="co" style="color: #5E5E5E;">#&gt;  3      5488     1     0     0</span></span>
<span id="cb5-15"><span class="co" style="color: #5E5E5E;">#&gt;  4      3632     1     0     0</span></span>
<span id="cb5-16"><span class="co" style="color: #5E5E5E;">#&gt;  5      5576     1     0     0</span></span>
<span id="cb5-17"><span class="co" style="color: #5E5E5E;">#&gt;  6      5595     1     0     0</span></span>
<span id="cb5-18"><span class="co" style="color: #5E5E5E;">#&gt;  7      5263     1     0     0</span></span>
<span id="cb5-19"><span class="co" style="color: #5E5E5E;">#&gt;  8      4063     1     0     0</span></span>
<span id="cb5-20"><span class="co" style="color: #5E5E5E;">#&gt;  9      5231     1     0     0</span></span>
<span id="cb5-21"><span class="co" style="color: #5E5E5E;">#&gt; 10      5231     1     0     0</span></span>
<span id="cb5-22"><span class="co" style="color: #5E5E5E;">#&gt; # ... with 224,028 more rows</span></span></code></pre></div>
</details>
</div>
<p>In retrospect, this join was pretty straightforward!</p>
<p>The rest of the code below is just doing the actual tallying.</p>
<ol type="1">
<li>First, we make an intermediate data set <code>grid_players</code>, which is the Cartesian product of all possible cells in the grid and all players in <code>events</code>.</li>
<li>Second, we “add back” missing cells to <code>events_binned</code> using the intermediate data set <code>grid_players</code>.</li>
</ol>
<p>In the end, we end up with a <code>players</code> data frame with 603 <code>player_id</code>s * 30 <code>x</code> bins * 20 <code>y</code> bins = 361,800 rows.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="co" style="color: #5E5E5E;"># This `dummy` column approach is an easy way to do a Cartesian join when the two data frames don't share any column names.</span></span>
<span id="cb6-2">grid_players <span class="ot" style="color: #003B4F;">&lt;-</span> grid_xy_yards <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb6-3">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">dummy =</span> 0L) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb6-4">  <span class="co" style="color: #5E5E5E;"># Cartesian join of all possible cells in the grid and all players in `events`.</span></span>
<span id="cb6-5">  <span class="fu" style="color: #4758AB;">full_join</span>(</span>
<span id="cb6-6">    events <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb6-7">      <span class="fu" style="color: #4758AB;">drop_na</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb6-8">      <span class="fu" style="color: #4758AB;">distinct</span>(player_id) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb6-9">      <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">dummy =</span> 0L),</span>
<span id="cb6-10">    <span class="at" style="color: #657422;">by =</span> <span class="st" style="color: #20794D;">'dummy'</span></span>
<span id="cb6-11">  )</span>
<span id="cb6-12"></span>
<span id="cb6-13">players <span class="ot" style="color: #003B4F;">&lt;-</span> events_binned <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb6-14">  <span class="fu" style="color: #4758AB;">group_by</span>(player_id, x, y, idx) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb6-15">  <span class="fu" style="color: #4758AB;">summarize</span>(<span class="at" style="color: #657422;">n =</span> <span class="fu" style="color: #4758AB;">n</span>()) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb6-16">  <span class="fu" style="color: #4758AB;">ungroup</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb6-17">  <span class="co" style="color: #5E5E5E;"># Rejoin back on the grid to 'add back' cells with empty counts (i.e. `n = 0`).</span></span>
<span id="cb6-18">  <span class="fu" style="color: #4758AB;">full_join</span>(grid_players, <span class="at" style="color: #657422;">by =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'player_id'</span>, <span class="st" style="color: #20794D;">'x'</span>, <span class="st" style="color: #20794D;">'y'</span>, <span class="st" style="color: #20794D;">'idx'</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb6-19">  <span class="fu" style="color: #4758AB;">select</span>(<span class="sc" style="color: #5E5E5E;">-</span>dummy, <span class="sc" style="color: #5E5E5E;">-</span>next_x, <span class="sc" style="color: #5E5E5E;">-</span>next_y) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb6-20">  <span class="fu" style="color: #4758AB;">replace_na</span>(<span class="fu" style="color: #4758AB;">list</span>(<span class="at" style="color: #657422;">n =</span> 0L)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb6-21">  <span class="fu" style="color: #4758AB;">arrange</span>(player_id, x, y)</span>
<span id="cb6-22">players</span>
<span id="cb6-23"><span class="co" style="color: #5E5E5E;">#&gt; # A tibble: 361,800 x 5</span></span>
<span id="cb6-24"><span class="co" style="color: #5E5E5E;">#&gt;    player_id     x      y   idx     n</span></span>
<span id="cb6-25"><span class="co" style="color: #5E5E5E;">#&gt;        &lt;int&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;int&gt; &lt;int&gt;</span></span>
<span id="cb6-26"><span class="co" style="color: #5E5E5E;">#&gt;  1      2941     0  0         1     0</span></span>
<span id="cb6-27"><span class="co" style="color: #5E5E5E;">#&gt;  2      2941     0  4.211     2     0</span></span>
<span id="cb6-28"><span class="co" style="color: #5E5E5E;">#&gt;  3      2941     0  8.421     3     0</span></span>
<span id="cb6-29"><span class="co" style="color: #5E5E5E;">#&gt;  4      2941     0 12.63      4     0</span></span>
<span id="cb6-30"><span class="co" style="color: #5E5E5E;">#&gt;  5      2941     0 16.84      5     0</span></span>
<span id="cb6-31"><span class="co" style="color: #5E5E5E;">#&gt;  6      2941     0 21.05      6     0</span></span>
<span id="cb6-32"><span class="co" style="color: #5E5E5E;">#&gt;  7      2941     0 25.26      7     0</span></span>
<span id="cb6-33"><span class="co" style="color: #5E5E5E;">#&gt;  8      2941     0 29.47      8     0</span></span>
<span id="cb6-34"><span class="co" style="color: #5E5E5E;">#&gt;  9      2941     0 33.68      9     0</span></span>
<span id="cb6-35"><span class="co" style="color: #5E5E5E;">#&gt; 10      2941     0 37.89     10     0</span></span>
<span id="cb6-36"><span class="co" style="color: #5E5E5E;">#&gt; # ... with 361,790 more rows</span></span></code></pre></div>
</details>
</div>
<p>To make this a little bit more tangible, let’s plot Messi’s heatmap. (Is this really a blog post about soccer if it doesn’t mention Messi 😆?)</p>
<p><img src="https://itsmetoeknee.netlify.app/posts/decomposition-smoothing-soccer/viz_43_messi_binned.png" class="img-fluid"></p>
</section>
<section id="non-negative-matrix-factorization-nnmf-with-reticulate-and-sklearn" class="level2">
<h2 class="anchored" data-anchor-id="non-negative-matrix-factorization-nnmf-with-reticulate-and-sklearn">Non-Negative Matrix Factorization (NNMF) with <code>{reticulate}</code> and <code>sklearn</code></h2>
<p>Next up is the actual NNMF calculation. I don’t care if you’re the biggest R <a href="https://www.urbandictionary.com/define.php?term=Stan">stan</a> in the world—you have to admit that the python code to perform the NNMF is quite simple and (dare I say) elegant. The <code>comps=30</code> here means</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;">from</span> sklearn.decomposition <span class="im" style="color: #00769E;">import</span> NMF</span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;"># Flatten individual player matrices into shape=(600,) which is the product of the original shape components (30 by 20)</span></span>
<span id="cb7-4">unraveled <span class="op" style="color: #5E5E5E;">=</span> [np.matrix.flatten(v) <span class="cf" style="color: #003B4F;">for</span> k, v <span class="kw" style="color: #003B4F;">in</span> players.items()]</span>
<span id="cb7-5">comps <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">30</span></span>
<span id="cb7-6">model <span class="op" style="color: #5E5E5E;">=</span> NMF(n_components<span class="op" style="color: #5E5E5E;">=</span>comps, init<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'random'</span>, random_state<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb7-7">W <span class="op" style="color: #5E5E5E;">=</span> model.fit_transform(unraveled)</span></code></pre></div>
</details>
</div>
<p>My understanding is that <code>comps=30</code> is telling the algorithm to reduce our original data (with 603 players) to a lower dimensional space with 30 player “archetypes” that best represent the commonalities among the 603 players.<sup>7</sup> Per Devin, the choice of 30 here is somewhat arbitrary. In practice, one might perform some cross validation to identify what number minimizes some loss function, but that’s beyond the scope of what we’re doing here.</p>
<p>After re-formatting our <code>players</code> data into a wide format—equivalent to the <code>numpy.matrix.flatten()</code> call in the python code—we could use the <code>{NMF}</code> package for an R replication.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;"># Convert from tidy format to wide format (603 rows x 600 columns)</span></span>
<span id="cb8-2">players_mat <span class="ot" style="color: #003B4F;">&lt;-</span> players <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-3">  <span class="fu" style="color: #4758AB;">drop_na</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-4">  <span class="fu" style="color: #4758AB;">select</span>(player_id, idx, n) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-5">  <span class="fu" style="color: #4758AB;">pivot_wider</span>(<span class="at" style="color: #657422;">names_from =</span> idx, <span class="at" style="color: #657422;">values_from =</span> n) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-6">  <span class="fu" style="color: #4758AB;">select</span>(<span class="sc" style="color: #5E5E5E;">-</span>player_id) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-7">  <span class="fu" style="color: #4758AB;">as.matrix</span>()</span>
<span id="cb8-8"></span>
<span id="cb8-9">comps <span class="ot" style="color: #003B4F;">&lt;-</span> 30L</span>
<span id="cb8-10">W <span class="ot" style="color: #003B4F;">&lt;-</span> NMF<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">nmf</span>(NMF<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">rmatrix</span>(players_mat), <span class="at" style="color: #657422;">rank =</span> comps, <span class="at" style="color: #657422;">seed =</span> <span class="dv" style="color: #AD0000;">0</span>, <span class="at" style="color: #657422;">method =</span> <span class="st" style="color: #20794D;">'Frobenius'</span>)</span></code></pre></div>
</details>
</div>
<p>However, I found that the results weren’t all that comparable to the python results. (Perhaps I needed to define the arguments in a different manner.) So why not use <code>{reticulate}</code> and call the <code>sklearn.decomposition.NMF()</code> function to make sure that we exactly emulate the python decomposition?</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">sklearn <span class="ot" style="color: #003B4F;">&lt;-</span> reticulate<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">import</span>(<span class="st" style="color: #20794D;">'sklearn'</span>)</span>
<span id="cb9-2"><span class="co" style="color: #5E5E5E;"># Won't work if `n_components` aren't explicitly defined as integers!</span></span>
<span id="cb9-3">model <span class="ot" style="color: #003B4F;">&lt;-</span> sklearn<span class="sc" style="color: #5E5E5E;">$</span>decomposition<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">NMF</span>(<span class="at" style="color: #657422;">n_components =</span> comps, <span class="at" style="color: #657422;">init =</span> <span class="st" style="color: #20794D;">'random'</span>, <span class="at" style="color: #657422;">random_state =</span> 0L)</span>
<span id="cb9-4">W <span class="ot" style="color: #003B4F;">&lt;-</span> model<span class="sc" style="color: #5E5E5E;">$</span><span class="fu" style="color: #4758AB;">fit_transform</span>(players_mat)</span></code></pre></div>
</details>
</div>
<p>The result includes 30 20x30 matrices—one 30x20 <code>x</code>-<code>y</code> matrix for each of the 30 components (<code>comps</code>). We have some wrangling left to do to gain anything meaningful from this NNMF procedure, but we have something to work with!</p>
</section>
<section id="gaussian-smoothing-with-spatstat" class="level2">
<h2 class="anchored" data-anchor-id="gaussian-smoothing-with-spatstat">Gaussian Smoothing with <code>{spatstat}</code></h2>
<p>The last thing to do is to post-process the NNMF results and, of course, make pretty plots. The python plotting is pretty standard <code>matplotlib</code>, with the exception of the Gaussian smoothing performed on each component’s matrix <code>model.component_</code> in the loop to make sub-plots.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="im" style="color: #00769E;">from</span> scipy.ndimage <span class="im" style="color: #00769E;">import</span> gaussian_filter</span>
<span id="cb10-2"></span>
<span id="cb10-3"><span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">9</span>):</span>
<span id="cb10-4">    <span class="co" style="color: #5E5E5E;"># ... Excerpted</span></span>
<span id="cb10-5">    z <span class="op" style="color: #5E5E5E;">=</span> np.rot90(gaussian_filter(model.components_[i].reshape(x_scale, y_scale), sigma<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">1.5</span>), <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb10-6">    <span class="co" style="color: #5E5E5E;"># ... Excerpted</span></span></code></pre></div>
</details>
</div>
<p>The first 9 smoothed component matrices come out looking like this. <sup>8</sup></p>
<p><img src="https://itsmetoeknee.netlify.app/posts/decomposition-smoothing-soccer/viz_nnmf_dimensions_1to9_py.png" class="img-fluid"></p>
<p>There’s a couple of steps involved to do the same thing in R.</p>
<ol type="1">
<li><p>First, we’ll convert the components matrices to a tidy format, <code>decomp_tidy</code></p></li>
<li><p>Second, we’ll join our tidied components matrices with our tidy grid of cells, <code>grid_xy_yards</code>, and convert our <code>x</code> and <code>y</code> bins to integers in preparation of the matrix operation performed in the subsequent step.</p></li>
<li><p>Lastly, we’ll perform the Gaussian smoothing on nested data frames with a custom function, <code>smoothen_dimension</code>, that wraps <code>spatstat::blur()</code>. This function also maps <code>idx</code> back to field positions (in meters instead of yards) using the supplementary <code>grid_xy_rev_m</code><sup>9</sup> data frame (which is a lot like <code>grid_xy_yards</code>)</p></li>
</ol>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="do" style="color: #5E5E5E;
font-style: italic;">## 1</span></span>
<span id="cb11-2">decomp_tidy <span class="ot" style="color: #003B4F;">&lt;-</span> model<span class="sc" style="color: #5E5E5E;">$</span>components_ <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-3">  <span class="fu" style="color: #4758AB;">as_tibble</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-4">  <span class="co" style="color: #5E5E5E;"># "Un-tidy" tibble with 30 rows (one for each dimension) and 600 columns (one for every `idx`)</span></span>
<span id="cb11-5">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">dimension =</span> <span class="fu" style="color: #4758AB;">row_number</span>()) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-6">  <span class="co" style="color: #5E5E5E;"># Convert to a tidy tibble with dimensions * x * y rows (30 * 30 * 20 = 18,000)</span></span>
<span id="cb11-7">  <span class="fu" style="color: #4758AB;">pivot_longer</span>(<span class="sc" style="color: #5E5E5E;">-</span>dimension, <span class="at" style="color: #657422;">names_to =</span> <span class="st" style="color: #20794D;">'idx'</span>, <span class="at" style="color: #657422;">values_to =</span> <span class="st" style="color: #20794D;">'value'</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-8">  <span class="co" style="color: #5E5E5E;"># The columns from the matrix are named `V1`, `V2`, ... `V600` by default, so convert them to an integer that can be joined on.</span></span>
<span id="cb11-9">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="fu" style="color: #4758AB;">across</span>(idx, <span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">str_remove</span>(.x, <span class="st" style="color: #20794D;">'^V'</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">as.integer</span>()))</span>
<span id="cb11-10"></span>
<span id="cb11-11"><span class="do" style="color: #5E5E5E;
font-style: italic;">## 2</span></span>
<span id="cb11-12">decomp <span class="ot" style="color: #003B4F;">&lt;-</span> decomp_tidy <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-13">  <span class="co" style="color: #5E5E5E;"># Join on our grid of x-y pairs.</span></span>
<span id="cb11-14">  <span class="fu" style="color: #4758AB;">inner_join</span>(</span>
<span id="cb11-15">    <span class="co" style="color: #5E5E5E;"># Using `dense_rank` because we need indexes here (i.e. 1, 2, ..., 30 instead of 0, 4.1, 8.2, ..., 120 for `x`).</span></span>
<span id="cb11-16">    grid_xy_yards <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-17">      <span class="fu" style="color: #4758AB;">select</span>(idx, x, y) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-18">      <span class="fu" style="color: #4758AB;">mutate</span>(<span class="fu" style="color: #4758AB;">across</span>(<span class="fu" style="color: #4758AB;">c</span>(x, y), dense_rank))</span>
<span id="cb11-19">  )</span>
<span id="cb11-20"></span>
<span id="cb11-21"><span class="do" style="color: #5E5E5E;
font-style: italic;">## 3</span></span>
<span id="cb11-22">smoothen_component <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(.data, ...) {</span>
<span id="cb11-23">  mat <span class="ot" style="color: #003B4F;">&lt;-</span> .data <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-24">    <span class="fu" style="color: #4758AB;">select</span>(x, y, value) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-25">    <span class="fu" style="color: #4758AB;">pivot_wider</span>(<span class="at" style="color: #657422;">names_from =</span> x, <span class="at" style="color: #657422;">values_from =</span> value) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-26">    <span class="fu" style="color: #4758AB;">select</span>(<span class="sc" style="color: #5E5E5E;">-</span>y) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-27">    <span class="fu" style="color: #4758AB;">as.matrix</span>()</span>
<span id="cb11-28">  </span>
<span id="cb11-29">  mat_smoothed <span class="ot" style="color: #003B4F;">&lt;-</span> mat <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-30">    spatstat<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">as.im</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-31">    <span class="co" style="color: #5E5E5E;"># Pass `sigma` in here.</span></span>
<span id="cb11-32">    spatstat<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">blur</span>(...) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-33">    <span class="co" style="color: #5E5E5E;"># Could use `spatstat::as.data.frame.im()`, but it converts directly to x,y,value triplet of columns, which is not the format I want.</span></span>
<span id="cb11-34">    <span class="fu" style="color: #4758AB;">pluck</span>(<span class="st" style="color: #20794D;">'v'</span>)</span>
<span id="cb11-35">  </span>
<span id="cb11-36">  res <span class="ot" style="color: #003B4F;">&lt;-</span> mat_smoothed <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-37">    <span class="co" style="color: #5E5E5E;"># Convert 20x30 y-x matrix to tidy format with 20*30 rows.</span></span>
<span id="cb11-38">    <span class="fu" style="color: #4758AB;">as_tibble</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-39">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">y =</span> <span class="fu" style="color: #4758AB;">row_number</span>()) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-40">    <span class="fu" style="color: #4758AB;">pivot_longer</span>(<span class="sc" style="color: #5E5E5E;">-</span>y, <span class="at" style="color: #657422;">names_to =</span> <span class="st" style="color: #20794D;">'x'</span>, <span class="at" style="color: #657422;">values_to =</span> <span class="st" style="color: #20794D;">'value'</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-41">    <span class="co" style="color: #5E5E5E;"># The columns from the matrix are named `V1`, `V2`, ... `V30` by default, so convert them to an integer that can be joined on.</span></span>
<span id="cb11-42">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="fu" style="color: #4758AB;">across</span>(x, <span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">str_remove</span>(.x, <span class="st" style="color: #20794D;">'^V'</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">as.integer</span>())) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-43">    <span class="fu" style="color: #4758AB;">arrange</span>(x, y) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-44">    <span class="co" style="color: #5E5E5E;"># "Re-index" rows with `idx`, ranging from 1 to 600.</span></span>
<span id="cb11-45">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">idx =</span> <span class="fu" style="color: #4758AB;">row_number</span>()) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-46">    <span class="fu" style="color: #4758AB;">select</span>(<span class="sc" style="color: #5E5E5E;">-</span>x, <span class="sc" style="color: #5E5E5E;">-</span>y) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-47">    <span class="co" style="color: #5E5E5E;"># Convert `x` and `y` indexes (i.e. 1, 2, 3, ..., to meters and flip the y-axis).</span></span>
<span id="cb11-48">    <span class="fu" style="color: #4758AB;">inner_join</span>(grid_xy_rev_m) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-49">    <span class="co" style="color: #5E5E5E;"># Re-scale smoothed values to 0-1 range.</span></span>
<span id="cb11-50">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">frac =</span> (value <span class="sc" style="color: #5E5E5E;">-</span> <span class="fu" style="color: #4758AB;">min</span>(value)) <span class="sc" style="color: #5E5E5E;">/</span> (<span class="fu" style="color: #4758AB;">max</span>(value) <span class="sc" style="color: #5E5E5E;">-</span> <span class="fu" style="color: #4758AB;">min</span>(value))) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-51">    <span class="fu" style="color: #4758AB;">ungroup</span>()</span>
<span id="cb11-52">  res</span>
<span id="cb11-53">}</span>
<span id="cb11-54"></span>
<span id="cb11-55">decomp_smooth <span class="ot" style="color: #003B4F;">&lt;-</span> decomp <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-56">  <span class="fu" style="color: #4758AB;">nest</span>(<span class="at" style="color: #657422;">data =</span> <span class="sc" style="color: #5E5E5E;">-</span><span class="fu" style="color: #4758AB;">c</span>(dimension)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-57">  <span class="co" style="color: #5E5E5E;"># `sigma` passed into `...` of `smoothen_component()`. (`data` passed as first argument.)</span></span>
<span id="cb11-58">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">data =</span> <span class="fu" style="color: #4758AB;">map</span>(data, smoothen_component, <span class="at" style="color: #657422;">sigma =</span> <span class="fl" style="color: #AD0000;">1.5</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb11-59">  <span class="fu" style="color: #4758AB;">unnest</span>(data)</span>
<span id="cb11-60">decomp_smooth</span>
<span id="cb11-61"><span class="co" style="color: #5E5E5E;">#&gt; # A tibble: 18,000 x 8</span></span>
<span id="cb11-62"><span class="co" style="color: #5E5E5E;">#&gt;    dimension    value   idx     x     y next_y next_x     frac</span></span>
<span id="cb11-63"><span class="co" style="color: #5E5E5E;">#&gt;        &lt;int&gt;    &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;</span></span>
<span id="cb11-64"><span class="co" style="color: #5E5E5E;">#&gt;  1         1 0.002191     1     0 68     4.211  4.138 0.004569</span></span>
<span id="cb11-65"><span class="co" style="color: #5E5E5E;">#&gt;  2         1 0.004843     2     0 64.42  8.421  4.138 0.01064 </span></span>
<span id="cb11-66"><span class="co" style="color: #5E5E5E;">#&gt;  3         1 0.008334     3     0 60.84 12.63   4.138 0.01863 </span></span>
<span id="cb11-67"><span class="co" style="color: #5E5E5E;">#&gt;  4         1 0.01130      4     0 57.26 16.84   4.138 0.02541 </span></span>
<span id="cb11-68"><span class="co" style="color: #5E5E5E;">#&gt;  5         1 0.01258      5     0 53.68 21.05   4.138 0.02834 </span></span>
<span id="cb11-69"><span class="co" style="color: #5E5E5E;">#&gt;  6         1 0.01208      6     0 50.11 25.26   4.138 0.02719 </span></span>
<span id="cb11-70"><span class="co" style="color: #5E5E5E;">#&gt;  7         1 0.01033      7     0 46.53 29.47   4.138 0.02319 </span></span>
<span id="cb11-71"><span class="co" style="color: #5E5E5E;">#&gt;  8         1 0.008165     8     0 42.95 33.68   4.138 0.01824 </span></span>
<span id="cb11-72"><span class="co" style="color: #5E5E5E;">#&gt;  9         1 0.006156     9     0 39.37 37.89   4.138 0.01364 </span></span>
<span id="cb11-73"><span class="co" style="color: #5E5E5E;">#&gt; 10         1 0.004425    10     0 35.79 42.11   4.138 0.009680</span></span>
<span id="cb11-74"><span class="co" style="color: #5E5E5E;">#&gt; # ... with 17,990 more rows</span></span></code></pre></div>
</details>
</div>
<p>With the data in the proper format, the plotting is pretty straightforward <code>{ggplot2}</code> code (so it’s excerpted).</p>
<p><img src="https://itsmetoeknee.netlify.app/posts/decomposition-smoothing-soccer/viz_nnmf_dimensions_1to9_r_smooth.png" class="img-fluid"></p>
<p>Viola! I would say that our R version of the python plot is very comparable (just by visual inspection). Note that we could achieve a similar visual profile without the smoothing—see below—but the smoothing undoubtedly makes pattern detection a little less ambiguous.</p>
<p><img src="https://itsmetoeknee.netlify.app/posts/decomposition-smoothing-soccer/viz_nnmf_dimensions_1to9_r_unsmooth.png" class="img-fluid"></p>
<p>From the smoothed contours, we can discern several different player profiles (in terms of positioning).</p>
<ul>
<li>Components 1, 5, 9: left back</li>
<li>Components 2: right midfielder</li>
<li>Component 3: attacking right midfielder</li>
<li>Component 4: wide left midfielder</li>
<li>Component 6: central left midfielder</li>
<li>Components 7, 8: goalkeeper</li>
</ul>
<p>The redundancy with left back and goalkeeper is not ideal. That’s certainly something we could fine tune with more experimentation with components. Anyways, the point of this post wasn’t so much about the insights that could be gained (although that’s ultimately what stakeholders would be interested in if this were a “real” analysis).</p>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Translating python code can be challenging, throwing us off from our typical workflow (for me, being <code>{tidyverse}</code>-centric). But hopefully one can see the value in “doing whatever it takes”, even if it means using “non-tidy” R functions (e.g.&nbsp;<code>{data.table}</code>, matrices, etc.) or a different language altogether.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>the go-to package for data manipulation and all SQL-ish things↩︎</p></li>
<li id="fn2"><p>Non-negative matrix factorization may also be abbreviated just as NMF, hence the package name.↩︎</p></li>
<li id="fn3"><p>There’s nothing too interesting about the data retrieval—I’ve essentially just called <code>StatsBombR::FreeCompetitions()</code>, <code>StatsBombR::FreeMatches()</code>,<code>StatsBombR::FreeEvents()</code>, and <code>StatsBombR::allclean()</code> in succession for <code>competition_id = 43</code>.↩︎</p></li>
<li id="fn4"><p>minimally converted from the original JSON format↩︎</p></li>
<li id="fn5"><p>compared to <code>dict</code> and <code>list</code>s or python users↩︎</p></li>
<li id="fn6"><p>A potential solution would be to round the floating point numbers before joining and “restore” them after the join, but that’s just kluge-y and inelegant.↩︎</p></li>
<li id="fn7"><p>I believe the number of components is analogous to the number of components that one would define in performing <a href="https://en.wikipedia.org/wiki/Principal_component_analysis">principal components analysis (PCA)</a>.↩︎</p></li>
<li id="fn8"><p>There is nothing stopping us from plotting all 30 components—and, in fact, Devin does in his notebook—but I think it’s easier to digest a fraction of the components (for pedagogical purposes).↩︎</p></li>
<li id="fn9"><p>StatsBomb data treats the origin as the top-left corner of the pitch, which I find inconvenient for plotting since I prefer the origin to be the bottom left. Thus, this grid also flip the y-axis of the grid, hence the <code>_rev</code> part of the variable name.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>r</category>
  <category>soccer</category>
  <guid>https://itsmetoeknee.netlify.app/posts/decomposition-smoothing-soccer/index.html</guid>
  <pubDate>Wed, 14 Oct 2020 05:00:00 GMT</pubDate>
  <media:content url="https://itsmetoeknee.netlify.app/posts/decomposition-smoothing-soccer/viz_nnmf_dimensions_1to9_r_smooth.png" medium="image" type="image/png" height="96" width="144"/>
</item>
<item>
  <title>Creating a Soccer Pitch Control Model</title>
  <dc:creator>Tony ElHabr</dc:creator>
  <link>https://itsmetoeknee.netlify.app/posts/soccer-pitch-control-r/index.html</link>
  <description><![CDATA[ 



<section id="intro" class="level2">
<h2 class="anchored" data-anchor-id="intro">Intro</h2>
<p>There’s never been a better time to be involved in sports analytics. There is a wealth of open-sourced data and code (not to mention well-researched and public analysis) to digest and use. Both people working for teams and people just doing at as a hobby are publishing new and interesting analyses every day.</p>
<p>In particular, the <a href="https://www.youtube.com/channel/UCUBFJYcag8j2rm_9HkrrA7w">FriendsOfTracking (FOT)</a> group, co-led by Professor and author <a href="ttps://twitter.com/Soccermatics">David Sumpter</a><sup>1</sup> have put together an awesome series of videos on YouTube discussing modern soccer analytics, along with a collection of repositories on GitHub sharing the code shown in videos.</p>
<p><a href="https://twitter.com/EightyFivePoint">Laurie Shaw</a> has shared code that implements the <a href="https://www.youtube.com/watch?v=X9PrwPyolyU">pitch control model</a> described in <a href="https://twitter.com/the_spearman">William Spearman</a>’s paper <a href="http://www.sloansportsconference.com/wp-content/uploads/2018/02/2002.pdf">“Beyond Expected Goals”</a> is interesting to me. The model is different than the one that I used <a href="https://twitter.com/TonyElHabr/status/1304766718468857857?s=20">to create some animations on Twitter</a>. Those were based on the pitch control model described by <a href="https://twitter.com/JaviOnData">Javier Fernandez</a> and <a href="https://twitter.com/lukebornn">Luke Bornn</a> in their paper <a href="http://www.sloansportsconference.com/wp-content/uploads/2018/03/1003.pdf">“Wide Open Spaces”</a> (<a href="https://www.robert-hickman.eu/post/fall_back_in_to_space/">code</a> courtesy of <a href="https://twitter.com/robwhickman">Rob Hickman</a>). (Apologies for the onslaught of links!)</p>
<p>Now, I am not one for language wars—and, in fact, I use python often—but I thought it would be awesome to be able to plot Spearman’s pitch control model directly with <code>{ggplot2}</code> and friends. Thus, I set out to convert Laurie’s code to R, attempting to give it a “native” R feel while I was at it.</p>
<p>Most of the process of translating python to R was relatively straightforward (slicing and dicing data frames and arrays/vectors is just part of data cleaning), so I won’t detail them here. However, there was one part that was particularly interesting—the conversion of a python class object. This was actually the key (and most challenging part) of the conversion process.</p>
<p>There are some great resources for describing how to implement <a href="https://en.wikipedia.org/wiki/Object-oriented_programming">object-orientated programming (OOP)</a> in R, including a couple of chapter’s from <a href="https://twitter.com/hadleywickham">Hadley Wickham</a>’s <a href="https://adv-r.hadley.nz/oo.html">Advanced R book</a> and a <a href="https://blog.earo.me/2019/11/03/practical-guide-to-s3/">very practical write-up</a> from <a href="https://twitter.com/earowang">Earo Wang</a>. Every object-oriented task has its unique aspects, so hopefully my discussion here has something to add to what has already been written on the subject matter.</p>
<p><strong><em>For demonstration purposes, I’m going to walk through my steps for converting the python class object as if I were doing it for the first time.</em></strong></p>
</section>
<section id="constructor" class="level2">
<h2 class="anchored" data-anchor-id="constructor">Constructor</h2>
<p>Below is a stripped down version of Laurie’s code, showing the “essence” of what we need to replicate.<sup>2</sup></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;">class</span> player(<span class="bu" style="color: null;">object</span>):</span>
<span id="cb1-2">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>,player_id,frame):</span>
<span id="cb1-3">        <span class="va" style="color: #111111;">self</span>.<span class="bu" style="color: null;">id</span> <span class="op" style="color: #5E5E5E;">=</span> player_id</span>
<span id="cb1-4">        <span class="va" style="color: #111111;">self</span>.get_position(frame)</span>
<span id="cb1-5">        <span class="va" style="color: #111111;">self</span>.get_velocity(frame)</span>
<span id="cb1-6">        </span>
<span id="cb1-7">    <span class="kw" style="color: #003B4F;">def</span> get_position(<span class="va" style="color: #111111;">self</span>,frame):</span>
<span id="cb1-8">        <span class="va" style="color: #111111;">self</span>.position <span class="op" style="color: #5E5E5E;">=</span> np.array(frame[<span class="va" style="color: #111111;">self</span>.player_id <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">'x'</span>, <span class="va" style="color: #111111;">self</span>.player_id <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">'y'</span>])</span>
<span id="cb1-9">        </span>
<span id="cb1-10">    <span class="kw" style="color: #003B4F;">def</span> get_velocity(<span class="va" style="color: #111111;">self</span>,frame):</span>
<span id="cb1-11">        <span class="va" style="color: #111111;">self</span>.velocity <span class="op" style="color: #5E5E5E;">=</span> np.array(frame[<span class="va" style="color: #111111;">self</span>.player_id <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">'x_v'</span>, <span class="va" style="color: #111111;">self</span>.player_id <span class="op" style="color: #5E5E5E;">+</span> <span class="st" style="color: #20794D;">'y_v'</span>])</span>
<span id="cb1-12">    </span>
<span id="cb1-13">    <span class="kw" style="color: #003B4F;">def</span> tti(<span class="va" style="color: #111111;">self</span>,final_position):</span>
<span id="cb1-14">        reaction_time <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.7</span> <span class="co" style="color: #5E5E5E;"># in s</span></span>
<span id="cb1-15">        vmax <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">5</span> <span class="co" style="color: #5E5E5E;"># in m/s</span></span>
<span id="cb1-16">        reaction_position <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.position <span class="op" style="color: #5E5E5E;">+</span> <span class="va" style="color: #111111;">self</span>.velocity <span class="op" style="color: #5E5E5E;">*</span> reaction_time</span>
<span id="cb1-17">        <span class="va" style="color: #111111;">self</span>.tti <span class="op" style="color: #5E5E5E;">=</span> reaction_time <span class="op" style="color: #5E5E5E;">+</span> np.linalg.norm(final_positon <span class="op" style="color: #5E5E5E;">-</span> reaction_position)<span class="op" style="color: #5E5E5E;">/</span>vmax</span>
<span id="cb1-18"></span>
<span id="cb1-19">    <span class="kw" style="color: #003B4F;">def</span> p_intercept(<span class="va" style="color: #111111;">self</span>,t):</span>
<span id="cb1-20">        tti_sigma <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.45</span></span>
<span id="cb1-21">        den <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">+</span> np.exp(<span class="op" style="color: #5E5E5E;">-</span>np.pi<span class="op" style="color: #5E5E5E;">/</span>np.sqrt(<span class="fl" style="color: #AD0000;">3.0</span>)<span class="op" style="color: #5E5E5E;">/</span>tti_sigma <span class="op" style="color: #5E5E5E;">*</span> (t<span class="op" style="color: #5E5E5E;">-</span><span class="va" style="color: #111111;">self</span>.tti)))</span>
<span id="cb1-22">        <span class="cf" style="color: #003B4F;">return</span> <span class="dv" style="color: #AD0000;">1</span> <span class="op" style="color: #5E5E5E;">/</span> den</span></code></pre></div>
</details>
</div>
<p>Let’s make some notes and come back to these as we develop our R class.</p>
<ol type="1">
<li><p>We need a unique identifier: <code>player_id</code>. This is just a “best practice” thing for object-oriented programming and makes sense given our context. For a sport like soccer, a unique identifier could just be the player’s name, a combination of the team name and the player jersey number, a league unique identifier, etc.</p></li>
<li><p>A single-row data frame <code>frame</code> is passed to several of the methods, including the constructor <code>__init__</code>. This single row data frame is sourced from a much larger <code>tracking</code> data frame, with rows for every 0.04 second time interval (25 frames per second, or one frame per 0.04 seconds) in the game.</p></li>
<li><p>The python code stores both the player’s <code>position</code> and <code>velocity</code> as 2x1 arrays. This works well with the <a href="https://www.w3schools.com/python/gloss_python_assign_value_to_multiple_variables.asp">unpacking</a> that is done in other places in Laurie’s code.</p></li>
<li><p><code>tti</code>, short for “time to intercept (a target location)”, uses the player’s <code>position</code> and <code>velocity</code> to define the attribute <code>tti</code> (not to be confused with the method itself). This implies that <code>position</code> and <code>velocity</code> should be defined before <code>tti()</code> is ever called, as they are in <code>__init__</code>. <code>tti</code> needs the <code>position_final</code> 2x1 array to calculate <code>tti</code> which is not known upon instantiation; rather, <code>tti</code> can only be properly defined when called to do a specific calculation relating the player’s <code>position</code> and <code>velocity</code> (both defined implicitly in the class, without needing user-specification) with a user-supplied <code>position_final</code> pair of x and y values.</p></li>
<li><p><code>p_intercept</code>, short for “probability to intercept (a target location)” depends on <code>tti</code> and an additional parameter <code>t</code>, a user-specified value representing how much time is allotted to reach the ball. Like <code>tti</code>, <code>p_intercept</code> is only “properly” defined when actually doing a calculation on the player’s attributes. Unlike <code>tti</code>, there is no attribute in the <code>player</code> instance that stores this probability; it’s value must be saved in a variable external to the player class if the user wants to use it for something other than an ephemeral calculation.<sup>3</sup></p></li>
</ol>
<p>Time to intercept a “target” location (<code>tti</code>) may not be intuitive to comprehend immediately. The plot<sup>4</sup> below annotates the <code>tti</code> of a “target” location on the pitch (which does <strong>not</strong> have to be where the ball actually is). <code>tti</code> assumes that the player continues moving at their current speed (annotated by the arrows) for <code>reaction_time</code> seconds before running at <code>vmax</code> (full speed) to the target position. <code>tti</code> for each player is independent of the <code>tti</code> of all other players, which is a relatively reasonable assumption. <sup>5</sup></p>
<p><img src="https://itsmetoeknee.netlify.app/posts/soccer-pitch-control-r/viz_tti_ex.png" class="img-fluid"></p>
<p>The probability of reaching the “target” location (<code>p_intercept</code>) is directly related to the player’s <code>tti</code>. Uncertainty about how long it will take the player to reach the target location is quantified by the constant <code>tti_sigma</code> in the calculation. (<code>tti</code> is the mean and <code>tti_sigma</code> is the standard deviation of the distribution for a player’s time to arrive at the target location.)</p>
<p><img src="https://itsmetoeknee.netlify.app/posts/soccer-pitch-control-r/viz_p_intercept_ex_1.png" class="img-fluid"></p>
<p>Notably, this probability is independent of all other players’ probabilities (which explains how it is possible that both players are shown to have probabilities greater than 50% when <code>t = 6</code> above). When adjusting for all players’ probabilities (by dividing by the sum of all probabilities), the numbers change. This probability adjustment is key when we calculate pitch control.</p>
<p><img src="https://itsmetoeknee.netlify.app/posts/soccer-pitch-control-r/viz_p_intercept_ex_2.png" class="img-fluid"></p>
<p>Ok, on to the R code. We’ll be using <a href="https://adv-r.hadley.nz/s3.html">S3</a> and the <a href="https://vctrs.r-lib.org/"><code>{vctrs}</code> package</a> to help create our <code>player</code> class. (As with the python class, I’ve simplified the actual implementation for demonstration purposes.)</p>
<p>First, we start with the constructor <code>new_player()</code>. Note that there is no direct <code>__init__</code> equivalent in R. Here we will make a function that is prefixed with <code>new_</code> and ends with the name of our class (<code>player</code>).</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">new_player <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(</span>
<span id="cb2-2">  <span class="at" style="color: #657422;">player_id =</span> <span class="fu" style="color: #4758AB;">integer</span>(),</span>
<span id="cb2-3">  <span class="at" style="color: #657422;">x =</span> <span class="fu" style="color: #4758AB;">double</span>(),</span>
<span id="cb2-4">  <span class="at" style="color: #657422;">y =</span> <span class="fu" style="color: #4758AB;">double</span>(),</span>
<span id="cb2-5">  <span class="at" style="color: #657422;">x_v =</span> <span class="fu" style="color: #4758AB;">double</span>(),</span>
<span id="cb2-6">  <span class="at" style="color: #657422;">y_v =</span> <span class="fu" style="color: #4758AB;">double</span>()</span>
<span id="cb2-7">) {</span>
<span id="cb2-8">  vctrs<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">new_rcrd</span>(</span>
<span id="cb2-9">    <span class="fu" style="color: #4758AB;">list</span>(</span>
<span id="cb2-10">      <span class="at" style="color: #657422;">player_id =</span> player_id,</span>
<span id="cb2-11">      <span class="at" style="color: #657422;">x =</span> x,</span>
<span id="cb2-12">      <span class="at" style="color: #657422;">y =</span> y,</span>
<span id="cb2-13">      <span class="at" style="color: #657422;">x_v =</span> x_v,</span>
<span id="cb2-14">      <span class="at" style="color: #657422;">y_v =</span> y_v,</span>
<span id="cb2-15">      <span class="at" style="color: #657422;">tti =</span> <span class="sc" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span> <span class="co" style="color: #5E5E5E;"># dummy value</span></span>
<span id="cb2-16">    ),</span>
<span id="cb2-17">    <span class="at" style="color: #657422;">class =</span> <span class="st" style="color: #20794D;">'player'</span></span>
<span id="cb2-18">  )</span>
<span id="cb2-19">}</span></code></pre></div>
</details>
</div>
<p>Now let’s reflect upon our prior notes.</p>
<ol type="1">
<li><p>We have the <code>player_id</code> in this constructor.</p></li>
<li><p>We don’t pass the data frame <code>tracking</code> here. We’ll do it in our helper function. We might say that our constructor is “low-level”, not intended for the user to call directly.</p></li>
<li><p>We split the position and velocity vectors into their individual x and y components, resulting in four total variables instead of two. I don’t think a vector (unnamed or named), list, or matrix are particularly compelling data types to use for an x-y pair of values in R. None natively support unpacking (although R vectors do have some form of “broadcasting” with their recycling behavior).</p></li>
<li><p>We assign a “dummy” value (-1) to <code>tti</code> when initializing the class instance. We will have a method to update <code>tti</code> based on x and y components.</p></li>
<li><p>Like <code>tti</code>, we will need a separate <code>p_intercept</code> method to be used to calculate the probabililty of intercepting a ball given a player’s position, speed, and the final position of the ball (all fed as inputs to <code>tti</code>), as well as the additional user-specified <code>t</code>, representing how much time is allotted to reach the ball.</p></li>
</ol>
</section>
<section id="validator" class="level2">
<h2 class="anchored" data-anchor-id="validator">Validator</h2>
<p>Let’s proceed by creating a validator function to, you guessed it, validate fields in the <code>player</code> class. It is good practice to check the values used to construct the class. The python code did not have any validation like this, but I don’t think it was ever expected to be extremely robust to any user input.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">validate_player <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(player) {</span>
<span id="cb3-2">  vctrs<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">vec_assert</span>(vctrs<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">field</span>(player, <span class="st" style="color: #20794D;">'player_id'</span>), <span class="fu" style="color: #4758AB;">integer</span>())</span>
<span id="cb3-3">  vctrs<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">vec_assert</span>(vctrs<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">field</span>(player, <span class="st" style="color: #20794D;">'x'</span>), <span class="fu" style="color: #4758AB;">double</span>())</span>
<span id="cb3-4">  vctrs<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">vec_assert</span>(vctrs<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">field</span>(player, <span class="st" style="color: #20794D;">'y'</span>), <span class="fu" style="color: #4758AB;">double</span>())</span>
<span id="cb3-5">  vctrs<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">vec_assert</span>(vctrs<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">field</span>(player, <span class="st" style="color: #20794D;">'tti'</span>), <span class="fu" style="color: #4758AB;">double</span>())</span>
<span id="cb3-6">  player</span>
<span id="cb3-7">}</span></code></pre></div>
</details>
</div>
<p>Note that we could have simply done this validation in the constructor function, but I think it makes sense to put the validation in its own function so that the constructor is more direct (especially if the validation checks are complex).</p>
</section>
<section id="helper" class="level2">
<h2 class="anchored" data-anchor-id="helper">Helper</h2>
<p>Finally, we’ll create a helper <code>player()</code> function, which is our “user-facing” function that we expect/want users to use to instantiate objects.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">player <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(player_id, frame, tracking) {</span>
<span id="cb4-2">    </span>
<span id="cb4-3">    player_id <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">as.integer</span>(player_id)</span>
<span id="cb4-4">    frame <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">as.integer</span>(frame)</span>
<span id="cb4-5"></span>
<span id="cb4-6">    assertthat<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">assert_that</span>(<span class="fu" style="color: #4758AB;">is.data.frame</span>(tracking))</span>
<span id="cb4-7">    nms_req <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'player_id'</span>, <span class="st" style="color: #20794D;">'frame'</span>, <span class="st" style="color: #20794D;">'x'</span>, <span class="st" style="color: #20794D;">'y'</span>, <span class="st" style="color: #20794D;">'x_v'</span>, <span class="st" style="color: #20794D;">'y_v'</span>)</span>
<span id="cb4-8">    assertthat<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">assert_that</span>(<span class="fu" style="color: #4758AB;">all</span>(nms_req <span class="sc" style="color: #5E5E5E;">%in%</span> <span class="fu" style="color: #4758AB;">names</span>(tracking)))</span>
<span id="cb4-9">    </span>
<span id="cb4-10">    <span class="co" style="color: #5E5E5E;"># `!!` to make sure that we filter using the integer values, not the column itself.</span></span>
<span id="cb4-11">    tracking_filt <span class="ot" style="color: #003B4F;">&lt;-</span> tracking <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">filter</span>(player_id <span class="sc" style="color: #5E5E5E;">==</span> <span class="sc" style="color: #5E5E5E;">!!</span>player_id, frame <span class="sc" style="color: #5E5E5E;">==</span> <span class="sc" style="color: #5E5E5E;">!!</span>frame)</span>
<span id="cb4-12">    assertthat<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">assert_that</span>(<span class="fu" style="color: #4758AB;">nrow</span>(tracking_filt) <span class="sc" style="color: #5E5E5E;">==</span> 1L)</span>
<span id="cb4-13">    </span>
<span id="cb4-14">    player <span class="ot" style="color: #003B4F;">&lt;-</span></span>
<span id="cb4-15">      <span class="fu" style="color: #4758AB;">new_player</span>(</span>
<span id="cb4-16">        <span class="at" style="color: #657422;">player_id =</span> player_id,</span>
<span id="cb4-17">        <span class="at" style="color: #657422;">x =</span> tracking_filt[[<span class="st" style="color: #20794D;">'x'</span>]],</span>
<span id="cb4-18">        <span class="at" style="color: #657422;">y =</span> tracking_filt[[<span class="st" style="color: #20794D;">'y'</span>]],</span>
<span id="cb4-19">        <span class="at" style="color: #657422;">x_v =</span> tracking_filt[[<span class="st" style="color: #20794D;">'x_v'</span>]],</span>
<span id="cb4-20">        <span class="at" style="color: #657422;">y_v =</span> tracking_filt[[<span class="st" style="color: #20794D;">'y_v'</span>]]</span>
<span id="cb4-21">      )</span>
<span id="cb4-22">    <span class="fu" style="color: #4758AB;">validate_player</span>(player)</span>
<span id="cb4-23">  }</span></code></pre></div>
</details>
</div>
<p>Note the following:</p>
<ul>
<li>We coerce <code>player_id</code> and <code>frame</code> to integers instead of doubles (particularly since they are expected to be integers in the constructor). This ensures that the new <code>player</code> is instantiated properly by the constructor and passes our validation.</li>
<li>We pass in our entire <code>tracking</code> data frame (that has rows for every 0.04 second interval in the game), as well as the <code>frame</code> to slice out of it. (<code>player_id</code> is also used to filter <code>tracking</code>.) This makes it convenient for user to instantiate new <code>player</code> objects when operating on the <code>tracking</code> data frame. There is no need to extract the singular initial position and velocity components “manually”; instead, the helper function does it for the user.</li>
</ul>
</section>
<section id="aside" class="level2">
<h2 class="anchored" data-anchor-id="aside">Aside</h2>
<p>R’s S3 framework is not a formal OOP framework (not even close really). Note that it does not have a reserved keyword to represent the instance of the class like <code>self</code> in python. Also, it is not actually necessary for most of what is done above (with the constructor, validator, and helper).</p>
<p>For example, we don’t actually have to create a formal-ish constructor prefixed with <code>new_</code>. We don’t even need a constructor function at all in S3. We could do something like <code>class(var) &lt;- 'player'</code> to create a a <code>player</code> object. Of course, this is prone to errors down the line, so we don’t do that. Likewise with the validator and helper functions. The point of these constructs is to add clarity to our class code. They aren’t strictly necessary.</p>
</section>
<section id="printing" class="level2">
<h2 class="anchored" data-anchor-id="printing">Printing</h2>
<p>Let’s do one more thing for our <code>player</code> class—create a custom print method. (Writing a custom print method is not required whatsoever, but it can be very helpful for debugging.) If we weren’t using <code>{vctrs}</code> and just S3, we would do this by writing a <code>print.player</code> function. However, <code>{vctrs}</code> provides a “pretty” header for us auto-magically (that looks like <code>&lt;player[1]&gt;</code>) if we use it to write our print method.</p>
<p>To take advantage of the pretty-printing functionality offered by <code>{vctrs}</code>, we write a <code>format.player()</code> method that will be called by a subclass of the generic <code>vctrs::obj_print_data</code> method<sup>6</sup>, which itself is called whenever we print out an object (whether explicitly with <code>print</code> or just by typing the name of the variable representing our <code>player</code> instance). We’ll add the player’s position and velocity components to the print out.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">format.player <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(player, ...) {</span>
<span id="cb5-2">  <span class="cf" style="color: #003B4F;">if</span>(vctrs<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">field</span>(player, <span class="st" style="color: #20794D;">'in_frame'</span>)) {</span>
<span id="cb5-3">    suffix <span class="ot" style="color: #003B4F;">&lt;-</span> </span>
<span id="cb5-4">      <span class="fu" style="color: #4758AB;">sprintf</span>(</span>
<span id="cb5-5">        <span class="st" style="color: #20794D;">'with `position = (%.2f, %.2f)` and `velocity = &lt;%.1f, %.1f&gt;`'</span>, </span>
<span id="cb5-6">        vctrs<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">field</span>(player, <span class="st" style="color: #20794D;">'player_id'</span>), </span>
<span id="cb5-7">        vctrs<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">field</span>(player, <span class="st" style="color: #20794D;">'y'</span>), </span>
<span id="cb5-8">        vctrs<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">field</span>(player, <span class="st" style="color: #20794D;">'x_v'</span>),</span>
<span id="cb5-9">        vctrs<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">field</span>(player, <span class="st" style="color: #20794D;">'y_v'</span>)</span>
<span id="cb5-10">      )</span>
<span id="cb5-11">  } <span class="cf" style="color: #003B4F;">else</span> {</span>
<span id="cb5-12">    suffix <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">'is not on the pitch'</span></span>
<span id="cb5-13">  }</span>
<span id="cb5-14">  prefix <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sprintf</span>(<span class="st" style="color: #20794D;">'`player_id = %s` '</span>, vctrs<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">field</span>(player, <span class="st" style="color: #20794D;">'player_id'</span>))</span>
<span id="cb5-15">  msg <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">sprintf</span>(<span class="st" style="color: #20794D;">'%s%s'</span>, prefix, suffix)</span>
<span id="cb5-16">  <span class="fu" style="color: #4758AB;">paste</span>(msg, <span class="at" style="color: #657422;">sep =</span> <span class="st" style="color: #20794D;">'</span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;">'</span>)</span>
<span id="cb5-17">}</span>
<span id="cb5-18"></span>
<span id="cb5-19">obj_print_data.player <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(player) {</span>
<span id="cb5-20">  <span class="fu" style="color: #4758AB;">cat</span>(<span class="fu" style="color: #4758AB;">format</span>(player), <span class="at" style="color: #657422;">sep =</span> <span class="st" style="color: #20794D;">'</span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;">'</span>)</span>
<span id="cb5-21">}</span></code></pre></div>
</details>
</div>
</section>
<section id="basic-usage" class="level2">
<h2 class="anchored" data-anchor-id="basic-usage">Basic Usage</h2>
<p>Ok, so that is all fine and dandy, but how would we go about instantiating <code>player</code>s in a normal workflow?</p>
<p>Let’s say that we want to calculate the pitch control for a single <code>frame</code> in the <code>tracking</code> data (called <code>tracking_start</code> below).<sup>7</sup></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">tracking_start</span>
<span id="cb6-2"><span class="co" style="color: #5E5E5E;">#&gt; # A tibble: 26 x 9</span></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;">#&gt;    frame ball_x ball_y side  player_id     x     y   x_v    y_v</span></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;">#&gt;    &lt;int&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;     &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;</span></span>
<span id="cb6-5"><span class="co" style="color: #5E5E5E;">#&gt;  1 53027  93.71  24.56 home          1 90.72 39.37 5.906 -3.985</span></span>
<span id="cb6-6"><span class="co" style="color: #5E5E5E;">#&gt;  2 53027  93.71  24.56 home          2 95.10 27.14 1.5   -2.023</span></span>
<span id="cb6-7"><span class="co" style="color: #5E5E5E;">#&gt;  3 53027  93.71  24.56 home          3 96.01 23.32 1.418  2.395</span></span>
<span id="cb6-8"><span class="co" style="color: #5E5E5E;">#&gt;  4 53027  93.71  24.56 home          4 92.39 15.64 1.005  3.473</span></span>
<span id="cb6-9"><span class="co" style="color: #5E5E5E;">#&gt;  5 53027  93.71  24.56 home          5 83.96 24.69 4.238  1.2  </span></span>
<span id="cb6-10"><span class="co" style="color: #5E5E5E;">#&gt;  6 53027  93.71  24.56 home          6 82.19 35.63 3.893 -0.619</span></span>
<span id="cb6-11"><span class="co" style="color: #5E5E5E;">#&gt;  7 53027  93.71  24.56 home          7 85.79 17.34 1.703  1.523</span></span>
<span id="cb6-12"><span class="co" style="color: #5E5E5E;">#&gt;  8 53027  93.71  24.56 home          8 76.06 50.16 2.018 -0.493</span></span>
<span id="cb6-13"><span class="co" style="color: #5E5E5E;">#&gt;  9 53027  93.71  24.56 home          9 61.22 25.35 0.863 -0.77 </span></span>
<span id="cb6-14"><span class="co" style="color: #5E5E5E;">#&gt; 10 53027  93.71  24.56 home         10 59.69 35.10 0.9   -0.573</span></span>
<span id="cb6-15"><span class="co" style="color: #5E5E5E;">#&gt; # ... with 16 more rows</span></span></code></pre></div>
</details>
</div>
<p>Let’s convert players with id’s 10 through 12 (on the home team) to <code>player</code> instances and see how they look when printed out.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">10L<span class="sc" style="color: #5E5E5E;">:</span>12L <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">map</span>(<span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">player</span>(<span class="at" style="color: #657422;">player_id =</span> .x, <span class="at" style="color: #657422;">frame =</span> 53027L, <span class="at" style="color: #657422;">tracking =</span> tracking_start))</span>
<span id="cb7-2"><span class="co" style="color: #5E5E5E;">#&gt; [[1]]</span></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;">#&gt; &lt;player[1]&gt;</span></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;">#&gt; `player_id = 10` with `position = (10.00, 35.09)` and `velocity = &lt;0.9, -0.6&gt;`</span></span>
<span id="cb7-5"><span class="co" style="color: #5E5E5E;">#&gt; </span></span>
<span id="cb7-6"><span class="co" style="color: #5E5E5E;">#&gt; [[2]]</span></span>
<span id="cb7-7"><span class="co" style="color: #5E5E5E;">#&gt; &lt;player[1]&gt;</span></span>
<span id="cb7-8"><span class="co" style="color: #5E5E5E;">#&gt; `player_id = 11` with `position = (11.00, 32.28)` and `velocity = &lt;-0.3, 0.6&gt;`</span></span>
<span id="cb7-9"><span class="co" style="color: #5E5E5E;">#&gt; </span></span>
<span id="cb7-10"><span class="co" style="color: #5E5E5E;">#&gt; [[3]]</span></span>
<span id="cb7-11"><span class="co" style="color: #5E5E5E;">#&gt; &lt;player[1]&gt;</span></span>
<span id="cb7-12"><span class="co" style="color: #5E5E5E;">#&gt; `player_id = 12` is not on the pitch</span></span></code></pre></div>
</details>
</div>
</section>
<section id="pseudo-encapsulation" class="level2">
<h2 class="anchored" data-anchor-id="pseudo-encapsulation">Pseudo-Encapsulation</h2>
<p>We still need to implement analogues for the <code>tti</code> and <code>p_intercept</code> methods in the python <code>player</code> class. Starting with <code>tti</code>, let’s use <a href="https://www.w3schools.com/java/java_encapsulation.asp">some pseudo-encapsulation (with getters and setters)</a> for a player’s <code>tti</code> value.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;"># Frobenious norm</span></span>
<span id="cb8-2">euclidean_norm <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(x1, x2, y1, y2) {</span>
<span id="cb8-3">  m <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">matrix</span>(<span class="fu" style="color: #4758AB;">c</span>(x1, y1)) <span class="sc" style="color: #5E5E5E;">-</span> <span class="fu" style="color: #4758AB;">matrix</span>(<span class="fu" style="color: #4758AB;">c</span>(x2, y2))</span>
<span id="cb8-4">  <span class="fu" style="color: #4758AB;">sqrt</span>(<span class="fu" style="color: #4758AB;">sum</span>(m<span class="sc" style="color: #5E5E5E;">^</span><span class="dv" style="color: #AD0000;">2</span>))</span>
<span id="cb8-5">}</span>
<span id="cb8-6"></span>
<span id="cb8-7">.get_tti.player <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(player, x2, y2) {</span>
<span id="cb8-8">  ri <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fl" style="color: #AD0000;">0.7</span> <span class="co" style="color: #5E5E5E;"># in s</span></span>
<span id="cb8-9">  vmax <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">5</span> <span class="co" style="color: #5E5E5E;"># in m/s</span></span>
<span id="cb8-10">  x1 <span class="ot" style="color: #003B4F;">&lt;-</span> vctrs<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">field</span>(player, <span class="st" style="color: #20794D;">'x'</span>) <span class="sc" style="color: #5E5E5E;">+</span> vctrs<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">field</span>(player, <span class="st" style="color: #20794D;">'x_v'</span>) <span class="sc" style="color: #5E5E5E;">*</span> ri</span>
<span id="cb8-11">  y1 <span class="ot" style="color: #003B4F;">&lt;-</span> vctrs<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">field</span>(player, <span class="st" style="color: #20794D;">'y'</span>) <span class="sc" style="color: #5E5E5E;">+</span> vctrs<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">field</span>(player, <span class="st" style="color: #20794D;">'y_v'</span>) <span class="sc" style="color: #5E5E5E;">*</span> ri</span>
<span id="cb8-12">  ri <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">euclidean_norm</span>(x1, x2, y1, y2) <span class="sc" style="color: #5E5E5E;">/</span> vmax</span>
<span id="cb8-13">}</span>
<span id="cb8-14"></span>
<span id="cb8-15">.msg_cls_err <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(player, f) {</span>
<span id="cb8-16">  cls <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">class</span>(player)[<span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb8-17">  <span class="fu" style="color: #4758AB;">sprintf</span>(<span class="st" style="color: #20794D;">'`%s()` doesn</span><span class="sc" style="color: #5E5E5E;">\'</span><span class="st" style="color: #20794D;">t know how to handle class `%s`!'</span>, f, cls) </span>
<span id="cb8-18">}</span>
<span id="cb8-19"></span>
<span id="cb8-20">.get_tti.default <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(player, ...) {</span>
<span id="cb8-21">  <span class="fu" style="color: #4758AB;">stop</span>(<span class="fu" style="color: #4758AB;">.msg_cls_err</span>(player, <span class="st" style="color: #20794D;">'.get_tti'</span>), <span class="at" style="color: #657422;">call. =</span> <span class="cn" style="color: #8f5902;">FALSE</span>)</span>
<span id="cb8-22">}</span>
<span id="cb8-23"></span>
<span id="cb8-24">.get_tti <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(player, ...) {</span>
<span id="cb8-25">  <span class="fu" style="color: #4758AB;">UseMethod</span>(<span class="st" style="color: #20794D;">'.get_tti'</span>)</span>
<span id="cb8-26">}</span>
<span id="cb8-27"></span>
<span id="cb8-28"><span class="st" style="color: #20794D;">`</span><span class="at" style="color: #657422;">.set_tti&lt;-.player</span><span class="st" style="color: #20794D;">`</span> <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(player, value) {</span>
<span id="cb8-29">  vctrs<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">field</span>(player, <span class="st" style="color: #20794D;">'tti'</span>) <span class="ot" style="color: #003B4F;">&lt;-</span> value</span>
<span id="cb8-30">  player</span>
<span id="cb8-31">}</span>
<span id="cb8-32"></span>
<span id="cb8-33"><span class="st" style="color: #20794D;">`</span><span class="at" style="color: #657422;">.set_tti&lt;-.default</span><span class="st" style="color: #20794D;">`</span> <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(player, ...) {</span>
<span id="cb8-34">  <span class="fu" style="color: #4758AB;">stop</span>(<span class="fu" style="color: #4758AB;">.msg_cls_err</span>(player, <span class="st" style="color: #20794D;">'.set_tti'</span>), <span class="at" style="color: #657422;">call. =</span> <span class="cn" style="color: #8f5902;">FALSE</span>)</span>
<span id="cb8-35">}</span>
<span id="cb8-36"></span>
<span id="cb8-37"><span class="st" style="color: #20794D;">`</span><span class="at" style="color: #657422;">.set_tti&lt;-</span><span class="st" style="color: #20794D;">`</span> <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(player, ...) {</span>
<span id="cb8-38">  <span class="fu" style="color: #4758AB;">UseMethod</span>(<span class="st" style="color: #20794D;">'.set_tti&lt;-'</span>)</span>
<span id="cb8-39">}</span></code></pre></div>
</details>
</div>
<p>There’s a couple of things going on here:</p>
<ul>
<li>The <code>.get_tti</code> and <code>.set_tti</code> functions that call <code>UseMethod</code> are true S3 generics that perform method dispatch, i.e.&nbsp;find the correct method for the object passed to the generic (based on the class of the object). The <code>.get_tti.player</code> and <code>.set_tti.player</code> with the <code>.player</code> “suffix” so that they only work in their defined manners when passed in a <code>player</code> instance. (They won’t be called with an object that is not of the <code>player</code> class.)</li>
<li>The ellipses (<code>...</code>) in the S3 generic function signatures may be a bit mysterious since they aren’t passed explicitly to <code>UseMethod</code>. Any non-<code>player</code> arguments are captured in these ellipses and passed to whatever method that is called from the generic (e.g.&nbsp;<code>.get_tti.player</code> method called from the <code>.get_tti</code> generic). For <code>.get_tti</code>, the ellipses is intended to capture <code>x2</code> and <code>y2</code>, and for <code>.set_tti</code>, it captures <code>value</code>.</li>
<li>We must use the “strange” syntax <code>.set_tti&lt;-.player</code> (instead of just <code>.set_tti.player</code>, which may seem more “natural”) in order to update an attribute in an already instantiated class. <sup>8</sup></li>
<li>We define the function <code>euclidean_norm()</code> outside of <code>.get_tti.player</code> simply because it is not something that is specific to the time to intercept calculation for a player; it can work with any two pairs of x and y coordinates.<sup>9</sup></li>
<li><code>ri</code> and <code>vmax</code>, representing a player’s reaction time and a player’s maximum velocity respectively, are constants defined in the Spearman paper. We could change these if we wanted to, or even make them dynamic (i.e.&nbsp;configurable via other function parameters, or even at instantiation time).</li>
</ul>
<p>To really complete our getter and setter methods for <code>tti</code>, we should write methods to handle the case when a non-<code>player</code> object is passed to them. The generic <code>.get_tti</code> and <code>.set_tti</code> methods will dispatch to these functions if the object passed to them (the first argument named <code>player</code>) doesn’t actually inherit from the <code>player</code> class.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">.get_tti.default <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(player, ...) {</span>
<span id="cb9-2">  <span class="fu" style="color: #4758AB;">stop</span>(<span class="fu" style="color: #4758AB;">.msg_cls_err</span>(player, <span class="st" style="color: #20794D;">'.get_tti'</span>), <span class="at" style="color: #657422;">call. =</span> <span class="cn" style="color: #8f5902;">FALSE</span>)</span>
<span id="cb9-3">}</span>
<span id="cb9-4"></span>
<span id="cb9-5">.set_tti.default <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(player, ...) {</span>
<span id="cb9-6">  <span class="fu" style="color: #4758AB;">stop</span>(<span class="fu" style="color: #4758AB;">.msg_cls_err</span>(player, <span class="st" style="color: #20794D;">'.get_tti'</span>), <span class="at" style="color: #657422;">call. =</span> <span class="cn" style="color: #8f5902;">FALSE</span>)</span>
<span id="cb9-7">}</span></code></pre></div>
</details>
</div>
<p>Let’s see how our pseudo-encapsulation looks in action.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">players <span class="ot" style="color: #003B4F;">&lt;-</span> 8L<span class="sc" style="color: #5E5E5E;">:</span>10L <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">map</span>(<span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">player</span>(<span class="at" style="color: #657422;">player_id =</span> .x, <span class="at" style="color: #657422;">frame =</span> 53027L, <span class="at" style="color: #657422;">tracking =</span> tracking_start))</span>
<span id="cb10-2"><span class="fu" style="color: #4758AB;">map</span>(players, <span class="sc" style="color: #5E5E5E;">~</span>vctrs<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">field</span>(.x, <span class="st" style="color: #20794D;">'tti'</span>))</span>
<span id="cb10-3"><span class="co" style="color: #5E5E5E;">#&gt; [[1]]</span></span>
<span id="cb10-4"><span class="co" style="color: #5E5E5E;">#&gt; [1] -1</span></span>
<span id="cb10-5"><span class="co" style="color: #5E5E5E;">#&gt; </span></span>
<span id="cb10-6"><span class="co" style="color: #5E5E5E;">#&gt; [[2]]</span></span>
<span id="cb10-7"><span class="co" style="color: #5E5E5E;">#&gt; [1] -1</span></span>
<span id="cb10-8"><span class="co" style="color: #5E5E5E;">#&gt; </span></span>
<span id="cb10-9"><span class="co" style="color: #5E5E5E;">#&gt; [[3]]</span></span>
<span id="cb10-10"><span class="co" style="color: #5E5E5E;">#&gt; [1] -1</span></span></code></pre></div>
</details>
</div>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">target_x <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">94</span></span>
<span id="cb11-2">target_y <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">63</span></span>
<span id="cb11-3"><span class="cf" style="color: #003B4F;">for</span>(i <span class="cf" style="color: #003B4F;">in</span> <span class="fu" style="color: #4758AB;">seq_along</span>(players)) {</span>
<span id="cb11-4">  value <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">.get_tti</span>(players[[i]], <span class="at" style="color: #657422;">x2 =</span> target_x, <span class="at" style="color: #657422;">y2 =</span> target_y)</span>
<span id="cb11-5">  <span class="fu" style="color: #4758AB;">.set_tti</span>(players[[i]]) <span class="ot" style="color: #003B4F;">&lt;-</span> value</span>
<span id="cb11-6">}</span>
<span id="cb11-7"><span class="fu" style="color: #4758AB;">map</span>(players, <span class="sc" style="color: #5E5E5E;">~</span>vctrs<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">field</span>(.x, <span class="st" style="color: #20794D;">'tti'</span>))</span>
<span id="cb11-8"><span class="co" style="color: #5E5E5E;">#&gt; [[1]]</span></span>
<span id="cb11-9"><span class="co" style="color: #5E5E5E;">#&gt; [1] 4.92839</span></span>
<span id="cb11-10"><span class="co" style="color: #5E5E5E;">#&gt; </span></span>
<span id="cb11-11"><span class="co" style="color: #5E5E5E;">#&gt; [[2]]</span></span>
<span id="cb11-12"><span class="co" style="color: #5E5E5E;">#&gt; [1] 10.6878</span></span>
<span id="cb11-13"><span class="co" style="color: #5E5E5E;">#&gt; </span></span>
<span id="cb11-14"><span class="co" style="color: #5E5E5E;">#&gt; [[3]]</span></span>
<span id="cb11-15"><span class="co" style="color: #5E5E5E;">#&gt; [1] 9.49904</span></span></code></pre></div>
</details>
</div>
<p>Note how the player <code>tti</code> values changed after we defined them for a specified <code>target_x</code> and <code>target_y</code>.</p>
<p>Our approach to <code>p_intercept</code> is very similar to that for <code>tti</code>, so I don’t show most of it here. As before, we define getters and setters, as well as generics for the class (the intended target of method dispatch), as well as a default class to handle unexpected inputs. Probably the only interesting part is the calculation itself, as shown below. If you compare it to the <code>p_intercept</code> method in the python object definition, you’ll see it’s basically identical.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">.get_p_intercept.player <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(player, t) {</span>
<span id="cb12-2">  tti_sigma <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fl" style="color: #AD0000;">0.45</span></span>
<span id="cb12-3">  den <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">1</span> <span class="sc" style="color: #5E5E5E;">+</span> <span class="fu" style="color: #4758AB;">exp</span>((<span class="sc" style="color: #5E5E5E;">-</span>base<span class="sc" style="color: #5E5E5E;">::</span>pi <span class="sc" style="color: #5E5E5E;">/</span> <span class="fu" style="color: #4758AB;">sqrt</span>(<span class="dv" style="color: #AD0000;">3</span>) <span class="sc" style="color: #5E5E5E;">/</span> tti_sigma) <span class="sc" style="color: #5E5E5E;">*</span> (t <span class="sc" style="color: #5E5E5E;">-</span> vctrs<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">field</span>(player, <span class="st" style="color: #20794D;">'tti'</span>)))</span>
<span id="cb12-4">  <span class="dv" style="color: #AD0000;">1</span> <span class="sc" style="color: #5E5E5E;">/</span> den</span>
<span id="cb12-5">}</span></code></pre></div>
</details>
</div>
<p>There is certainly more to show, especially for what is needed to calculate pitch control. (We need to integrate probabilities across all players over time, and do it for the entire pitch.) Nonetheless, the <code>player</code> class and the pseudo-encapsulation that we’ve implemented with S3 and <code>{vctrs}</code> is really the key component underlying the whole pitch control calculation.</p>
</section>
<section id="advanced-usage" class="level2">
<h2 class="anchored" data-anchor-id="advanced-usage">Advanced Usage</h2>
<p>To really motivate the reader, let’s see what this implementation allows us to do.</p>
<p>First, let’s emulate the pitch control plot of event 823, which is a pass by the away (blue) team in the home (red) team’s penalty area preceding a successful shot.</p>
<p><img src="https://itsmetoeknee.netlify.app/posts/soccer-pitch-control-r/pc_823_r.png" class="img-fluid"></p>
<p>Compare this to the python version.</p>
<p><img src="https://itsmetoeknee.netlify.app/posts/soccer-pitch-control-r/pc_822_python.png" class="img-fluid"></p>
<p>It’s not a perfect replication, but I think it’s very close overall.</p>
<p>Second, let’s replicate the <a href="http://www.sloansportsconference.com/wp-content/uploads/2019/02/Decomposing-the-Immeasurable-Sport.pdf">expected possession value (EPV)</a> plot of the same event, including the EPV added by the pass.</p>
<p><img src="https://itsmetoeknee.netlify.app/posts/soccer-pitch-control-r/epv_823_r.png" class="img-fluid"></p>
<p>Again, we can compare this plot to the python equivalent.</p>
<p><img src="https://itsmetoeknee.netlify.app/posts/soccer-pitch-control-r/epv_822_python.png" class="img-fluid"></p>
<p>Cool, my R version seems to be very close to the python original. We do have a small discrepancy in the EPV added calculation. (This EPV is actually an “expected” EPV calculation that uses pitch control to weight the pre-learned EPV grid). I believe this is probably due to discrepancies in the integration done in the pitch control calculation and not due to a significant code issue.</p>
<p>The code to prepare the data for these plots gets more complex, which is why I have excluded it here.<sup>10</sup> However, none of it is unreasonably difficult to understand or implement once we have a properly defined <code>player</code> object.</p>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Thus, we see that there is a huge payoff to creating a sound and robust <code>player</code> object—we can calculate pitch control and EPV, and feed them into pretty visualizations that can provide insight. I believe that the code here could be easily adapted to fit whatever one would like to study. For example, the valuation grid used here could be easily swapped out with <a href="https://karun.in/blog/expected-threat.html">expected threat (xT)</a>, which is a more modern and probably a better valuation framework than the one used here.<sup>11</sup> Furthermore, one could calculate EPV across the entire game. The possibilities for analyses really open up.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>author of one of my favorite books <strong>Soccermatics</strong>↩︎</p></li>
<li id="fn2"><p>If you actually browse Laurie’s code, you’ll notice that I’ve changed some of the names of these functions, e.g.&nbsp;<code>tti()</code> here instead of <code>simple_time_to_intercept()</code> there, <code>tracking_df</code> instead of <code>team</code> there. Don’t worry about that. I just wanted to make things as comparable as possible for the diligent reader, and I tried to make variable names that were either (or both) more succinct or more clear.↩︎</p></li>
<li id="fn3"><p>One might argue that we should be consistent with <code>tti</code> and <code>p_intercept</code> and store them in the same way—either both as attributes or neither as attributes—given that both are dependent on some user-specified values (<code>final_position</code> for <code>tti</code> and <code>t</code> for <code>p_intercept</code>). I’m just showing how it is done in Laurie’s code. I think it is simple enough as is and there is no compelling functional reason why we should change the implementation.↩︎</p></li>
<li id="fn4"><p>Data for this plot and all that follow from post-processed <a href="https://github.com/metrica-sports/sample-data">Metrica Sports sample game 2 data</a>.↩︎</p></li>
<li id="fn5"><p>author of one of my favorite books <strong>Soccermatics</strong>↩︎</p></li>
<li id="fn6"><p><code>vctrs::obj_print_data</code> that can also handle <a href="https://home.unicode.org/">Unicode</a> easily, although we are not using any Unicode characters here. Also, it is able to handle extra <code>NULL</code>s and <code>[1]</code> that may be printed out if we just use <code>cat</code> or <code>print</code> directly.↩︎</p></li>
<li id="fn7"><p>This is the same data used to generate the first handful of plots.↩︎</p></li>
<li id="fn8"><p><a href="https://adv-r.hadley.nz/r6.html">R6</a> is probably a better OOP system to use for this whole use case. The capability to update instance attributes is more native to that framework.↩︎</p></li>
<li id="fn9"><p>It’s best to separate our logic in functions like this where it makes sense to do so. It ultimately makes re-factoring and debugging a lot easier.↩︎</p></li>
<li id="fn10"><p>Feel free to check out the source the <a href="https://github.com/tonyelhabr/LaurieOnTracking/blob/master/analysis/01-freestyle-blog.R">code</a> used in the full implementation, as well as the code to generate the plots.↩︎</p></li>
<li id="fn11"><p><a href="https://raw.githubusercontent.com/anenglishgoat/InteractivePitchControl/master/xT.csv">Here</a> is a CSV with the grid for xT.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>r</category>
  <category>soccer</category>
  <guid>https://itsmetoeknee.netlify.app/posts/soccer-pitch-control-r/index.html</guid>
  <pubDate>Wed, 23 Sep 2020 05:00:00 GMT</pubDate>
  <media:content url="https://itsmetoeknee.netlify.app/posts/soccer-pitch-control-r/viz_pc_823_combined.png" medium="image" type="image/png" height="60" width="144"/>
</item>
<item>
  <title>Comparing Variable Importance Functions (For Modeling)</title>
  <dc:creator>Tony ElHabr</dc:creator>
  <link>https://itsmetoeknee.netlify.app/posts/variable-importance-compare/index.html</link>
  <description><![CDATA[ 



<p>I’ve been doing some machine learning recently, and one thing that keeps popping up is the need to explain the models and their components. There are a variety of ways to go about explaining model features, but probably the most common approach is to use <a href="https://stats.stackexchange.com/questions/332960/what-is-variable-importance">variable (or feature) importance</a> scores. Unfortunately, computing variable importance scores isn’t as straightforward as one might hope—there are a variety of methodologies! Upon implementation, I came to the question “How similar are the variable importance scores calculated using different methodologies?” <sup>1</sup> I think it’s important to know if the different methods will lead to drastically different results. If so, then the choice of method is a source of bias in model interpretation, which is not ideal.</p>
<p>This post isn’t intended to be a deep-dive into <a href="https://christophm.github.io/interpretable-ml-book/">model interpretability</a> or variable importance, but some concepts should be highlighted before attempting to answer this question. Generally, variable importance can be categorized as either being <a href="https://topepo.github.io/caret/variable-importance.html">“model-specific”</a> or <a href="https://christophm.github.io/interpretable-ml-book/agnostic.html">“model-agnostic”</a>. Both depend upon some kind of loss function, e.g.&nbsp;<a href="https://en.wikipedia.org/wiki/Root-mean-square_deviation">root mean squared error (RMSE)</a>, <a href="https://en.wikipedia.org/wiki/Confusion_matrix">classification error</a>, etc. The loss function for a model-specific approach will generally be “fixed” by the software and package that are used<sup>2</sup>, while model-agnostic approaches tend to give the user flexibility in choosing a loss function. Finally, within model-agnostic approaches, there are different methods, e.g.&nbsp;<a href="https://christophm.github.io/interpretable-ml-book/feature-importance.html">permutation</a> and <a href="https://christophm.github.io/interpretable-ml-book/shap.html">SHAP (Shapley Additive Explanations)</a>.</p>
<p>So, to summarize, variable importance “methodologies” can be broken down in several ways:</p>
<ol type="1">
<li>model-specific vs.&nbsp;model-agnostic approach</li>
<li>loss function 3 . model agnostic method (given a model agnostic approach)</li>
</ol>
<p>I’m going to attempt to address (1) and (3) above. I’m leaving (2) out because (a) I think the results won’t differ too much when using different loss functions (although I haven’t verified this assumption) and (b) for the sake of simplicity, I don’t want to be too exhaustive in this analysis. <sup>3</sup></p>
<p>I also want to evaluate how variable importance scores differ across more than one of each of the following:</p>
<ol type="1">
<li>model type (e.g.&nbsp;linear regression, decision trees, etc.)</li>
<li>type of target variables (continuous or discrete )</li>
<li>data set</li>
</ol>
<p>While evaluating the sensitivity of variable importance score to different methodologies is the focus of this analysis, I think it’s important to test how the findings hold up when (1) varying model types, (2) varying target variables, and (3) varying the data itself. This should help us highlight any kind of bias in the results due to choice of model type and type of target variable. Put another way, it should help us quantify the robustness the conclusions that are drawn. If we find that the scores are similar under variation, then we can be more confident that the findings can be generalized.</p>
<p>Additionally, I’m going to use more than one package for computing variable importance scores. As with varying model types, outcome variables, and data, the purpose is to highlight and quantify possible bias due to choices in this analysis—in this case, the choice of package. Are the results of a permutation-based variable importance calculation the same when using different packages (holding all else equal)?</p>
<p>Specifically, I’ll be using the <a href="https://cran.r-project.org/web/packages/vip/index.html"><code>{vip}</code></a> and <a href="https://cran.r-project.org/web/packages/DALEX/index.html"><code>{DALEX}</code></a> packages. The <code>{vip}</code> package is my favorite package to compute variable importance scores using Ris because it is capable of doing both types of calculations (model-specific and model-agnostic) for a variety of model types. But other packages are also great. <code>{DALEX}</code> package specializes in model-agnostic model interpretability and can do a lot more than just variable importance calculations.</p>
<section id="setup" class="level1">
<h1>Setup</h1>
<p>For data, I’m going to be using two data sets from <code>{ggplot2}</code>. <sup>4</sup></p>
<p>increase computation time. (b) I’ve excluded two of the categorical features—<code>clarity</code> and <code>color</code>, both of which are categorical with a handful of levels. I’ve done this in order to reduce the number of variables involved and, consequently, to speed up computation. (This is just an example after all!) (c) To test how variable importance scores differ for a continuous target variable, I’ll be defining models that predict <code>price</code> as a function of all other variables. (d) For discrete predictions, the target is a binary variable <code>grp</code> that I’ve added. It is equal to <code>'1. Good'</code> when <code>cut %in% c('Idea', 'Premium')</code> and <code>2. Bad'</code> otherwise. It just so happens that <code>grp</code> is relatively evenly balanced between the two levels, so there should not be any bias in the results due to class imbalance.</p>
<p>I made modifications to both, so see the footnotes and/or code if you’re interested in the detailI made modifications to both, so see the footnotes and/or code if you’re interested in the details.</p>
<p>For model types, I’m going to trial the following:</p>
<ol type="1">
<li><a href="https://en.wikipedia.org/wiki/Generalized_linear_model">generalized linear model (linear and logistic regression)</a> with <code>stats::lm()</code> and <code>stats::glm()</code> respective ly</li>
<li><a href="https://en.wikipedia.org/wiki/Regularized_least_squares">generalized linear model with regularization</a> using the <a href="https://cran.r-project.org/web/packages/glmnet/index.ht%20ml"><code>{glmnet}</code> package</a></li>
<li>bagged tree (<a href="https://en.wikipedia.org/wiki/Random_forest">random forest</a>) using the <a href="https://cran.r-project.org/web/packages/ranger/index.h%20tml"><code>{ranger}</code> package</a></li>
<li>boosted tree (extreme <a href="https://en.wikipedia.org/wiki/Gradient_boosting">gradient boosting</a>) using the <a href="https://cran.r-project.org/web/packages/xgboost/index.html"><code>{xgboost}</code> package</a></li>
</ol>
<p>With <code>glmnet::glmnet()</code>, I’m actually not going to use a penalty, so (I think) it should return the same results as <code>lm()</code>/<code>glm()</code>. <sup>5</sup> For <code>{ranger}</code> and <code>{xgboost}</code>, I’m going to be using defaults for all parameters. <sup>6</sup></p>
<ol type="1">
<li><code>{vip}</code>’s model-specific scores with (<code>vip::vip(method = 'mod l')</code>)</li>
<li><code>{vip}</code>’s permutation-based scores (with <code>vip::vip(method = 'permute')</code>)</li>
<li><code>{vip}</code>’s SHAP-based values (with <code>vip::vip(method = 'shap')</code>)</li>
<li><a href="https://pbiecek.github.io/ema/featureImportance.html"><code>{DALEX}</code>’s permutation-based scores</a> (with <code>DALEX::variable_importance()</code>)</li>
</ol>
<p>Note that the model-specific vs.&nbsp;model-agnostic concern is addressed in comparing method (1) vs.&nbsp;methods (2)-(4). I’ll be consistent with the loss function in variable importance computations for the model-agnostic methods–minimization of RMSE for a continuous target variable and <a href="https://en.wikipedia.org/wiki/Residual_sum_of_squares">sum of squared errors (SSE)</a> for a discrete target variable. <sup>7</sup></p>
</section>
<section id="results" class="level1">
<h1>Results</h1>
<p>The following handful of plots illustrate normalized variable importance scores and ranks derived from the scores by data set and type of target variable.</p>
<p>First up is the results for the <code>diamonds</code> data set with a continuous target variable.</p>
<p>me: the model-specific scores differ relatively strongly from the rest of the scores given a specific model type. (See the numbers in the parentheses in the first column in each facet labeled <code>vip_model</code> compared to those in the other columns of each facet. <sup>8</sup> For example, the model-specific variable importance score for the <code>carat</code> feature for the <code>{glm}</code> model type is 49%, while the same score for the SHAP variable importance method (<code>vip_shap</code>) is 35%. To be honest, this is not too surprising. The model-specific methods are exactly that—specific to the model type—which suggests that they may strongly dissimilar to the model-agnostic approaches. Nonetheless, despite the scores themselves having some notable variance, the rankings derived from the scores are relatively similar across a given model type (and, arguably, across all model types).</p>
<p>As a second observation, there is some disagreement between the <code>{glm}</code> and <code>{glmnet}</code> model types and the <code>{ranger}</code> and <code>{xgboost}</code> model types about which feature is the most important: the former two identify <code>carat</code> has being the most important, while the latter two prioritize <code>y</code>.</p>
<p>Thirdly–and lastly for this plot—it’s nice to see that the <code>vip_permute</code> and <code>dalex</code> methods produce nearly identical results for each model type, with the exception of <code>{glmnet}</code>. (Hypothetically, these should have nearly identical results since they are both permutation based methods.) Notably, I implemented the <code>explain()</code> function for <code>{glmnet}</code> myself since the <code>{DALEX}</code> package does not export one, so that is probably the reason for the discrepancy.</p>
<p>Now let’s look at the the results when predicting a discrete target variable with the same data set.</p>
<p><img src="https://itsmetoeknee.netlify.app/posts/variable-importance-compare/viz_diamonds_d_rnks.png" class="img-fluid"></p>
<p>Compared to the results for a continuous target variable, we see greater variation across the model types—the rankings from <code>{glm}</code> and <code>{glmnet}</code> are nearly identical, but they are different from those of <code>{xgboost}</code>, and all are different from those of <code>{ranger}</code>. <code>{ranger}</code> has an additional level of variation—lack of agreement among the methodologies.</p>
<p>Additionally, we observe that the scores for our two permutation implementations— <code>vip_permute</code> and <code>dalex</code>—are <strong>very</strong> different. I think this might have to do with how I’ve chosen to normalize scores (i.e.&nbsp;using absolute value to convert negative scores to positive ones prior to 0-1 normalization) or something I’ve over-looked that is specific to classification settings. If something that can be attributed to me (and not the underlying methods) is really the source of discrepancies, then we should be less concerned with the variation in scores and ranks since it seems most strongly associated with the <code>vip_permute</code>-<code>dalex</code> differences.</p>
<p>Before we can begin to generalize any deductions (possibly biased by our single data set), let’s take a look at the results for the second data set, <code>mpg</code>. First is the results for the continuous target variable.</p>
<p><img src="https://itsmetoeknee.netlify.app/posts/variable-importance-compare/viz_mpg_c_rnks.png" class="img-fluid"></p>
<p>There is consensus on what the most important variable is—<code>cyl</code>—but beyond that, the results are somewhat varied across the board. One might argue that there is going to be lack of agreement among methods (and model types), it’s preferable that the discrepancies occur among lower ranks, as seen here. On the other hand, we’d surely like to see more consensus among variables ranked among the top half or so.</p>
<p>And now for the results when ranking with models targeting a discrete variable.</p>
<p><img src="https://itsmetoeknee.netlify.app/posts/variable-importance-compare/viz_mpg_d_rnks.png" class="img-fluid"></p>
<p>There is some pretty strong variation in the <code>{ranger}</code> results. Also, there are discrepancies between the two permutation methods (<code>vip_permute</code> and <code>dalex</code>), which we also noted in the discrete results for <code>diamonds</code> as well. This makes me think again that the issue is due to something I’ve done and not something that could be attributed to the underlying methods. Aside from these, I would say that the results within each model type are pretty coherent (more so than those with the continuous outcome.)</p>
<p>Even without performing any kind of similarity evaluation, we can argue that, in general, the rankings computed by the different methods are relatively similar across the two data sets (<code>diamonds</code> and <code>mpg</code>) and the two types of target variables (continuous and discrete). But why stop there? After all, we <strong>can</strong> quantify the similarities between ranks.</p>
<p><img src="https://itsmetoeknee.netlify.app/posts/variable-importance-compare/viz_cor_by_engine.png" class="img-fluid"></p>
<p>The plot above shows the pairwise correlations among the variable importance ranks computed for each package-function combo, averaged over the two data sets and over the models for the two types of target variables—continuous and discrete. <sup>9</sup> While nothing immediately jumps out from this plot, I think the most notable thing is that the <code>{ranger}</code> scores seem to vary the most across the different variable importance methodologies, bottoming out at 74% for the correlation between the SHAP (<code>vip_shap</code>) and model-specific (<code>vip_model</code>) methodologies. On the other hand, <code>{xgboost}</code> seems to have the most “agreement” and least variance in its scores.</p>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>Overall, we might say that rankings of variable importance based on normalized variable importance scores in this analysis showed that differences will arise when evaluating different methodologies, but the differences may not be strong enough to change any deductions that one might draw. Of course, this will depend on the context. A small differences could make a huge difference in a field like medicine!</p>
<p>I wouldn’t go so far as to say that these insights can be generalized—among other things, I think I would need to evaluate a much larger variety of data sets—but I think it’s good to be conscious how much the results can vary. It’s ultimately up to the user whether the differences are significant.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>After all, I want to make sure my results aren’t sensitive to some kind of bias (unintentional in this case).↩︎</p></li>
<li id="fn2"><p>This isn’t an academic paper after all!↩︎</p></li>
<li id="fn3"><p>This isn’t an academic paper after all!↩︎</p></li>
<li id="fn4"><p>Modifications include the following: (a) I’ve excluded <code>manufacturer</code>, <code>model</code>, <code>trans</code>, and <code>class</code>. (b) For continuous predictions, I’ll predict <code>displ</code> as a function of all other variables. (c) For discrete predictions, I’ve created a binary variable <code>grp</code> based on <code>class</code>.↩︎</p></li>
<li id="fn5"><p>(I haven’t actually checked the source for <code>{glmnet}</code> and compared it to that of <code>lm()</code>/<code>glm()</code>. Differences may arise due to underlying differences in the algorithm for least squares.)↩︎</p></li>
<li id="fn6"><p>I should say that I’m using the <code>{tidymodels}</code> package to assist with all of this. It really shows off its flexibility here, allowing me to switch between models only having to change-out one line of code!Finally, for variable importance scores (which is really the focus), I’m going to use the following packages and functi ons.↩︎</p></li>
<li id="fn7"><p>Yes, SSE is certainly not the best measure of loss for classification. Nonetheless, when dealing with a binary outcome variable, as is done here, it can arguably be cceptable.↩︎</p></li>
<li id="fn8"><p>Don’t be deceived by the fill contours, which are based on the rankings–the number in front of the parentheses.↩︎</p></li>
<li id="fn9"><p>I could have split (or “facetted”) in a different way–e.g.&nbsp;by type of target variable instead of by package-function combo—but I think splitting in this way makes the most sense because the type of model—<code>{glm}</code>, <code>{ranger}</code>, etc.—is likely the biggest source of variation.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>r</category>
  <guid>https://itsmetoeknee.netlify.app/posts/variable-importance-compare/index.html</guid>
  <pubDate>Mon, 13 Jul 2020 05:00:00 GMT</pubDate>
  <media:content url="https://itsmetoeknee.netlify.app/posts/variable-importance-compare/viz_diamonds_c_rnks.png" medium="image" type="image/png" height="144" width="144"/>
</item>
<item>
  <title>Ranking English Premier League Teams</title>
  <dc:creator>Tony ElHabr</dc:creator>
  <link>https://itsmetoeknee.netlify.app/posts/bayesian-statistics-english-premier-league/index.html</link>
  <description><![CDATA[ 



<p>I haven’t had as much time (since summer of 2018) to write due to taking classes in pursuit of a degree from <a href="https://pe.gatech.edu/degrees/analytics">Georgia Tech’s Online Master of Science in Analytics (OMSA)</a> program. On the other hand, the classes have given me some ideas for future content. And, in the case of the <a href="https://en.wikipedia.org/wiki/Bayesian_statistics">Bayesian Statistics</a> class that I took this past fall, there’s content that translates well to a blog post directly. What follows is a lightly edited version of the report that I submitted at the end of the semester for this class.</p>
<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>I model and predict <a href="https://en.wikipedia.org/wiki/Premier_League">English Premier League</a> (EPL) game outcomes using Bayesian methods. Specifically, I estimated goals scored by each team in a given game as independent Poisson processes, taking the difference of the estimated points scored on each side to determine game winners. More broadly, one may call this a hierarchical Bayesian Poisson model.</p>
<p>Why model goals scored using a Poisson distribution? <a href="https://en.wikipedia.org/wiki/Poisson_distribution">By definition</a>, it “is a discrete probability distribution that expresses the probability of a given number of events occurring in a fixed interval of time with a known constant rate.” In the context of soccer, the fixed interval of time is the 90 minutes of a game (disregarding injury time and over time), and the known constant rate is the expected number of goals scored per minute. Importantly, I must make the assumption that the rate of scored goals is the same across all minutes of a game. <sup>1</sup> Additionally, when computing the difference between Poisson distributions, I must assume that the two distributions are independent of one another. <sup>2</sup></p>
<p>Using Poisson distributions to model soccer scores is certainly not a novel concept. <sup>3</sup> <sup>4</sup> In particular, I would like to acknowledge <a href="http://www.sumsar.net/blog/2013/07/modeling-match-results-in-la-liga-part-one/">the work of Rasmus Baath’s</a>, whose series of blog posts exemplifying the use of R and <a href="http://mcmc-jags.sourceforge.net/">JAGS</a> to model scores in <a href="https://en.wikipedia.org/wiki/La_Liga"><em>La Liga</em></a> games between the 2008-09 to 2012-13 season served as a guide for the analysis that I conduct here. <sup>5</sup> <sup>6</sup></p>
<section id="data-collection" class="level2">
<h2 class="anchored" data-anchor-id="data-collection">Data Collection</h2>
<p>For this project I retrieved game scores and outcomes for the previous three seasons of EPL games (i.e.&nbsp;from the 2016-17 season through the 2018-2019 season).</p>
</section>
</section>
<section id="modeling" class="level1">
<h1>Modeling</h1>
<p>My model is formally defined as follows.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Bc%7D%0Ag_h%20%5Csim%20%5Cmathcal%7BPois%7D(%5Clambda_%7Bh,i,j%7D)%20%5C%5C%0Ag_a%20%5Csim%20%5Cmathcal%7BPois%7D(%5Clambda_%7Ba,i,j%7D)%20%5C%5C%0A%5Clog(%5Clambda_%7Bh,i,j%7D)%20=%20%5Ctext%7Bbaseline%7D_h%20+%20(z_i%20-%20z_j)%20%5C%5C%0A%5Clog(%5Clambda_%7Ba,i,j%7D)%20=%20%5Ctext%7Bbaseline%7D_a%20+%20(z_j%20-%20z_i).%20%5C%5C%0A%5Cend%7Barray%7D%0A"></p>
<p>This model estimates the goals scored by the home team, <img src="https://latex.codecogs.com/png.latex?g_h">, and the goals scored by the away team, <img src="https://latex.codecogs.com/png.latex?g_a">, in a given game between home team, <img src="https://latex.codecogs.com/png.latex?%5Ctext%7Btm%7D_h">, and away team, <img src="https://latex.codecogs.com/png.latex?%5Ctext%7Btm%7D_a">, as random variables coming from independent Poisson processes, <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BPois%7D(%5Clambda_%7Bh,i,j%7D)"> and <img src="https://latex.codecogs.com/png.latex?%5Cmathcal%7BPois%7D(%5Clambda_%7Ba,i,j%7D)">. The log of the rate of goals scored by the home team, <img src="https://latex.codecogs.com/png.latex?%5Clambda_%7Bh,i,j%7D">, in a game between <img src="https://latex.codecogs.com/png.latex?%5Ctext%7Btm%7D_i"> and <img src="https://latex.codecogs.com/png.latex?%5Ctext%7Btm%7D_j"> is modeled as the sum of a “baseline” average of goals scored by any given team playing at home, <img src="https://latex.codecogs.com/png.latex?%5Ctext%7Bbaseline%7D_h">, and the difference between the team “strength” <img src="https://latex.codecogs.com/png.latex?z"> of teams <img src="https://latex.codecogs.com/png.latex?i"> and <img src="https://latex.codecogs.com/png.latex?j"> in a given game. I define the log of the goal rate by the away team, <img src="https://latex.codecogs.com/png.latex?%5Clambda_%7Ba,i,j%7D">, in a similar fashion. <sup>7</sup> It is important to distinguish the baseline levels for home and away so as to account for <a href="https://en.wikipedia.org/wiki/Home_advantage">“home field advantage”</a>. (One should expect to find that <img src="https://latex.codecogs.com/png.latex?%5Ctext%7Bbaseline%7D_h%20%3E%20%5Ctext%7Bbaseline%7D_a"> in the posterior estimates.)</p>
<p>Since I am employing a Bayesian approach, I need to model priors as well. I define them as follows.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Bc%7D%0A%5Ctext%7Bbaseline%7D_h%20%5Csim%20%5Cmathcal%7BN%7D(0,%202%5E2)%20%5C%5C%0A%5Ctext%7Bbaseline%7D_a%20%5Csim%20%5Cmathcal%7BN%7D(0,%202%5E2)%20%5C%5C%0Az_%7Bi%7D%20%5Csim%20%5Cmathcal%7BN%7D(z_%7B%5Ctext%7Ball%7D%7D%20,%20%5Csigma%5E2_%7B%5Ctext%7Ball%7D%7D)%20%5Cquad%20%5Ctext%7Btm%7D_i%20%3E%201%20%5C%5C%0Az_%7B%5Ctext%7Ball%7D%7D%20%5Csim%20%5Cmathcal%7BN%7D(0,%202%5E2)%20%5C%5C%0A%5Csigma_%7B%5Ctext%7Ball%7D%7D%20%5Csim%20%5Cmathcal%7BU%7D(0,%202).%0A%5Cend%7Barray%7D%0A"></p>
<p>There are a couple of things to note about these priors. First, I must “zero”-anchor the strength estimate <img src="https://latex.codecogs.com/png.latex?z"> of one team. (This is manifested by <img src="https://latex.codecogs.com/png.latex?%5Ctext%7Btm%7D_i%20%3E%201">.) Here, I choose the first team alphabetically—Arsenal. Second, the priors are intentionally defined to be relatively vague (although not too vauge) so as to allow the posterior estimates to be heavily defined by the data rather than the priors. Note that the standard deviation of the overall team strength parameter <img src="https://latex.codecogs.com/png.latex?z_%7B%5Ctext%7Ball%7D%7D">, defined as <img src="https://latex.codecogs.com/png.latex?2"> on a log scale, corresponds to an interval of <img src="https://latex.codecogs.com/png.latex?%5Cleft%5Be%5E%7B-2%7D,%20e%5E2%5Cright%5D%20=%20%5Cleft%5B0.13,%207.40%5Cright%5D"> on an unstransformed scale, i.e.&nbsp;goals scored per game.</p>
<p>I leverage the <a href="https://cran.r-project.org/web/packages/R2OpenBUGS/index.html"><code>{R2OpenBUGs}</code> package</a> to create this model with R on the “frontend” and generate the results using the OpenBUGS engine on the “backend”. Regarding the implementation itself, note that I run 100,000 simulations (<code>n.iter</code>), minus 1,000 “burn-in” runs (<code>n.burn</code>).</p>
<p>The raw results are as follows. (As a quick “validation” of these results, note that <img src="https://latex.codecogs.com/png.latex?%5Ctext%7Bbaseline%7D_h%20%3E%20%5Ctext%7Bbaseline%7D_a">, as hypothesized.)</p>
</section>
<section id="interpretation-discussion" class="level1">
<h1>Interpretation &amp; Discussion</h1>
<p>Next, I correspond the strength estimates <img src="https://latex.codecogs.com/png.latex?z"> to teams. Notably, I must “re-add” the zero-anchored team—Arsenal (whose <img src="https://latex.codecogs.com/png.latex?z"> is assigned a dummy value of 1). To do this, I impute its credible set quantiles using the values of the overall strength term <img src="https://latex.codecogs.com/png.latex?z_%7B%5Ctext%7Ball%7D%7D">.</p>
<p><img src="https://itsmetoeknee.netlify.app/posts/bayesian-statistics-english-premier-league/viz_summ_1_z.png" class="img-fluid"></p>
<p>It’s not surprising to see that the strength (<img src="https://latex.codecogs.com/png.latex?z">) corresponding to all but three teams—Liverpool, Man City, and Tottenham—is negative. These three teams, followed closely by Arsenal have been regarded as the best teams for the past two or three EPL seasons. So, relative to Arsenal, all other teams (aside from the top three) are viewed as “worse” by the model.</p>
<p>Note that the <img src="https://latex.codecogs.com/png.latex?z"> estimates above should not be interpreted as goals scored by the teams because they are relative to the strength of Arsenal. To facilitate such an interpretation, I need to translate <img src="https://latex.codecogs.com/png.latex?z"> to goals scored per game. To do this, for each <img src="https://latex.codecogs.com/png.latex?z">, I (1) subtract the average value of all <img src="https://latex.codecogs.com/png.latex?z">’s, (2) add the posterior mean of <img src="https://latex.codecogs.com/png.latex?%5Ctext%7Bbaseline%7D_%7Bh%7D">, and (3) exponentiate.</p>
<p>The plot below shows the results of this transformation.</p>
<p><img src="https://itsmetoeknee.netlify.app/posts/bayesian-statistics-english-premier-league/viz_summ_1_z_adj.png" class="img-fluid"></p>
<section id="predictions" class="level2">
<h2 class="anchored" data-anchor-id="predictions">Predictions</h2>
<p>I can make predictions of game results for the historical data, given the model. Specifically, I simulate the score for both teams in each matchup (1,140 in all) 1,000 times, choosing the result inferred by the mode of each side’s simulated score. (For example, if the mode of the 1,000 simulated scores for the away team is 1 and that of the home team is 2, then the predicted outcome is a win for the home team.) A breakdown of the predicted and actual outcomes is shown below.</p>
<p><img src="https://itsmetoeknee.netlify.app/posts/bayesian-statistics-english-premier-league/viz_conf_mat.png" class="img-fluid"></p>
<p>I make a couple of observations:</p>
<ul>
<li>The most common outcome is an actual win by the home team and a predicted win by the home team.</li>
<li>The model never predicts a tie. (This may seem “unreasonable”, but BÃ¥Ã¥th also found this to be true for his final model.)</li>
<li>The model predicts the outcome correctly in 447 + 216 = 663 of 1,140 games (i.e., 58%).</li>
</ul>
<p>The next couple of visuals provide more details regarding the simulated outcomes.</p>
<p><img src="https://itsmetoeknee.netlify.app/posts/bayesian-statistics-english-premier-league/viz_g_mode.png" class="img-fluid"></p>
<p>From the above graph of the mode of goals scored by both sides, it’s apparent that a 2-1 scores in favor of the home side is the most common outcome.</p>
<p><img src="https://itsmetoeknee.netlify.app/posts/bayesian-statistics-english-premier-league/viz_g_mean.png" class="img-fluid"></p>
<p>The above histogram illustrating the mean (instead of the mode) of the simulated goals provides a bit more nuance to our understanding of modes shown before.</p>
<p><img src="https://itsmetoeknee.netlify.app/posts/bayesian-statistics-english-premier-league/viz_result_mode.png" class="img-fluid"></p>
<p>Finally, the above visual shows the predicted outcomes (inferred from the prior graph of predicted modes).</p>
<p>To better understand how the model works on a team-level basis, let’s look at how well it predicts for each team.</p>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: left;">Team</th>
<th style="text-align: right;"># of Wins</th>
<th style="text-align: left;">Win %</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">Arsenal</td>
<td style="text-align: right;">46</td>
<td style="text-align: left;">80.70%</td>
</tr>
<tr class="even">
<td style="text-align: left;">Man City</td>
<td style="text-align: right;">45</td>
<td style="text-align: left;">78.95%</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Tottenham</td>
<td style="text-align: right;">43</td>
<td style="text-align: left;">75.44%</td>
</tr>
<tr class="even">
<td style="text-align: left;">Liverpool</td>
<td style="text-align: right;">41</td>
<td style="text-align: left;">71.93%</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Chelsea</td>
<td style="text-align: right;">39</td>
<td style="text-align: left;">68.42%</td>
</tr>
<tr class="even">
<td style="text-align: left;">Cardiff</td>
<td style="text-align: right;">12</td>
<td style="text-align: left;">63.16%</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Everton</td>
<td style="text-align: right;">36</td>
<td style="text-align: left;">63.16%</td>
</tr>
<tr class="even">
<td style="text-align: left;">Fulham</td>
<td style="text-align: right;">12</td>
<td style="text-align: left;">63.16%</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Man United</td>
<td style="text-align: right;">35</td>
<td style="text-align: left;">61.40%</td>
</tr>
<tr class="even">
<td style="text-align: left;">Huddersfield</td>
<td style="text-align: right;">23</td>
<td style="text-align: left;">60.53%</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Burnley</td>
<td style="text-align: right;">34</td>
<td style="text-align: left;">59.65%</td>
</tr>
<tr class="even">
<td style="text-align: left;">Stoke</td>
<td style="text-align: right;">22</td>
<td style="text-align: left;">57.89%</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Bournemouth</td>
<td style="text-align: right;">30</td>
<td style="text-align: left;">52.63%</td>
</tr>
<tr class="even">
<td style="text-align: left;">Crystal Palace</td>
<td style="text-align: right;">30</td>
<td style="text-align: left;">52.63%</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Sunderland</td>
<td style="text-align: right;">10</td>
<td style="text-align: left;">52.63%</td>
</tr>
<tr class="even">
<td style="text-align: left;">Swansea</td>
<td style="text-align: right;">20</td>
<td style="text-align: left;">52.63%</td>
</tr>
<tr class="odd">
<td style="text-align: left;">West Ham</td>
<td style="text-align: right;">30</td>
<td style="text-align: left;">52.63%</td>
</tr>
<tr class="even">
<td style="text-align: left;">Watford</td>
<td style="text-align: right;">29</td>
<td style="text-align: left;">50.88%</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Newcastle</td>
<td style="text-align: right;">19</td>
<td style="text-align: left;">50.00%</td>
</tr>
<tr class="even">
<td style="text-align: left;">Leicester</td>
<td style="text-align: right;">28</td>
<td style="text-align: left;">49.12%</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Middlesbrough</td>
<td style="text-align: right;">9</td>
<td style="text-align: left;">47.37%</td>
</tr>
<tr class="even">
<td style="text-align: left;">West Brom</td>
<td style="text-align: right;">18</td>
<td style="text-align: left;">47.37%</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Wolves</td>
<td style="text-align: right;">9</td>
<td style="text-align: left;">47.37%</td>
</tr>
<tr class="even">
<td style="text-align: left;">Brighton</td>
<td style="text-align: right;">15</td>
<td style="text-align: left;">39.47%</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Southampton</td>
<td style="text-align: right;">22</td>
<td style="text-align: left;">38.60%</td>
</tr>
<tr class="even">
<td style="text-align: left;">Hull</td>
<td style="text-align: right;">6</td>
<td style="text-align: left;">31.58%</td>
</tr>
</tbody>
</table>
<p>In most cases, the model predicts the outcome correctly (see <code>is_correct</code>) with greater than 50% accuracy, although there are also teams for which its accuracy is less than 50%.</p>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>In summary, I have created a hierarchical Poisson model to predict scores—and, consequently, game outcomes—for EPL games for the three seasons starting in 2016 and ending in 2018. The model has an training set prediction accuracy of 66.3%. <a href="http://www.sumsar.net/blog/2013/07/modeling-match-results-in-la-liga-part-one/">Baath</a>, whose work inspired mine, achieved an accuracy of 56% with his final model.</p>
<section id="future-work" class="level2">
<h2 class="anchored" data-anchor-id="future-work">Future Work</h2>
<p>My model can certainly be improved. One major flaw of the model is that it does not account for temporal effects, i.e.&nbsp;differences in team strength across seasons. <sup>8</sup> The consequences of this flaw are compounded by the fact that the pool of teams in each EPL season changes. At the end of each season, the three “worst” EPL teams (by win-loss-tie record) are “relegated” to a secondary league, and, in turn, three secondary league teams are “promoted” to the EPL in their place. <sup>9</sup> Consequently, one might say that the estimates of the teams that do not appear in all seasons are exaggerated.</p>


</section>
</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>This is arguably a “bad” assumption. <a href="http://article.sapub.org/10.5923.s.sports.201401.08.html">Research</a> has shown that goal rate per minute increases in the last 15 minutes of a game.↩︎</p></li>
<li id="fn2"><p>This may also be perceived to be a questionable assumption. One may argue that a matchup of “styles”—e.g.&nbsp;an aggressive team against another aggressive team—may distort the results from what would otherwise be expected.↩︎</p></li>
<li id="fn3"><p>This approach is arguably too “simplistic”, but it is certainly a valid approach.↩︎</p></li>
<li id="fn4"><p>See this <a href="https://www.pinnacle.com/en/betting-articles/Soccer/how-to-calculate-poisson-distribution/MD62MLXUMKMXZ6A8">Pinnacle blog post</a> for a discussion of the topic. (Undoubtedly there are many more articles and papers that explore a similar notion.)↩︎</p></li>
<li id="fn5"><p>There are several notable differences with my work compared to that of BÃ¥Ã¥th: (1) I use the <a href="http://www.openbugs.net/w/FrontPage">OpenBUGS</a> software (and the <a href="https://cran.r-project.org/web/packages/R2OpenBUGS/index.html"><code>{R2OpenBUGS}</code> package</a>) instead of JAGS; (2) I evaluate EPL teams instead of La Liga teams, and over a different time period; (3) I use a “tidy” approach (in terms of packages, plotting, coding style, etc.) instead of a more traditional “base R” approach; (4) I implement a modified version of the second of Baath’s three proposed models (notably, using different priors).↩︎</p></li>
<li id="fn6"><p>Baath’s work is licensed under the <a href="https://creativecommons.org/licenses/by/3.0/">Creative Commons license</a>, which allows for others to adapt the work of another.↩︎</p></li>
<li id="fn7"><p>Note that I substitute the baseline home average goal rate with a baseline for away teams, <img src="https://latex.codecogs.com/png.latex?%5Ctext%7Bbaseline%7D_a">, and I swap the order of the <img src="https://latex.codecogs.com/png.latex?z_j"> and <img src="https://latex.codecogs.com/png.latex?z_i"> teams since the relationship is not bi-directional. Also, note that I am careful to distinguish between subscript pair <img src="https://latex.codecogs.com/png.latex?_h"> and <img src="https://latex.codecogs.com/png.latex?_a"> for home and away and pair <img src="https://latex.codecogs.com/png.latex?_i"> and <img src="https://latex.codecogs.com/png.latex?_j"> for team <img src="https://latex.codecogs.com/png.latex?i"> and team <img src="https://latex.codecogs.com/png.latex?j">. The latter pair is independent of the notion of home or away.↩︎</p></li>
<li id="fn8"><p>There are certainly also changes in team strength within seasons, which are even more difficult to model.↩︎</p></li>
<li id="fn9"><p>This explains why there are more than 20 teams in thee data set even though there are only 20 teams in the EPL in a given season.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>r</category>
  <category>soccer</category>
  <guid>https://itsmetoeknee.netlify.app/posts/bayesian-statistics-english-premier-league/index.html</guid>
  <pubDate>Fri, 13 Dec 2019 06:00:00 GMT</pubDate>
  <media:content url="https://itsmetoeknee.netlify.app/posts/bayesian-statistics-english-premier-league/viz_summ_1_z_adj.png" medium="image" type="image/png" height="103" width="144"/>
</item>
<item>
  <title>Making a Cheat Sheet</title>
  <dc:creator>Tony ElHabr</dc:creator>
  <link>https://itsmetoeknee.netlify.app/posts/cheat-sheet-rmarkdown/index.html</link>
  <description><![CDATA[ 



<p>Unfortunately, I haven’t had as much time to make blog posts in the past year or so. I started taking classes as part of <a href="https://pe.gatech.edu/degrees/analytics">Georgia Tech’s Online Master of Science in Analytics (OMSA)</a> program last summer (2018) while continuing to work full-time, so extra time to code and write hasn’t been abundant for me.</p>
<p>Anyways, I figured I would share one neat thing I learned as a consequence of taking classes—writing compact <a href="https://en.wikipedia.org/wiki/Cheat_sheet">“cheat sheets”</a> with <a href="https://rmarkdown.rstudio.com/"><code>{rmarkdown}</code></a>. <sup>1</sup></p>
<p>Writing with <code>{rmarkdown}</code> is fairly straightforward—mostly thanks to an abundance of freely available learning resources, like the <a href="https://bookdown.org/yihui/rmarkdown"><strong><em>R Markdown: The Definitive Guide</em></strong></a>—and using <a href="https://www.w3schools.com/css/default.asp">CSS</a> to customize your Rmarkdown output to your liking is not too difficult either. (By the way, huge shout-out to <a href="https://yihui.name/">Yihui Xie</a> and everyone else who has contributed to the development of the <code>{rmarkdown}</code> package.) My objective was to make an <strong>extremely</strong> compact PDF that minimizes all white space <sup>2</sup>. Despite my knowledge of CSS, I had a hard time getting an output that I liked purely from CSS, so I looked online to see if I could find some good LaTex templates. (After all, I would be knitting the Rmarkdown document to PDF, and <a href="https://www.latex-project.org/">LaTex</a> would be incorporated via the equations on the cheat sheet.) Some templates I found worked fine but weren’t completely to my liking. <sup>3</sup></p>
<p>In my search for an “ideal” template, I stumbled upon a small tidbit in the very last portion of the <a href="https://bookdown.org/yihui/rmarkdown/pdf-document.html">PDF chapter of the <strong><em>R Markdown</em></strong> book</a> stating “You can also replace the underlying pandoc template using the template option”.</p>
<p>At first, I was a bit intimidated by the idea of writing my own template. (“I have to write my own template from scratch using a framework (LaTeX) that I’ve hardly even touched before now!”) But alas, the task became less intimidating when I realized that I could use the tried-and-true method of copying-pasting-modifying from <a href="https://stackoverflow.com/">Stack Overflow</a>!</p>
<section id="the-template" class="level2">
<h2 class="anchored" data-anchor-id="the-template">The Template</h2>
<p>Using the template from <a href="https://tex.stackexchange.com/questions/8827/preparing-cheat-sheets">this Stack Overflow post</a> <sup>4</sup> as a basis, I ended up creating a relatively minimal template. For the curious reader, see <a href="https://github.com/tonyelhabr/cheat-sheet-rmarkdown">this GitHub repo</a>, for the latest version of <a href="https://github.com/tonyelhabr/cheat-sheet-rmarkdown/blob/master/template.tex">my template</a>. It also includes an <a href="https://github.com/tonyelhabr/cheat-sheet-rmarkdown/blob/master/cheat-sheet-example.Rmd">example cheat sheet</a>.</p>
<p><img src="https://itsmetoeknee.netlify.app/posts/cheat-sheet-rmarkdown/cheat-sheet-example.png" class="img-fluid"></p>
<p>The “gist” of my template is shown below.</p>
<pre><code>% Packages and preamble
% ...

\begin{document}

\begin{multicols*}{4}

$body$

\end{multicols*}

\end{document}</code></pre>
<p>The key for me was to understand how <a href="https://pandoc.org/MANUAL.html#variables-for-latex">pandoc variables</a> like <code>$body$</code> are used as placeholders for user-supplied content. (I know I haven’t mentioned <a href="https://pandoc.org/">pandoc</a> up to this point, but suffice it to say that it—along with the R package <a href="https://yihui.name/knitr/"><code>{knitr}</code></a>—are what power the <code>{rmarkdown}</code> package.)</p>
<p>The <code>multicols</code> command shown in the snippet above is also noteworthy. This LaTex command provides the functionality for I wanted most for my cheat sheet—multiple columns of content! I should point out that there are <code>in_header</code>, <code>before_body</code>, and <code>after_body</code> YAML options for customizing PDF output with <code>{rmarkdown}</code>. <sup>5</sup></p>
<p>These options are probably sufficient for most people’s customization needs (so using a custom template would not be necessary). But for me personally, the appeal of having “complete” control of my output by using a template convinced me to forego these options. <sup>6</sup></p>
</section>
<section id="usage" class="level2">
<h2 class="anchored" data-anchor-id="usage">Usage</h2>
<p>So, exactly how do you use a custom template with <code>{rmarkdown}</code>? It’s as simple as specifying the path to your template file with the <code>template</code> option in the YAML header of your Rmarkdown document. <sup>7</sup></p>
</section>
<section id="why-this-way" class="level2">
<h2 class="anchored" data-anchor-id="why-this-way">Why This Way?</h2>
<p>Before I was using <a href="https://www.rstudio.com/">Rstudio</a> and <code>{rmarkdown}</code> to write my cheat sheets, I tried out a couple of LaTex editors <sup>8</sup>. First, I tried the very popular <a href="https://www.overleaf.com">Overleaf</a>. It is well known and commonly used because it is web-based, allows the user to collaborate in real-time, and provides real-time previewing <sup>9</sup>. However, there was just something that felt “clunky” about the editor, and the ambiguity over package versions and usage was bothersome to me. <sup>10</sup> The other editor I tried for some time was <a href="http://www.tug.org/texworks/">TeXworks</a> (with the <a href="https://ctan.org/pkg/pdftex?lang=en">pdftex distribution</a>) Using the “Typset” command to generate my PDF output on an ad-hoc basis seemed to me to be a satisfactory workflow, but, among other things, I felt limited by the customization offered by TeXworks. <sup>11</sup></p>
<p>And so I turned to Rstudio and <code>{rmarkdown}</code> and didn’t look back. While learning how to create a custom template was a (minor) inconvenience, it has paid off in a number of ways:</p>
<ul>
<li><p>I can use a familiar editor—Rstudio.</p></li>
<li><p>I can use a familiar workflow—writing in an Rmarkdown document and <code>knit</code>ting to create my desired output.</p></li>
<li><p>Because I’m using <code>{rmarkdown}</code>, I can use <code>{rmarkdown}</code> functionality that is not available when solely writing in LaTex.</p></li>
</ul>
<p>This last point is huge. <strong>The whole world of <a href="https://daringfireball.net/projects/markdown/">markdown</a> syntax is valid!</strong> For example, I can add emphasis to text with markdown’s <code>**</code> and <code>__</code> tokens (instead of LaTex’s more “verbose” syntax); I can use <code>#</code> to define section headers (which I just think is super “elegant”); and I can use HTML comments to comments out multiple lines of text. (Note that native LaTex only has a single-line comment token—<code>%</code>. <sup>12</sup>) Additionally, beyond just the markdown functionality, I can include <code>R</code> code thanks to added layer of functionality offered by <code>{rmarkdown}</code>.</p>
<p>The one big thing that I feel like I “sacrificed” by moving to Rstudio and <code>{rmarkdown}</code> is the live preview feature that comes with Overleaf (and can be emulated with some configuration in other LaTex editors). Nonetheless, I feel like I get a reasonable facsimile of this feature with Rstudio’s functionality for inline previews of equations. <sup>13</sup> Below are examples of the preview capabilities for both single- and multi-line equations.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://itsmetoeknee.netlify.app/posts/cheat-sheet-rmarkdown/preview-single-line-equation.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">A single-line equation preview</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://itsmetoeknee.netlify.app/posts/cheat-sheet-rmarkdown/preview-multi-line-equation.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">A multi-line equation preview</figcaption><p></p>
</figure>
</div>
</section>
<section id="what-works-for-me-may-not-work-for-you" class="level2">
<h2 class="anchored" data-anchor-id="what-works-for-me-may-not-work-for-you">What Works for Me May Not Work For You</h2>
<p>Although what I’ve described in this post has been working well for me—and I’d encourage others to try it out—I don’t claim it to be the “best” solution for all of your cheat sheet needs. <sup>14</sup> If you’ve got a workflow that works for you, that’s great! Keep using it! Be pragmatic.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>For those unfamiliar with the concept of a cheat sheet, there’s no malice in it, despite what the moniker implies. From my experience, it is relatively common for teachers to let students use self-created note sheets (i.e.&nbsp;cheat sheets) for aid with taking exams.↩︎</p></li>
<li id="fn2"><p>in order to maximize the amount of space used for content, of course↩︎</p></li>
<li id="fn3"><p>One of the ones that I really liked was <a href="https://github.com/tim-st/latex-cheatsheet">this one</a>. However, it’s a bit more complex than I wanted. (This one implements a “structure” in which one “main” tex file references several others with the <code>\input</code> Latex command.)↩︎</p></li>
<li id="fn4"><p>which was super helpful for a LaTex noob like me because it has comments explaining what specific lines/sections are doing↩︎</p></li>
<li id="fn5"><p>See the <a href="https://bookdown.org/yihui/rmarkdown/pdf-document.html">PDF chapter of the <strong><em>R Markdown</em></strong> book</a> for some guidance with these.↩︎</p></li>
<li id="fn6"><p>I’m sure I could create a perfectly fine cheat sheet using just these options, or, even re-create the output that I have achieved with my template.↩︎</p></li>
<li id="fn7"><p>You can specify other options as well, such as <code>keep_latex: true</code> for an alternative LaTex engine with <code>latex_engine</code>.↩︎</p></li>
<li id="fn8"><p>and <a href="https://tex.stackexchange.com/questions/339/latex-editors-ides">there are lots of them out there</a>↩︎</p></li>
<li id="fn9"><p>The live preview feature is probably my favorite of all.↩︎</p></li>
<li id="fn10"><p>Others may view the hands-off approach to package management as an advantage of using Overleaf.↩︎</p></li>
<li id="fn11"><p>Perhaps this is the fault of my own. Perhaps all the customization that I would like exists and I just have not discovered how to enable it.↩︎</p></li>
<li id="fn12"><p>I realize that you can define custom commands or use a package to create multi-line comments in LaTex, but that ruins the point that I’m trying to make.↩︎</p></li>
<li id="fn13"><p>See the “Show equation and image previews” option in Tools &gt; Global Options… &gt; R Markdown.↩︎</p></li>
<li id="fn14"><p>I wouldn’t be surprised if I find a better workflow for myself in the future.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>r</category>
  <category>latex</category>
  <guid>https://itsmetoeknee.netlify.app/posts/cheat-sheet-rmarkdown/index.html</guid>
  <pubDate>Sun, 07 Jul 2019 05:00:00 GMT</pubDate>
  <media:content url="https://itsmetoeknee.netlify.app/posts/cheat-sheet-rmarkdown/cheat-sheet-example.png" medium="image" type="image/png" height="204" width="144"/>
</item>
<item>
  <title>Summarizing rstudio conf 2019 Summaries</title>
  <dc:creator>Tony ElHabr</dc:creator>
  <link>https://itsmetoeknee.netlify.app/posts/rstudio-conf-2019-summary/index.html</link>
  <description><![CDATA[ 



<p>To be honest, I planned on writing a review of this past weekend’s <a href="https://resources.rstudio.com/rstudio-conf-2019">rstudio::conf 2019</a>, but several other people have already done a great job of doing that—just check out <a href="https://github.com/kbroman/RStudioConf2019Slides">Karl Broman’s aggregation of reviews at the bottom of the page here</a>! (More on this in a second.) In short, my thoughts on the whole experience are captured perfectly by <a href="http://nickstrayer.me/">Nick Strayer</a>’s tweet the day after the conference ended.</p>
<p><img src="https://itsmetoeknee.netlify.app/posts/rstudio-conf-2019-summary/tweet.png" class="img-fluid"></p>
<p>Anyways, I figured that this was the perfect opportunity to do some text analysis. Why not extract the text from the reviews of others—linked in Karl’s repo—and make my own summary of the event? Plotting word frequencies and sentiments, while not exactly “cutting edge” compared to robust <a href="https://en.wikipedia.org/wiki/Natural_language_processing">natural language processing</a> techniques, is perfect for getting a nice, simple overview of the conference. (I have applied some of the techniques described by <a href="http://varianceexplained.org/">David Robinson</a> and <a href="https://juliasilge.com/blog">Julia Silge</a> in their <a href="https://www.tidytextmining.com/"><em>Tidy Text Mining with R</em> book</a></p>
<p>Moreover, after reading <a href="https://rud.is/b/2019/01/21/hrbrthemes-0-6-0-on-cran-other-in-development-package-news/">Bob Rudis’s recent post</a> and discovering his work-in-progress ” <code>{curl}</code> +<code>{httr}</code> + <code>{rvest}</code>” package called <a href="https://git.sr.ht/~hrbrmstr/reapr"><code>{reapr}</code></a>, I realized that the work of cleaning the HTML and text for each person’s blog post would not be so bad. In fact, it turned out to be as easy as <code>reapr::reap_url() %&gt;% reapr::mill()</code> (with only a little bit of extra work :smile:).</p>
<p>After trying a couple of different approaches (e.g.&nbsp;bigrams, topic modeling, etc.) and experimenting with some different visualizations, I ended up making the two plots below. (To the interested reader, I’ve included all of the code at the bottom of this post.) From the second plot—where positive sentiment heavily outweighs negative sentiment—one thing is clear: the <code>R</code> community is <strong>super supportive and positive</strong>, just as Nick alluded to in his tweet.</p>
<p><img src="https://itsmetoeknee.netlify.app/posts/rstudio-conf-2019-summary/viz_top_n-1.png" class="img-fluid"></p>
<p><img src="https://itsmetoeknee.netlify.app/posts/rstudio-conf-2019-summary/viz_sentiments-1.png" class="img-fluid"></p>



 ]]></description>
  <category>r</category>
  <guid>https://itsmetoeknee.netlify.app/posts/rstudio-conf-2019-summary/index.html</guid>
  <pubDate>Sun, 27 Jan 2019 06:00:00 GMT</pubDate>
  <media:content url="https://itsmetoeknee.netlify.app/posts/rstudio-conf-2019-summary/headliner.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Converting nested JSON to a tidy data frame with R</title>
  <dc:creator>Tony ElHabr</dc:creator>
  <link>https://itsmetoeknee.netlify.app/posts/nested-json-to-tidy-data-frame-r/index.html</link>
  <description><![CDATA[ 



<p><strong><em>UPDATE: The data retrieval demonstrated in this post no longer seems to work due to a change in the ESPN’S “secret” API. In any matter, the techniques for working with JSON data are still valid.</em></strong></p>
<p>In this “how-to” post, I want to detail an approach that others may find useful for converting nested (nasty!) json to a <a href="http://r4ds.had.co.nz/tidy-data.html">tidy</a> (nice!) <code>data.frame</code>/<code>tibble</code> that is should be much easier to work with. <sup>1</sup></p>
<p>For this demonstration, I’ll start out by scraping <a href="https://www.nfl.com/">National Football League</a> (NFL) 2018 regular season week 1 score data from <a href="http://www.espn.com/">ESPN</a>, which involves lots of nested data in its raw form. <sup>2</sup></p>
<p>Then, I’ll work towards getting the data in a workable format (a <code>data.frame</code>!). (This is the crux of what I want to show.) Finally, I’ll filter and wrangle the data to generate a final, presentable format.</p>
<p>Even if one does not care for sports and knows nothing about the NFL, I believe that the techniques that I demonstrate are generalizable to a broad set of JSON-related “problems”.</p>
<section id="getting-the-data" class="level2">
<h2 class="anchored" data-anchor-id="getting-the-data">Getting the data</h2>
<p>Let’s being with importing the package(s) that we’ll need.</p>
<p>Next, we’ll create a variable for the url from which we will get the data. The url here will request the scores for week 1 of the 2018 NFL season from <a href="https://gist.github.com/akeaswaran/b48b02f1c94f873c6655e7129910fc3b">ESPN’s “secret” API</a>. <sup>3</sup></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1">url <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"http://site.api.espn.com/apis/site/v2/sports/football/nfl/scoreboard?&amp;dates=2018&amp;seasontype=2&amp;week=1"</span></span></code></pre></div>
</details>
</div>
<p>And now, the actual HTTP <code>GET</code> request for the data (using the <a href="https://cran.r-project.org/web/packages/httr/index.html"><code>{httr}</code></a> package’s appropriately named <code>GET()</code> function).</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">resp <span class="ot" style="color: #003B4F;">&lt;-</span> httr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">GET</span>(url)</span>
<span id="cb2-2">resp</span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;">#&gt; Response [http://site.api.espn.com/apis/site/v2/sports/football/nfl/scoreboard?&amp;dates=2018&amp;seasontype=2&amp;week=1]</span></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;">#&gt;   Date: 2018-10-24 18:41</span></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;">#&gt;   Status: 200</span></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;">#&gt;   Content-Type: application/json;charset=UTF-8</span></span>
<span id="cb2-7"><span class="co" style="color: #5E5E5E;">#&gt;   Size: 189 kB</span></span></code></pre></div>
</details>
</div>
<p>Everything seems to be going well. However, after using another handy <code>{httr}</code> function—<code>content()</code>—to extract the data, we see that the data is an nasty nested format! (I only print out some of the top-level elements to avoid cluttering the page.)</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">cont_raw <span class="ot" style="color: #003B4F;">&lt;-</span> httr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">content</span>(resp)</span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;">str</span>(cont_raw, <span class="at" style="color: #657422;">max.level =</span> <span class="dv" style="color: #AD0000;">3</span>, <span class="at" style="color: #657422;">list.len =</span> <span class="dv" style="color: #AD0000;">4</span>)</span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;">#&gt; List of 4</span></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;">#&gt;  $ leagues:List of 1</span></span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;">#&gt;   ..$ :List of 11</span></span>
<span id="cb3-6"><span class="co" style="color: #5E5E5E;">#&gt;   .. ..$ id                 : chr "28"</span></span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;">#&gt;   .. ..$ uid                : chr "s:20~l:28"</span></span>
<span id="cb3-8"><span class="co" style="color: #5E5E5E;">#&gt;   .. ..$ name               : chr "National Football League"</span></span>
<span id="cb3-9"><span class="co" style="color: #5E5E5E;">#&gt;   .. ..$ abbreviation       : chr "NFL"</span></span>
<span id="cb3-10"><span class="co" style="color: #5E5E5E;">#&gt;   .. .. [list output truncated]</span></span>
<span id="cb3-11"><span class="co" style="color: #5E5E5E;">#&gt;  $ season :List of 2</span></span>
<span id="cb3-12"><span class="co" style="color: #5E5E5E;">#&gt;   ..$ type: int 2</span></span>
<span id="cb3-13"><span class="co" style="color: #5E5E5E;">#&gt;   ..$ year: int 2018</span></span>
<span id="cb3-14"><span class="co" style="color: #5E5E5E;">#&gt;  $ week   :List of 1</span></span>
<span id="cb3-15"><span class="co" style="color: #5E5E5E;">#&gt;   ..$ number: int 1</span></span>
<span id="cb3-16"><span class="co" style="color: #5E5E5E;">#&gt;  $ events :List of 16</span></span>
<span id="cb3-17"><span class="co" style="color: #5E5E5E;">#&gt;   ..$ :List of 9</span></span>
<span id="cb3-18"><span class="co" style="color: #5E5E5E;">#&gt;   .. ..$ id          : chr "401030710"</span></span>
<span id="cb3-19"><span class="co" style="color: #5E5E5E;">#&gt;   .. ..$ uid         : chr "s:20~l:28~e:401030710"</span></span>
<span id="cb3-20"><span class="co" style="color: #5E5E5E;">#&gt;   .. ..$ date        : chr "2018-09-07T00:55Z"</span></span>
<span id="cb3-21"><span class="co" style="color: #5E5E5E;">#&gt;   .. ..$ name        : chr "Atlanta Falcons at Philadelphia Eagles"</span></span>
<span id="cb3-22"><span class="co" style="color: #5E5E5E;">#&gt;   .. .. [list output truncated]</span></span>
<span id="cb3-23"><span class="co" style="color: #5E5E5E;">#&gt;   ..$ :List of 9</span></span>
<span id="cb3-24"><span class="co" style="color: #5E5E5E;">#&gt;   .. ..$ id          : chr "401030718"</span></span>
<span id="cb3-25"><span class="co" style="color: #5E5E5E;">#&gt;   .. ..$ uid         : chr "s:20~l:28~e:401030718"</span></span>
<span id="cb3-26"><span class="co" style="color: #5E5E5E;">#&gt;   .. ..$ date        : chr "2018-09-09T17:00Z"</span></span>
<span id="cb3-27"><span class="co" style="color: #5E5E5E;">#&gt;   .. ..$ name        : chr "Pittsburgh Steelers at Cleveland Browns"</span></span>
<span id="cb3-28"><span class="co" style="color: #5E5E5E;">#&gt;   .. .. [list output truncated]</span></span>
<span id="cb3-29"><span class="co" style="color: #5E5E5E;">#&gt;   ..$ :List of 9</span></span>
<span id="cb3-30"><span class="co" style="color: #5E5E5E;">#&gt;   .. ..$ id          : chr "401030717"</span></span>
<span id="cb3-31"><span class="co" style="color: #5E5E5E;">#&gt;   .. ..$ uid         : chr "s:20~l:28~e:401030717"</span></span>
<span id="cb3-32"><span class="co" style="color: #5E5E5E;">#&gt;   .. ..$ date        : chr "2018-09-09T17:00Z"</span></span>
<span id="cb3-33"><span class="co" style="color: #5E5E5E;">#&gt;   .. ..$ name        : chr "Cincinnati Bengals at Indianapolis Colts"</span></span>
<span id="cb3-34"><span class="co" style="color: #5E5E5E;">#&gt;   .. .. [list output truncated]</span></span>
<span id="cb3-35"><span class="co" style="color: #5E5E5E;">#&gt;   ..$ :List of 9</span></span>
<span id="cb3-36"><span class="co" style="color: #5E5E5E;">#&gt;   .. ..$ id          : chr "401030716"</span></span>
<span id="cb3-37"><span class="co" style="color: #5E5E5E;">#&gt;   .. ..$ uid         : chr "s:20~l:28~e:401030716"</span></span>
<span id="cb3-38"><span class="co" style="color: #5E5E5E;">#&gt;   .. ..$ date        : chr "2018-09-09T17:00Z"</span></span>
<span id="cb3-39"><span class="co" style="color: #5E5E5E;">#&gt;   .. ..$ name        : chr "Tennessee Titans at Miami Dolphins"</span></span>
<span id="cb3-40"><span class="co" style="color: #5E5E5E;">#&gt;   .. .. [list output truncated]</span></span>
<span id="cb3-41"><span class="co" style="color: #5E5E5E;">#&gt;   .. [list output truncated]</span></span></code></pre></div>
</details>
</div>
</section>
<section id="parsing-the-data" class="level2">
<h2 class="anchored" data-anchor-id="parsing-the-data">Parsing the data</h2>
<p>Given the nature of the data, we might hope that the <a href="https://cran.r-project.org/web/packages/jsonlite/index.html"><code>{jsonlite}</code></a> package will save us here. However, straightforward usage of it’s <code>fromJSON()</code> package only reduces the mess a bit.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">df_raw_ugly <span class="ot" style="color: #003B4F;">&lt;-</span> jsonlite<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">fromJSON</span>(<span class="fu" style="color: #4758AB;">rawToChar</span>(resp<span class="sc" style="color: #5E5E5E;">$</span>content))</span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;">glimpse</span>(df_raw_ugly, <span class="at" style="color: #657422;">max.level =</span> <span class="dv" style="color: #AD0000;">3</span>, <span class="at" style="color: #657422;">list.len =</span> <span class="dv" style="color: #AD0000;">4</span>)</span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;">#| code-fold: show</span></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;">#&gt; List of 4</span></span>
<span id="cb4-5"><span class="co" style="color: #5E5E5E;">#&gt;  $ leagues:'data.frame': 1 obs. of  11 variables:</span></span>
<span id="cb4-6"><span class="co" style="color: #5E5E5E;">#&gt;   ..$ id                 : chr "28"</span></span>
<span id="cb4-7"><span class="co" style="color: #5E5E5E;">#&gt;   ..$ uid                : chr "s:20~l:28"</span></span>
<span id="cb4-8"><span class="co" style="color: #5E5E5E;">#&gt;   ..$ name               : chr "National Football League"</span></span>
<span id="cb4-9"><span class="co" style="color: #5E5E5E;">#&gt;   ..$ abbreviation       : chr "NFL"</span></span>
<span id="cb4-10"><span class="co" style="color: #5E5E5E;">#&gt;   .. [list output truncated]</span></span>
<span id="cb4-11"><span class="co" style="color: #5E5E5E;">#&gt;  $ season :List of 2</span></span>
<span id="cb4-12"><span class="co" style="color: #5E5E5E;">#&gt;   ..$ type: int 2</span></span>
<span id="cb4-13"><span class="co" style="color: #5E5E5E;">#&gt;   ..$ year: int 2018</span></span>
<span id="cb4-14"><span class="co" style="color: #5E5E5E;">#&gt;  $ week   :List of 1</span></span>
<span id="cb4-15"><span class="co" style="color: #5E5E5E;">#&gt;   ..$ number: int 1</span></span>
<span id="cb4-16"><span class="co" style="color: #5E5E5E;">#&gt;  $ events :'data.frame': 16 obs. of  9 variables:</span></span>
<span id="cb4-17"><span class="co" style="color: #5E5E5E;">#&gt;   ..$ id          : chr [1:16] "401030710" "401030718" "401030717" "401030716" ...</span></span>
<span id="cb4-18"><span class="co" style="color: #5E5E5E;">#&gt;   ..$ uid         : chr [1:16] "s:20~l:28~e:401030710" "s:20~l:28~e:401030718" "s:20~l:28~e:401030717" "s:20~l:28~e:401030716" ...</span></span>
<span id="cb4-19"><span class="co" style="color: #5E5E5E;">#&gt;   ..$ date        : chr [1:16] "2018-09-07T00:55Z" "2018-09-09T17:00Z" "2018-09-09T17:00Z" "2018-09-09T17:00Z" ...</span></span>
<span id="cb4-20"><span class="co" style="color: #5E5E5E;">#&gt;   ..$ name        : chr [1:16] "Atlanta Falcons at Philadelphia Eagles" "Pittsburgh Steelers at Cleveland Browns" "Cincinnati Bengals at Indianapolis Colts" "Tennessee Titans at Miami Dolphins" ...</span></span>
<span id="cb4-21"><span class="co" style="color: #5E5E5E;">#&gt;   .. [list output truncated]</span></span></code></pre></div>
</details>
</div>
<p>One could go on and try some other functions from the <code>{jsonlite}</code> package (or another JSON-related package), but, in my own attempts, I was unable to figure out a nice way of getting a <code>data.frame()</code>. (This is not to say that there is something wrong with the package—I simply could not figure out how to use it to get the result that I wanted.)</p>
<p>So, what to do now? Well, after some struggling, I stumbled upon the following solution to put me on the right path.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">df_raw <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">enframe</span>(<span class="fu" style="color: #4758AB;">unlist</span>(cont_raw))</span>
<span id="cb5-2">df_raw</span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;">#| code-fold: show</span></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;">#&gt; # A tibble: 6,629 x 2</span></span>
<span id="cb5-5"><span class="co" style="color: #5E5E5E;">#&gt;    name                     value                   </span></span>
<span id="cb5-6"><span class="co" style="color: #5E5E5E;">#&gt;    &lt;chr&gt;                    &lt;chr&gt;                   </span></span>
<span id="cb5-7"><span class="co" style="color: #5E5E5E;">#&gt;  1 leagues.id               28                      </span></span>
<span id="cb5-8"><span class="co" style="color: #5E5E5E;">#&gt;  2 leagues.uid              s:20~l:28               </span></span>
<span id="cb5-9"><span class="co" style="color: #5E5E5E;">#&gt;  3 leagues.name             National Football League</span></span>
<span id="cb5-10"><span class="co" style="color: #5E5E5E;">#&gt;  4 leagues.abbreviation     NFL                     </span></span>
<span id="cb5-11"><span class="co" style="color: #5E5E5E;">#&gt;  5 leagues.slug             nfl                     </span></span>
<span id="cb5-12"><span class="co" style="color: #5E5E5E;">#&gt;  6 leagues.season.year      2018                    </span></span>
<span id="cb5-13"><span class="co" style="color: #5E5E5E;">#&gt;  7 leagues.season.startDate 2018-08-02T07:00Z       </span></span>
<span id="cb5-14"><span class="co" style="color: #5E5E5E;">#&gt;  8 leagues.season.endDate   2019-02-06T07:59Z       </span></span>
<span id="cb5-15"><span class="co" style="color: #5E5E5E;">#&gt;  9 leagues.season.type.id   2                       </span></span>
<span id="cb5-16"><span class="co" style="color: #5E5E5E;">#&gt; 10 leagues.season.type.type 2                       </span></span>
<span id="cb5-17"><span class="co" style="color: #5E5E5E;">#&gt; # ... with 6,619 more rows</span></span></code></pre></div>
</details>
</div>
<p>Combining <code>unlist()</code> and <code>tibble::enframe()</code>, we are able to get a (very) long data.frame without any nested elements! Note that the would-have-been-nested elements are joined by “.” in the “name” column, and the values associated with these elements are in the “value” column. (These are the default column names that <code>tibble::enframe()</code> assigns to the <code>tibble</code> that it creates from a list.)</p>
<p>While this <code>tibble</code> is still not in a tidy format—there are variables implicitly stored in the “name” column rather than in their own columns—–it’s in a much more user-friendly format (in my opinion). (e.g The variable <code>"leagues.season.startDate"</code> implicitly encodes three variables—<code>"leagues"</code>, <code>"season"</code>, and <code>"startDate"</code>—each deserving of their own column.)</p>
<p>Given the format of the implicit variable sin the “name” column, We can use <code>tidyr::separate()</code> to create columns for each.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">df_raw <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">separate</span>(name, <span class="at" style="color: #657422;">into =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"x"</span>, <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">10</span>)))</span>
<span id="cb6-2"><span class="co" style="color: #5E5E5E;">#&gt; Warning: Expected 10 pieces. Missing pieces filled with `NA` in 6629</span></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;">#&gt; rows [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,</span></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;">#&gt; 20, ...].</span></span>
<span id="cb6-5"><span class="co" style="color: #5E5E5E;">#&gt; # A tibble: 6,629 x 11</span></span>
<span id="cb6-6"><span class="co" style="color: #5E5E5E;">#&gt;    x1     x2      x3    x4    x5    x6    x7    x8    x9    x10   value   </span></span>
<span id="cb6-7"><span class="co" style="color: #5E5E5E;">#&gt;    &lt;chr&gt;  &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;   </span></span>
<span id="cb6-8"><span class="co" style="color: #5E5E5E;">#&gt;  1 leagu~ id      &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  28      </span></span>
<span id="cb6-9"><span class="co" style="color: #5E5E5E;">#&gt;  2 leagu~ uid     &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  s:20~l:~</span></span>
<span id="cb6-10"><span class="co" style="color: #5E5E5E;">#&gt;  3 leagu~ name    &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  Nationa~</span></span>
<span id="cb6-11"><span class="co" style="color: #5E5E5E;">#&gt;  4 leagu~ abbrev~ &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  NFL     </span></span>
<span id="cb6-12"><span class="co" style="color: #5E5E5E;">#&gt;  5 leagu~ slug    &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  nfl     </span></span>
<span id="cb6-13"><span class="co" style="color: #5E5E5E;">#&gt;  6 leagu~ season  year  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  2018    </span></span>
<span id="cb6-14"><span class="co" style="color: #5E5E5E;">#&gt;  7 leagu~ season  star~ &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  2018-08~</span></span>
<span id="cb6-15"><span class="co" style="color: #5E5E5E;">#&gt;  8 leagu~ season  endD~ &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  2019-02~</span></span>
<span id="cb6-16"><span class="co" style="color: #5E5E5E;">#&gt;  9 leagu~ season  type  id    &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  2       </span></span>
<span id="cb6-17"><span class="co" style="color: #5E5E5E;">#&gt; 10 leagu~ season  type  type  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  2       </span></span>
<span id="cb6-18"><span class="co" style="color: #5E5E5E;">#&gt; # ... with 6,619 more rows</span></span></code></pre></div>
</details>
</div>
<p>We get a warning indicating when using <code>separate()</code> because we have “over-estimated” how many columns we will need to create. Note that, with my specification of (dummy) column names with the <code>into</code> argument, I guessed that there we would need 10 columns. Why 10? Because I expected that 10 would be more than I needed, and it’s better to over-estimate and remove the extra columns in a subsequent step than to under-estimate and lose data because there are not enough columns to put the “separated” data in.</p>
<p>We can get rid of the warning by providing an appropriate value for <code>separate()</code>’s <code>fill</code> argument. (Note that <code>"warn"</code> is the default value of the <code>fill</code> argument.)</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">df_raw <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">separate</span>(name, <span class="at" style="color: #657422;">into =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"x"</span>, <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">10</span>)), <span class="at" style="color: #657422;">fill =</span> <span class="st" style="color: #20794D;">"right"</span>)</span>
<span id="cb7-2"><span class="co" style="color: #5E5E5E;">#&gt; # A tibble: 6,629 x 11</span></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;">#&gt;    x1     x2      x3    x4    x5    x6    x7    x8    x9    x10   value   </span></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;">#&gt;    &lt;chr&gt;  &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;   </span></span>
<span id="cb7-5"><span class="co" style="color: #5E5E5E;">#&gt;  1 leagu~ id      &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  28      </span></span>
<span id="cb7-6"><span class="co" style="color: #5E5E5E;">#&gt;  2 leagu~ uid     &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  s:20~l:~</span></span>
<span id="cb7-7"><span class="co" style="color: #5E5E5E;">#&gt;  3 leagu~ name    &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  Nationa~</span></span>
<span id="cb7-8"><span class="co" style="color: #5E5E5E;">#&gt;  4 leagu~ abbrev~ &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  NFL     </span></span>
<span id="cb7-9"><span class="co" style="color: #5E5E5E;">#&gt;  5 leagu~ slug    &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  nfl     </span></span>
<span id="cb7-10"><span class="co" style="color: #5E5E5E;">#&gt;  6 leagu~ season  year  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  2018    </span></span>
<span id="cb7-11"><span class="co" style="color: #5E5E5E;">#&gt;  7 leagu~ season  star~ &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  2018-08~</span></span>
<span id="cb7-12"><span class="co" style="color: #5E5E5E;">#&gt;  8 leagu~ season  endD~ &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  2019-02~</span></span>
<span id="cb7-13"><span class="co" style="color: #5E5E5E;">#&gt;  9 leagu~ season  type  id    &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  2       </span></span>
<span id="cb7-14"><span class="co" style="color: #5E5E5E;">#&gt; 10 leagu~ season  type  type  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  2       </span></span>
<span id="cb7-15"><span class="co" style="color: #5E5E5E;">#&gt; # ... with 6,619 more rows</span></span></code></pre></div>
</details>
</div>
<p>However, while this action gets rid of the warning, it does not actually resolve the underlying issue—specifying the correct number of columns to create with <code>separate()</code>. We can do that by identifying the <code>name</code> with the most number of “dots” (i.e.&nbsp;<code>.</code>s).</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">rgx_split <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">."</span></span>
<span id="cb8-2">n_cols_max <span class="ot" style="color: #003B4F;">&lt;-</span> df_raw <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb8-3">  <span class="fu" style="color: #4758AB;">pull</span>(name) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-4">  <span class="fu" style="color: #4758AB;">str_split</span>(rgx_split) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-5">  <span class="fu" style="color: #4758AB;">map_dbl</span>(<span class="sc" style="color: #5E5E5E;">~</span><span class="fu" style="color: #4758AB;">length</span>(.)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb8-6">  <span class="fu" style="color: #4758AB;">max</span>()</span>
<span id="cb8-7">n_cols_max</span>
<span id="cb8-8"><span class="co" style="color: #5E5E5E;">#&gt; [1] 7</span></span></code></pre></div>
</details>
</div>
<p>With this number (7) identified, we can now choose the “correct” number of columns to create with <code>separate()</code>. Note that we’ll still be left with lots of <code>NA</code> values (corresponding to rows that don’t have the maximum number of variables). This is expected.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">nms_sep <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">paste0</span>(<span class="st" style="color: #20794D;">"name"</span>, <span class="dv" style="color: #AD0000;">1</span><span class="sc" style="color: #5E5E5E;">:</span>n_cols_max)</span>
<span id="cb9-2">df_sep <span class="ot" style="color: #003B4F;">&lt;-</span> df_raw <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb9-3">  <span class="fu" style="color: #4758AB;">separate</span>(name, <span class="at" style="color: #657422;">into =</span> nms_sep, <span class="at" style="color: #657422;">sep =</span> rgx_split, <span class="at" style="color: #657422;">fill =</span> <span class="st" style="color: #20794D;">"right"</span>)</span>
<span id="cb9-4">df_sep</span>
<span id="cb9-5"><span class="co" style="color: #5E5E5E;">#| code-fold: show</span></span>
<span id="cb9-6"><span class="co" style="color: #5E5E5E;">#&gt; # A tibble: 6,629 x 8</span></span>
<span id="cb9-7"><span class="co" style="color: #5E5E5E;">#&gt;    name1   name2      name3    name4 name5 name6 name7 value              </span></span>
<span id="cb9-8"><span class="co" style="color: #5E5E5E;">#&gt;    &lt;chr&gt;   &lt;chr&gt;      &lt;chr&gt;    &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;              </span></span>
<span id="cb9-9"><span class="co" style="color: #5E5E5E;">#&gt;  1 leagues id         &lt;NA&gt;     &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  28                 </span></span>
<span id="cb9-10"><span class="co" style="color: #5E5E5E;">#&gt;  2 leagues uid        &lt;NA&gt;     &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  s:20~l:28          </span></span>
<span id="cb9-11"><span class="co" style="color: #5E5E5E;">#&gt;  3 leagues name       &lt;NA&gt;     &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  National Football ~</span></span>
<span id="cb9-12"><span class="co" style="color: #5E5E5E;">#&gt;  4 leagues abbreviat~ &lt;NA&gt;     &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  NFL                </span></span>
<span id="cb9-13"><span class="co" style="color: #5E5E5E;">#&gt;  5 leagues slug       &lt;NA&gt;     &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  nfl                </span></span>
<span id="cb9-14"><span class="co" style="color: #5E5E5E;">#&gt;  6 leagues season     year     &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  2018               </span></span>
<span id="cb9-15"><span class="co" style="color: #5E5E5E;">#&gt;  7 leagues season     startDa~ &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  2018-08-02T07:00Z  </span></span>
<span id="cb9-16"><span class="co" style="color: #5E5E5E;">#&gt;  8 leagues season     endDate  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  2019-02-06T07:59Z  </span></span>
<span id="cb9-17"><span class="co" style="color: #5E5E5E;">#&gt;  9 leagues season     type     id    &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  2                  </span></span>
<span id="cb9-18"><span class="co" style="color: #5E5E5E;">#&gt; 10 leagues season     type     type  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  2                  </span></span>
<span id="cb9-19"><span class="co" style="color: #5E5E5E;">#&gt; # ... with 6,619 more rows</span></span></code></pre></div>
</details>
</div>
<p>By my interpretation, this <code>df_sep</code> variable is in tidy format. (Of course, there is still lots of cleaning to be done before it can actually be useful!)</p>
</section>
<section id="post-processing-the-data" class="level2">
<h2 class="anchored" data-anchor-id="post-processing-the-data">Post-processing the data</h2>
<p>Getting the raw data in the format that <code>df_sep</code> is what I primarily wanted to show. Nonetheless, there’s more to the story! (Reminder: We’re seeking to get the scores from the 16 games in week 1 of the NFL’s 2018 regular season.) How can we work with the <code>NA</code>s to get a final format that is actually presentable?</p>
<p>We continue by filter the <code>tibble</code> for only the rows that we will need.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">df_filt <span class="ot" style="color: #003B4F;">&lt;-</span> df_sep <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb10-2">  <span class="fu" style="color: #4758AB;">filter</span>(</span>
<span id="cb10-3">    (</span>
<span id="cb10-4">      name1 <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"events"</span> <span class="sc" style="color: #5E5E5E;">&amp;</span></span>
<span id="cb10-5">        name2 <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"shortName"</span></span>
<span id="cb10-6">    ) <span class="sc" style="color: #5E5E5E;">|</span></span>
<span id="cb10-7">      (</span>
<span id="cb10-8">        name1 <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"events"</span> <span class="sc" style="color: #5E5E5E;">&amp;</span></span>
<span id="cb10-9">          name2 <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"competitions"</span> <span class="sc" style="color: #5E5E5E;">&amp;</span></span>
<span id="cb10-10">          name3 <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"date"</span></span>
<span id="cb10-11">      ) <span class="sc" style="color: #5E5E5E;">|</span> (</span>
<span id="cb10-12">        name1 <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"events"</span> <span class="sc" style="color: #5E5E5E;">&amp;</span></span>
<span id="cb10-13">          name2 <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"competitions"</span> <span class="sc" style="color: #5E5E5E;">&amp;</span></span>
<span id="cb10-14">          name3 <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"status"</span> <span class="sc" style="color: #5E5E5E;">&amp;</span></span>
<span id="cb10-15">          name4 <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"type"</span> <span class="sc" style="color: #5E5E5E;">&amp;</span></span>
<span id="cb10-16">          name5 <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"name"</span></span>
<span id="cb10-17">      ) <span class="sc" style="color: #5E5E5E;">|</span></span>
<span id="cb10-18">      (</span>
<span id="cb10-19">        name1 <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"events"</span> <span class="sc" style="color: #5E5E5E;">&amp;</span></span>
<span id="cb10-20">          name2 <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"competitions"</span> <span class="sc" style="color: #5E5E5E;">&amp;</span></span>
<span id="cb10-21">          name3 <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"competitors"</span> <span class="sc" style="color: #5E5E5E;">&amp;</span></span>
<span id="cb10-22">          name4 <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"score"</span></span>
<span id="cb10-23">      )</span>
<span id="cb10-24">  )</span>
<span id="cb10-25">df_filt</span>
<span id="cb10-26"><span class="co" style="color: #5E5E5E;">#&gt; # A tibble: 80 x 8</span></span>
<span id="cb10-27"><span class="co" style="color: #5E5E5E;">#&gt;    name1  name2        name3      name4 name5 name6 name7 value           </span></span>
<span id="cb10-28"><span class="co" style="color: #5E5E5E;">#&gt;    &lt;chr&gt;  &lt;chr&gt;        &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;           </span></span>
<span id="cb10-29"><span class="co" style="color: #5E5E5E;">#&gt;  1 events shortName    &lt;NA&gt;       &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  ATL @ PHI       </span></span>
<span id="cb10-30"><span class="co" style="color: #5E5E5E;">#&gt;  2 events competitions date       &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  2018-09-07T00:5~</span></span>
<span id="cb10-31"><span class="co" style="color: #5E5E5E;">#&gt;  3 events competitions competito~ score &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  18              </span></span>
<span id="cb10-32"><span class="co" style="color: #5E5E5E;">#&gt;  4 events competitions competito~ score &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  12              </span></span>
<span id="cb10-33"><span class="co" style="color: #5E5E5E;">#&gt;  5 events competitions status     type  name  &lt;NA&gt;  &lt;NA&gt;  STATUS_FINAL    </span></span>
<span id="cb10-34"><span class="co" style="color: #5E5E5E;">#&gt;  6 events shortName    &lt;NA&gt;       &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  PIT @ CLE       </span></span>
<span id="cb10-35"><span class="co" style="color: #5E5E5E;">#&gt;  7 events competitions date       &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  2018-09-09T17:0~</span></span>
<span id="cb10-36"><span class="co" style="color: #5E5E5E;">#&gt;  8 events competitions competito~ score &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  21              </span></span>
<span id="cb10-37"><span class="co" style="color: #5E5E5E;">#&gt;  9 events competitions competito~ score &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;  21              </span></span>
<span id="cb10-38"><span class="co" style="color: #5E5E5E;">#&gt; 10 events competitions status     type  name  &lt;NA&gt;  &lt;NA&gt;  STATUS_FINAL    </span></span>
<span id="cb10-39"><span class="co" style="color: #5E5E5E;">#&gt; # ... with 70 more rows</span></span></code></pre></div>
</details>
</div>
<p>Next, we’ll create appropriately named columns for the values that we filtered for in the step above. <sup>4</sup></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">df_clean1 <span class="ot" style="color: #003B4F;">&lt;-</span> df_filt <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb11-2">  <span class="fu" style="color: #4758AB;">select</span>(name3, name4, name5, value) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb11-3">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">status =</span> <span class="fu" style="color: #4758AB;">if_else</span>(name5 <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"name"</span>, value, <span class="cn" style="color: #8f5902;">NA_character_</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb11-4">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">isscore =</span> <span class="fu" style="color: #4758AB;">if_else</span>(name4 <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"score"</span>, <span class="cn" style="color: #8f5902;">TRUE</span>, <span class="cn" style="color: #8f5902;">FALSE</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb11-5">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">datetime =</span> <span class="fu" style="color: #4758AB;">if_else</span>(</span>
<span id="cb11-6">    name3 <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"date"</span>,</span>
<span id="cb11-7">    <span class="fu" style="color: #4758AB;">str_replace_all</span>(value, <span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">s?T</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">s?"</span>, <span class="st" style="color: #20794D;">" "</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">str_replace</span>(<span class="st" style="color: #20794D;">"Z$"</span>, <span class="st" style="color: #20794D;">""</span>),</span>
<span id="cb11-8">    <span class="cn" style="color: #8f5902;">NA_character_</span></span>
<span id="cb11-9">  )) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb11-10">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">gm =</span> <span class="fu" style="color: #4758AB;">if_else</span>(</span>
<span id="cb11-11">    <span class="fu" style="color: #4758AB;">is.na</span>(isscore) <span class="sc" style="color: #5E5E5E;">&amp;</span></span>
<span id="cb11-12">      <span class="fu" style="color: #4758AB;">is.na</span>(datetime) <span class="sc" style="color: #5E5E5E;">&amp;</span> <span class="fu" style="color: #4758AB;">is.na</span>(status),</span>
<span id="cb11-13">    value,</span>
<span id="cb11-14">    <span class="cn" style="color: #8f5902;">NA_character_</span></span>
<span id="cb11-15">  ))</span>
<span id="cb11-16">df_clean1</span>
<span id="cb11-17"><span class="co" style="color: #5E5E5E;">#&gt; # A tibble: 80 x 8</span></span>
<span id="cb11-18"><span class="co" style="color: #5E5E5E;">#&gt;    name3    name4 name5 value       status    isscore datetime     gm     </span></span>
<span id="cb11-19"><span class="co" style="color: #5E5E5E;">#&gt;    &lt;chr&gt;    &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;       &lt;chr&gt;     &lt;lgl&gt;   &lt;chr&gt;        &lt;chr&gt;  </span></span>
<span id="cb11-20"><span class="co" style="color: #5E5E5E;">#&gt;  1 &lt;NA&gt;     &lt;NA&gt;  &lt;NA&gt;  ATL @ PHI   &lt;NA&gt;      NA      &lt;NA&gt;         ATL @ ~</span></span>
<span id="cb11-21"><span class="co" style="color: #5E5E5E;">#&gt;  2 date     &lt;NA&gt;  &lt;NA&gt;  2018-09-07~ &lt;NA&gt;      NA      2018-09-07 ~ &lt;NA&gt;   </span></span>
<span id="cb11-22"><span class="co" style="color: #5E5E5E;">#&gt;  3 competi~ score &lt;NA&gt;  18          &lt;NA&gt;      TRUE    &lt;NA&gt;         &lt;NA&gt;   </span></span>
<span id="cb11-23"><span class="co" style="color: #5E5E5E;">#&gt;  4 competi~ score &lt;NA&gt;  12          &lt;NA&gt;      TRUE    &lt;NA&gt;         &lt;NA&gt;   </span></span>
<span id="cb11-24"><span class="co" style="color: #5E5E5E;">#&gt;  5 status   type  name  STATUS_FIN~ STATUS_F~ FALSE   &lt;NA&gt;         &lt;NA&gt;   </span></span>
<span id="cb11-25"><span class="co" style="color: #5E5E5E;">#&gt;  6 &lt;NA&gt;     &lt;NA&gt;  &lt;NA&gt;  PIT @ CLE   &lt;NA&gt;      NA      &lt;NA&gt;         PIT @ ~</span></span>
<span id="cb11-26"><span class="co" style="color: #5E5E5E;">#&gt;  7 date     &lt;NA&gt;  &lt;NA&gt;  2018-09-09~ &lt;NA&gt;      NA      2018-09-09 ~ &lt;NA&gt;   </span></span>
<span id="cb11-27"><span class="co" style="color: #5E5E5E;">#&gt;  8 competi~ score &lt;NA&gt;  21          &lt;NA&gt;      TRUE    &lt;NA&gt;         &lt;NA&gt;   </span></span>
<span id="cb11-28"><span class="co" style="color: #5E5E5E;">#&gt;  9 competi~ score &lt;NA&gt;  21          &lt;NA&gt;      TRUE    &lt;NA&gt;         &lt;NA&gt;   </span></span>
<span id="cb11-29"><span class="co" style="color: #5E5E5E;">#&gt; 10 status   type  name  STATUS_FIN~ STATUS_F~ FALSE   &lt;NA&gt;         &lt;NA&gt;   </span></span>
<span id="cb11-30"><span class="co" style="color: #5E5E5E;">#&gt; # ... with 70 more rows</span></span></code></pre></div>
</details>
</div>
<p>With these columns created, we can use <code>tidyr::fill()</code> and <code>dplyr::filter()</code> in a strategic manner to get rid of all the <code>NA</code>s cluttering our <code>tibble</code>. Additionally, we can drop the dummy <code>name</code> columns that we created with the <code>tidyr::separate()</code> call before.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">df_clean2 <span class="ot" style="color: #003B4F;">&lt;-</span> df_clean1 <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb12-2">  <span class="fu" style="color: #4758AB;">fill</span>(status, <span class="at" style="color: #657422;">.direction =</span> <span class="st" style="color: #20794D;">"up"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb12-3">  <span class="fu" style="color: #4758AB;">filter</span>(status <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"STATUS_FINAL"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb12-4">  <span class="fu" style="color: #4758AB;">fill</span>(gm, <span class="at" style="color: #657422;">.direction =</span> <span class="st" style="color: #20794D;">"down"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb12-5">  <span class="fu" style="color: #4758AB;">fill</span>(datetime, <span class="at" style="color: #657422;">.direction =</span> <span class="st" style="color: #20794D;">"down"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb12-6">  <span class="fu" style="color: #4758AB;">filter</span>(name3 <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">"competitors"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb12-7">  <span class="fu" style="color: #4758AB;">select</span>(<span class="sc" style="color: #5E5E5E;">-</span><span class="fu" style="color: #4758AB;">matches</span>(<span class="st" style="color: #20794D;">"name[0-9]"</span>))</span>
<span id="cb12-8">df_clean2</span>
<span id="cb12-9"><span class="co" style="color: #5E5E5E;">#&gt; # A tibble: 32 x 5</span></span>
<span id="cb12-10"><span class="co" style="color: #5E5E5E;">#&gt;    value status       isscore datetime         gm       </span></span>
<span id="cb12-11"><span class="co" style="color: #5E5E5E;">#&gt;    &lt;chr&gt; &lt;chr&gt;        &lt;lgl&gt;   &lt;chr&gt;            &lt;chr&gt;    </span></span>
<span id="cb12-12"><span class="co" style="color: #5E5E5E;">#&gt;  1 18    STATUS_FINAL TRUE    2018-09-07 00:55 ATL @ PHI</span></span>
<span id="cb12-13"><span class="co" style="color: #5E5E5E;">#&gt;  2 12    STATUS_FINAL TRUE    2018-09-07 00:55 ATL @ PHI</span></span>
<span id="cb12-14"><span class="co" style="color: #5E5E5E;">#&gt;  3 21    STATUS_FINAL TRUE    2018-09-09 17:00 PIT @ CLE</span></span>
<span id="cb12-15"><span class="co" style="color: #5E5E5E;">#&gt;  4 21    STATUS_FINAL TRUE    2018-09-09 17:00 PIT @ CLE</span></span>
<span id="cb12-16"><span class="co" style="color: #5E5E5E;">#&gt;  5 23    STATUS_FINAL TRUE    2018-09-09 17:00 CIN @ IND</span></span>
<span id="cb12-17"><span class="co" style="color: #5E5E5E;">#&gt;  6 34    STATUS_FINAL TRUE    2018-09-09 17:00 CIN @ IND</span></span>
<span id="cb12-18"><span class="co" style="color: #5E5E5E;">#&gt;  7 27    STATUS_FINAL TRUE    2018-09-09 17:00 TEN @ MIA</span></span>
<span id="cb12-19"><span class="co" style="color: #5E5E5E;">#&gt;  8 20    STATUS_FINAL TRUE    2018-09-09 17:00 TEN @ MIA</span></span>
<span id="cb12-20"><span class="co" style="color: #5E5E5E;">#&gt;  9 24    STATUS_FINAL TRUE    2018-09-09 17:00 SF @ MIN </span></span>
<span id="cb12-21"><span class="co" style="color: #5E5E5E;">#&gt; 10 16    STATUS_FINAL TRUE    2018-09-09 17:00 SF @ MIN </span></span>
<span id="cb12-22"><span class="co" style="color: #5E5E5E;">#&gt; # ... with 22 more rows</span></span></code></pre></div>
</details>
</div>
<p>Finally, we can use a chain of <a href="https://cran.r-project.org/web/packages/dplyr/index.html"><code>{dplyr}</code></a> actions to get a pretty output. I should note that it is likely that everything up to this point would have an analogous action no matter what the data set is that you are working with. However, these final actions are unique to this specific data.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1">df_clean3 <span class="ot" style="color: #003B4F;">&lt;-</span> df_clean2 <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-2">  <span class="fu" style="color: #4758AB;">group_by</span>(gm) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb13-3">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">rn =</span> <span class="fu" style="color: #4758AB;">row_number</span>()) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb13-4">  <span class="fu" style="color: #4758AB;">ungroup</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb13-5">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">tm_dir =</span> <span class="fu" style="color: #4758AB;">if_else</span>(rn <span class="sc" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="st" style="color: #20794D;">"pts_home"</span>, <span class="st" style="color: #20794D;">"pts_away"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb13-6">  <span class="fu" style="color: #4758AB;">select</span>(datetime, gm, tm_dir, value) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb13-7">  <span class="fu" style="color: #4758AB;">spread</span>(tm_dir, value) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb13-8">  <span class="fu" style="color: #4758AB;">separate</span>(gm, <span class="at" style="color: #657422;">into =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"tm_away"</span>, <span class="st" style="color: #20794D;">"tm_home"</span>), <span class="at" style="color: #657422;">sep =</span> <span class="st" style="color: #20794D;">"(</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">s+</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">@</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">s+)|(</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">s+vs.*</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">s+)"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb13-9">  <span class="fu" style="color: #4758AB;">mutate_at</span>(<span class="fu" style="color: #4758AB;">vars</span>(<span class="fu" style="color: #4758AB;">matches</span>(<span class="st" style="color: #20794D;">"pts"</span>)), <span class="fu" style="color: #4758AB;">funs</span>(as.integer)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb13-10">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">date =</span> datetime <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">str_remove</span>(<span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">s.*$"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> lubridate<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">ymd</span>()) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb13-11">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">time =</span> datetime <span class="sc" style="color: #5E5E5E;">%&gt;%</span> lubridate<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">ymd_hm</span>()) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb13-12">  <span class="fu" style="color: #4758AB;">select</span>(date, time, tm_home, tm_away, pts_home, pts_away)</span>
<span id="cb13-13">df_clean3</span>
<span id="cb13-14"><span class="co" style="color: #5E5E5E;">#&gt; # A tibble: 16 x 6</span></span>
<span id="cb13-15"><span class="co" style="color: #5E5E5E;">#&gt;    date       time                tm_home tm_away pts_home pts_away</span></span>
<span id="cb13-16"><span class="co" style="color: #5E5E5E;">#&gt;    &lt;date&gt;     &lt;dttm&gt;              &lt;chr&gt;   &lt;chr&gt;      &lt;int&gt;    &lt;int&gt;</span></span>
<span id="cb13-17"><span class="co" style="color: #5E5E5E;">#&gt;  1 2018-09-07 2018-09-07 00:55:00 PHI     ATL           18       12</span></span>
<span id="cb13-18"><span class="co" style="color: #5E5E5E;">#&gt;  2 2018-09-09 2018-09-09 17:00:00 BAL     BUF           47        3</span></span>
<span id="cb13-19"><span class="co" style="color: #5E5E5E;">#&gt;  3 2018-09-09 2018-09-09 17:00:00 IND     CIN           23       34</span></span>
<span id="cb13-20"><span class="co" style="color: #5E5E5E;">#&gt;  4 2018-09-09 2018-09-09 17:00:00 NE      HOU           27       20</span></span>
<span id="cb13-21"><span class="co" style="color: #5E5E5E;">#&gt;  5 2018-09-09 2018-09-09 17:00:00 NYG     JAX           15       20</span></span>
<span id="cb13-22"><span class="co" style="color: #5E5E5E;">#&gt;  6 2018-09-09 2018-09-09 17:00:00 CLE     PIT           21       21</span></span>
<span id="cb13-23"><span class="co" style="color: #5E5E5E;">#&gt;  7 2018-09-09 2018-09-09 17:00:00 MIN     SF            24       16</span></span>
<span id="cb13-24"><span class="co" style="color: #5E5E5E;">#&gt;  8 2018-09-09 2018-09-09 17:00:00 NO      TB            40       48</span></span>
<span id="cb13-25"><span class="co" style="color: #5E5E5E;">#&gt;  9 2018-09-09 2018-09-09 17:00:00 MIA     TEN           27       20</span></span>
<span id="cb13-26"><span class="co" style="color: #5E5E5E;">#&gt; 10 2018-09-09 2018-09-09 20:05:00 LAC     KC            28       38</span></span>
<span id="cb13-27"><span class="co" style="color: #5E5E5E;">#&gt; 11 2018-09-09 2018-09-09 20:25:00 CAR     DAL           16        8</span></span>
<span id="cb13-28"><span class="co" style="color: #5E5E5E;">#&gt; 12 2018-09-09 2018-09-09 20:25:00 DEN     SEA           27       24</span></span>
<span id="cb13-29"><span class="co" style="color: #5E5E5E;">#&gt; 13 2018-09-09 2018-09-09 20:25:00 ARI     WSH            6       24</span></span>
<span id="cb13-30"><span class="co" style="color: #5E5E5E;">#&gt; 14 2018-09-10 2018-09-10 00:20:00 GB      CHI           24       23</span></span>
<span id="cb13-31"><span class="co" style="color: #5E5E5E;">#&gt; 15 2018-09-10 2018-09-10 23:10:00 DET     NYJ           17       48</span></span>
<span id="cb13-32"><span class="co" style="color: #5E5E5E;">#&gt; 16 2018-09-11 2018-09-11 02:20:00 OAK     LAR           13       33</span></span></code></pre></div>
</details>
</div>
<p>And there we have it! A nice, tidy <code>tibble</code> with the scores of the first week of regular season games in the 2018 NFL regular season.</p>
<p>#&gt; Sign-off</p>
<p>Hopefully someone out there will find the technique(s) shown in this post to be useful for an endeavor of their own.</p>
<p>Personally, I find web scraping to be fascinating, so I doubt this will be the last time I write about something of this nature.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>I use <code>data.frame</code> and <code>tibble</code> interchangeably. See <a href="http://r4ds.had.co.nz/tibbles.html">this chapter</a> of the <a href="http://r4ds.had.co.nz/"><strong><em>R for Data Science</em></strong></a> for more details about the differences/similarities between the two.↩︎</p></li>
<li id="fn2"><p>(See the webpage here: <a href="http://www.espn.com/nfl/scoreboard/_/year/2018/seasontype/2/week/1" class="uri">http://www.espn.com/nfl/scoreboard/_/year/2018/seasontype/2/week/1</a>. Note that we won’t be scraping the html, but, instead, the underlying JSON from which the html is generated.)↩︎</p></li>
<li id="fn3"><p>I say that it’s a secret because it’s API documentation is out of date.↩︎</p></li>
<li id="fn4"><p>I don’t recommend suffixing variable names with numbers as I do in the next couple of step (i.e.&nbsp;variables suffixed with <code>1</code>, <code>2</code>, …) (It’s ugly!) In practice, you might do this during your exploratory phase of data scraping/analysis, but you should come up with more informative names and combine actions in a logical manner for your final script/package (in my opinion).↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>r</category>
  <guid>https://itsmetoeknee.netlify.app/posts/nested-json-to-tidy-data-frame-r/index.html</guid>
  <pubDate>Sat, 20 Oct 2018 05:00:00 GMT</pubDate>
  <media:content url="https://itsmetoeknee.netlify.app/posts/nested-json-to-tidy-data-frame-r/featured.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Thoughts on Using Flexdashboard</title>
  <dc:creator>Tony ElHabr</dc:creator>
  <link>https://itsmetoeknee.netlify.app/posts/using-flexdashboard/index.html</link>
  <description><![CDATA[ 



<p>I’ve experimented with the <a href="https://rmarkdown.rstudio.com/flexdashboard/"><code>{flexdashboard}</code> package</a> for a couple of things after first trying out not so long ago. In particular, I found the <a href="https://rmarkdown.rstudio.com/flexdashboard/using.html#storyboards">storyboard</a> format to be my favorite. I used it to create the storyboard for tracking the activity of NBA team Twitter accounts.</p>
<p><img src="https://itsmetoeknee.netlify.app/posts/using-flexdashboard/viz_unigram_cnts_facet.png" class="img-fluid"></p>
<p>Recently, I’ve been experimenting with the storyboard <code>{flexdashboard}</code> format for visualizing the weekly NFL picks that I do.</p>
<p><img src="https://itsmetoeknee.netlify.app/posts/using-flexdashboard/nfl-picks.png" class="img-fluid"></p>
<section id="the-alternatives" class="level2">
<h2 class="anchored" data-anchor-id="the-alternatives">The Alternatives</h2>
<p>In all, I have found <code>{flexdashboard}</code>s to be an extremely effective format. It functions as a good compromise among a number of different alternatives.</p>
<ul>
<li><p><em>A “standard” document knitted from a .Rmd file</em> (e.g.&nbsp;HTML, Markdown, Word, or PDF). In my opinion, the main advantage of <code>{flexdashboard}</code> compared to the traditional .Rmd-<code>knitr</code>-Rmarkdown workflow is the ease with which <a href="https://shiny.rstudio.com/"><code>shiny</code></a> apps and other interactive formats (e.g.&nbsp;<a href="https://www.htmlwidgets.org/"><code>htmlwidgets</code></a> can be integrated. <sup>1</sup></p></li>
<li><p><em>A presentation knitted from a .Rmd file</em> (i.e.&nbsp;a <code>beamer_presentation</code>, <code>ioslides_presentation</code>, <code>slidy_presentation</code>, or a <code>revealjs::revealjs_presentation</code>). Compared to these formats, I have found that modifying the default styling of the base CSS is much simpler with the themes in the <code>{flexdashboard}</code> package.</p></li>
<li><p><em>A “standard” R presentation</em> (with the .Rpres extension). I must admit that I don’t have much experience with the .Rpres format–I prefer Rmarkdown and the capability that it offers to create different kinds of output from a single “base” file.</p></li>
<li><p><em>A <a href="https://rstudio.github.io/shinydashboard/"><code>{shinydashboard}</code></a></em>. In comparison to <code>shinydashboard</code>s, I like the “light-weight” framework offered by <code>{flexdashboard}</code>. While <code>shinydashboard</code> is certainly a better option for developing a complex dashboard (perhaps for a business purpose), this is not typically my use case.</p></li>
</ul>
</section>
<section id="some-other-opinions" class="level2">
<h2 class="anchored" data-anchor-id="some-other-opinions">Some Other Opinions</h2>
<p>Here’s a couple of my other thoughts and tips for using <code>{flexdashboard}</code>:</p>
<ul>
<li>Adding <code>JavaScript</code> functionality is straightforward.</li>
</ul>
<p>For example, I have used the following snippet of code to add functionality for a “toggle” button to show/hide code.</p>
<pre><code>&lt;script&gt;
  $(".toggle").click(function() {
    $(this).toggleClass("open");
  });
&lt;/script&gt;</code></pre>
<ul>
<li>Customizing the colors and styles (with <code>.css</code>) is also simple.</li>
</ul>
<p>When modifying a theme’s CSS, the typical/recommended approach is to use the browser’s “Inspect” tool (or some browser extension such as <a href="http://selectorgadget.com/">Selector Gadget</a> to identify which specific styles to adjust.</p>
<p>For example, if the theme that is chosen for the <code>{flexdashboard}</code> (in particular, the <code>storyboard</code> format) uses the same styling for code and its output, the following CSS code can be used to distinguish the two.</p>
<pre><code>pre.sourceCode.r {
  background-color: #ffffff;
}</code></pre>
<p>To add to this technique, because the CSS files in the <code>{flexdashboard}</code> package, it’s not too difficult to simply pick out the file for the theme that is being used (see the <a href="https://github.com/rstudio/flexdashboard/blob/master/inst/rmarkdown/templates/flex_dashboard/resources/"><code>resources/</code> folder</a> in the <a href="https://github.com/rstudio/flexdashboard">package’s GitHub repo</a>) and quickly identify what to modify.</p>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>As if I need to re-iterate it again, I would highly recommend trying out the <code>{flexdashboard}</code> package. If anything, you’ll learn that you don’t like it.</p>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>These can also be be embedded into .html files knitted from a .Rmdfile, but I think that it’s more natural in the <code>{flexdashboard}</code> context. Also, I believe that the HTML format is the only standard .Rmd output format that has interactive capability, so other output formats cannot be used if opting for the <code>knitr</code>-Rmarkdown combo.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>r</category>
  <guid>https://itsmetoeknee.netlify.app/posts/using-flexdashboard/index.html</guid>
  <pubDate>Mon, 30 Apr 2018 05:00:00 GMT</pubDate>
  <media:content url="https://itsmetoeknee.netlify.app/posts/using-flexdashboard/featured.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>A Meta Analysis of R Weekly Posts</title>
  <dc:creator>Tony ElHabr</dc:creator>
  <link>https://itsmetoeknee.netlify.app/posts/text-analysis-rweekly/index.html</link>
  <description><![CDATA[ 



<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>I’m always intrigued by data science “meta” analyses or programming/data-science. For example, <a href="http://www.business-science.io/learning-r/2018/03/03/how_to_learn_R_pt1.html">Matt Dancho’s analysis of renown data scientist David Robinson</a>. <a href="http://varianceexplained.org/">David Robinson</a> himself has done some good ones, such as <a href="https://stackoverflow.blog/2017/09/06/incredible-growth-python/">his blog posts for <em>Stack Overflow</em> highlighting the growth of “incredible” growth of python</a>, and <a href="https://stackoverflow.blog/2017/10/10/impressive-growth-r/">the “impressive” growth of R</a> in modern times.</p>
<p>With that in mind, I thought it would try to identify if any interesting trends have risen/fallen <em>within</em> the R community in recent years. To do this, I scraped and analyzed the “weekly roundup” posts put together by <a href="https://rweekly.org/"><em>R Weekly</em></a>, which was originated in May 2016. These posts consist of links and corresponding descriptions, grouped together by topic. It should go without saying that this content serves as a reasonable heuristic for the interests of the <code>R</code> community at any one point in time. (Of course, the posts of other aggregate R blogs such as <a href="https://www.r-bloggers.com/">R Bloggers</a> or <a href="http://blog.revolutionanalytics.com/">Revolution Analytics</a> might serve as better resources since they post more frequently and have been around for quite a bit longer than R Weekly.)</p>
</section>
<section id="scraping-and-cleaning" class="level2">
<h2 class="anchored" data-anchor-id="scraping-and-cleaning">Scraping and Cleaning</h2>
<p>As always, it’s good to follow the best practice of importing all needed packages before beginning.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(gh)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">library</span>(viridisLite)</span></code></pre></div>
</details>
</div>
<p>For the scraping, I drew upon some the principles shown by <a href="http://www.masalmon.eu/">Maelle Salmon</a> in <a href="https://itsalocke.com/blog/markdown-based-web-analytics-rectangle-your-blog/">her write-up</a> detailing how she scraped and cleaned the blog posts of the <a href="https://itsalocke.com/blog">Locke Data blog</a>. <sup>1</sup></p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># Reference: https://itsalocke.com/blog/markdown-based-web-analytics-rectangle-your-blog/</span></span>
<span id="cb2-2">posts <span class="ot" style="color: #003B4F;">&lt;-</span> gh<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">gh</span>(</span>
<span id="cb2-3">  <span class="at" style="color: #657422;">endpoint =</span> <span class="st" style="color: #20794D;">"/repos/:owner/:repo/contents/:path"</span>,</span>
<span id="cb2-4">  <span class="at" style="color: #657422;">owner =</span> <span class="st" style="color: #20794D;">"rweekly"</span>,</span>
<span id="cb2-5">  <span class="at" style="color: #657422;">repo =</span> <span class="st" style="color: #20794D;">"rweekly.org"</span>,</span>
<span id="cb2-6">  <span class="at" style="color: #657422;">path =</span> <span class="st" style="color: #20794D;">"_posts"</span></span>
<span id="cb2-7">)</span>
<span id="cb2-8"></span>
<span id="cb2-9">posts_info <span class="ot" style="color: #003B4F;">&lt;-</span> dplyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">data_frame</span>(</span>
<span id="cb2-10">  <span class="at" style="color: #657422;">name =</span> purrr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">map_chr</span>(posts, <span class="st" style="color: #20794D;">"name"</span>),</span>
<span id="cb2-11">  <span class="at" style="color: #657422;">path =</span> purrr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">map_chr</span>(posts, <span class="st" style="color: #20794D;">"path"</span>)</span>
<span id="cb2-12">)</span></code></pre></div>
</details>
</div>
<p>In all, R Weekly has made 93 (at the time of writing).</p>
<p>Next, before parsing the text of the posts, I add some “meta-data” (mostly for dates) that is helpful for subsequent exploration and analysis.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">convert_name_to_date <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(x) {</span>
<span id="cb3-2">  x <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-3">    stringr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">str_extract</span>(<span class="st" style="color: #20794D;">"[0-9]{4}-[0-9]+-[0-9]+"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-4">    <span class="fu" style="color: #4758AB;">strftime</span>(<span class="st" style="color: #20794D;">"%Y-%m-%d"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-5">    lubridate<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">ymd</span>()</span>
<span id="cb3-6">}</span>
<span id="cb3-7"></span>
<span id="cb3-8">posts_info <span class="ot" style="color: #003B4F;">&lt;-</span> posts_info <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-9">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">date =</span> <span class="fu" style="color: #4758AB;">convert_name_to_date</span>(name)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-10">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">num_post =</span> <span class="fu" style="color: #4758AB;">row_number</span>(date)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-11">  <span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb3-12">    <span class="at" style="color: #657422;">yyyy =</span> lubridate<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">year</span>(date) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">as.integer</span>(),</span>
<span id="cb3-13">    <span class="at" style="color: #657422;">mm =</span> lubridate<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">month</span>(date, <span class="at" style="color: #657422;">label =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb3-14">    <span class="at" style="color: #657422;">wd =</span> lubridate<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">wday</span>(date, <span class="at" style="color: #657422;">label =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb3-15">  ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-16">  <span class="fu" style="color: #4758AB;">select</span>(date, yyyy, mm, wd, num_post, <span class="fu" style="color: #4758AB;">everything</span>())</span>
<span id="cb3-17"></span>
<span id="cb3-18">posts_info <span class="ot" style="color: #003B4F;">&lt;-</span> posts_info <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-19">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">date_min =</span> <span class="fu" style="color: #4758AB;">min</span>(date), <span class="at" style="color: #657422;">date_max =</span> <span class="fu" style="color: #4758AB;">max</span>(date)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-20">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">date_lag =</span> date <span class="sc" style="color: #5E5E5E;">-</span> date_min) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-21">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">date_lag30 =</span> <span class="fu" style="color: #4758AB;">as.integer</span>(<span class="fu" style="color: #4758AB;">round</span>(date_lag <span class="sc" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">30</span>, <span class="dv" style="color: #AD0000;">0</span>)), </span>
<span id="cb3-22">         <span class="at" style="color: #657422;">date_lag60 =</span> <span class="fu" style="color: #4758AB;">as.integer</span>(<span class="fu" style="color: #4758AB;">round</span>(date_lag <span class="sc" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">60</span>, <span class="dv" style="color: #AD0000;">0</span>)), </span>
<span id="cb3-23">         <span class="at" style="color: #657422;">date_ntile =</span> <span class="fu" style="color: #4758AB;">ntile</span>(date, <span class="dv" style="color: #AD0000;">6</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-24">  <span class="fu" style="color: #4758AB;">select</span>(<span class="sc" style="color: #5E5E5E;">-</span>date_min, <span class="sc" style="color: #5E5E5E;">-</span>date_max) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb3-25">  <span class="fu" style="color: #4758AB;">select</span>(date_lag, date_lag30, date_lag60, date_ntile, <span class="fu" style="color: #4758AB;">everything</span>())</span></code></pre></div>
</details>
</div>
<p>Let’s quickly look at whether or not R Weekly has been consistent with its posting frequency since its inception. The number of posts across 30-day windows should be around 4 or 5.</p>
<p><img src="https://itsmetoeknee.netlify.app/posts/text-analysis-rweekly/explore_time-1.png" class="img-fluid"></p>
<p>Now, I’ll do the dirty work of cleaning and parsing the text of each post.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">get_rweekly_post_data <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="cf" style="color: #003B4F;">function</span>(filepath) {</span>
<span id="cb4-2"></span>
<span id="cb4-3">  path_prefix <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"data-raw"</span></span>
<span id="cb4-4">  path <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">file.path</span>(path_prefix, path)</span>
<span id="cb4-5">  rgx_rmv <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"Â|Å|â€|œ|\u009d"</span></span>
<span id="cb4-6">  rgx_detect_link <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"^</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">+</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">s+</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">["</span></span>
<span id="cb4-7">  rgx_detect_head <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"^</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">s*</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">#"</span></span>
<span id="cb4-8">  rgx_link_post <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"(?&lt;=</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">+</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">s</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">[).*(?=</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">])"</span></span>
<span id="cb4-9">  rgx_link_img <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"(?&lt;=</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">!</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">[).*(?=</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">])"</span></span>
<span id="cb4-10">  rgx_url <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"(?&lt;=</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">().*(?=</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">))"</span></span>
<span id="cb4-11">  rgx_head <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"(?&lt;=</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">#</span><span class="sc" style="color: #5E5E5E;">\\</span><span class="st" style="color: #20794D;">s).*$"</span></span>
<span id="cb4-12">  </span>
<span id="cb4-13">  lines <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">readLines</span>(path)</span>
<span id="cb4-14">  lines_proc <span class="ot" style="color: #003B4F;">&lt;-</span> lines <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb4-15">    <span class="co" style="color: #5E5E5E;"># This would be necessary if downloading directly from the repo.</span></span>
<span id="cb4-16">    <span class="co" style="color: #5E5E5E;"># base64enc::base64decode() %&gt;%</span></span>
<span id="cb4-17">    <span class="co" style="color: #5E5E5E;"># rawToChar() %&gt;%</span></span>
<span id="cb4-18">    stringr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">str_split</span>(<span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">\n</span><span class="st" style="color: #20794D;">"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb4-19">    purrr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">flatten_chr</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb4-20">    <span class="fu" style="color: #4758AB;">as_tibble</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb4-21">    <span class="fu" style="color: #4758AB;">rename</span>(<span class="at" style="color: #657422;">text =</span> value) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb4-22">    <span class="fu" style="color: #4758AB;">transmute</span>(<span class="at" style="color: #657422;">line =</span> <span class="fu" style="color: #4758AB;">row_number</span>(), text) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb4-23">    <span class="fu" style="color: #4758AB;">filter</span>(text <span class="sc" style="color: #5E5E5E;">!=</span> <span class="st" style="color: #20794D;">""</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb4-24">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">text =</span> stringr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">str_replace_all</span>(text, rgx_rmv, <span class="st" style="color: #20794D;">""</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb4-25">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">text =</span> stringr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">str_replace_all</span>(text, <span class="st" style="color: #20794D;">"&amp;"</span>, <span class="st" style="color: #20794D;">"and"</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-26">    <span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb4-27">      <span class="at" style="color: #657422;">is_link =</span> <span class="fu" style="color: #4758AB;">ifelse</span>(stringr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">str_detect</span>(text, rgx_detect_link), <span class="cn" style="color: #8f5902;">TRUE</span>, <span class="cn" style="color: #8f5902;">FALSE</span>),</span>
<span id="cb4-28">      <span class="at" style="color: #657422;">is_head =</span> <span class="fu" style="color: #4758AB;">ifelse</span>(stringr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">str_detect</span>(text, rgx_detect_head), <span class="cn" style="color: #8f5902;">TRUE</span>, <span class="cn" style="color: #8f5902;">FALSE</span>)</span>
<span id="cb4-29">    ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb4-30">    <span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb4-31">      <span class="at" style="color: #657422;">link_post =</span> stringr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">str_extract</span>(text, rgx_link_post),</span>
<span id="cb4-32">      <span class="at" style="color: #657422;">link_img =</span> stringr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">str_extract</span>(text, rgx_link_img),</span>
<span id="cb4-33">      <span class="at" style="color: #657422;">url =</span> stringr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">str_extract</span>(text, rgx_url),</span>
<span id="cb4-34">      <span class="at" style="color: #657422;">head =</span> </span>
<span id="cb4-35">        stringr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">str_extract</span>(text, rgx_head) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-36">        stringr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">str_to_lower</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-37">        stringr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">str_replace_all</span>(<span class="st" style="color: #20794D;">"s$"</span>, <span class="st" style="color: #20794D;">""</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-38">        stringr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">str_replace_all</span>(<span class="st" style="color: #20794D;">" the"</span>, <span class="st" style="color: #20794D;">""</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-39">        stringr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">str_trim</span>()</span>
<span id="cb4-40">    ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb4-41">    <span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb4-42">      <span class="at" style="color: #657422;">is_head =</span> <span class="fu" style="color: #4758AB;">ifelse</span>(line <span class="sc" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="cn" style="color: #8f5902;">TRUE</span>, is_head),</span>
<span id="cb4-43">      <span class="at" style="color: #657422;">head =</span> <span class="fu" style="color: #4758AB;">ifelse</span>(line <span class="sc" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">1</span>, <span class="st" style="color: #20794D;">"yaml and intro"</span>, head)</span>
<span id="cb4-44">    )</span>
<span id="cb4-45">  </span>
<span id="cb4-46">  <span class="co" style="color: #5E5E5E;"># Couldn't seem to get `zoo::na.locf()` to work properly.</span></span>
<span id="cb4-47">  lines_head <span class="ot" style="color: #003B4F;">&lt;-</span> lines_proc <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb4-48">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">line_head =</span> <span class="fu" style="color: #4758AB;">ifelse</span>(is_head, line, <span class="dv" style="color: #AD0000;">0</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb4-49">    <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">line_head =</span> <span class="fu" style="color: #4758AB;">cumsum</span>(line_head))</span>
<span id="cb4-50">  </span>
<span id="cb4-51">  lines_head <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb4-52">    <span class="fu" style="color: #4758AB;">select</span>(<span class="sc" style="color: #5E5E5E;">-</span>head) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb4-53">    <span class="fu" style="color: #4758AB;">inner_join</span>(</span>
<span id="cb4-54">      lines_head <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb4-55">        <span class="fu" style="color: #4758AB;">filter</span>(is_head <span class="sc" style="color: #5E5E5E;">==</span> <span class="cn" style="color: #8f5902;">TRUE</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb4-56">        <span class="fu" style="color: #4758AB;">select</span>(head, line_head),</span>
<span id="cb4-57">      <span class="at" style="color: #657422;">by =</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"line_head"</span>)</span>
<span id="cb4-58">    ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-59">    <span class="fu" style="color: #4758AB;">select</span>(<span class="sc" style="color: #5E5E5E;">-</span>line_head)</span>
<span id="cb4-60">}</span>
<span id="cb4-61"></span>
<span id="cb4-62">data <span class="ot" style="color: #003B4F;">&lt;-</span> posts_info <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-63">  tidyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">nest</span>(path, <span class="at" style="color: #657422;">.key =</span> <span class="st" style="color: #20794D;">"path"</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-64">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">data =</span> purrr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">map</span>(path, get_rweekly_post_data)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-65">  <span class="fu" style="color: #4758AB;">select</span>(<span class="sc" style="color: #5E5E5E;">-</span>path) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb4-66">  tidyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">unnest</span>(data)</span></code></pre></div>
</details>
</div>
</section>
<section id="analyzing" class="level2">
<h2 class="anchored" data-anchor-id="analyzing">Analyzing</h2>
<section id="lines-and-links" class="level3">
<h3 class="anchored" data-anchor-id="lines-and-links">Lines and Links</h3>
<p>Now, with the data in a workable format, we can explore some of the content.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">metrics_bypost <span class="ot" style="color: #003B4F;">&lt;-</span> data <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-2">  <span class="fu" style="color: #4758AB;">group_by</span>(name, date) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-3">  <span class="fu" style="color: #4758AB;">summarize</span>(</span>
<span id="cb5-4">    <span class="at" style="color: #657422;">num_lines =</span> <span class="fu" style="color: #4758AB;">max</span>(line),</span>
<span id="cb5-5">    <span class="at" style="color: #657422;">num_links =</span> <span class="fu" style="color: #4758AB;">sum</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(is_link)),</span>
<span id="cb5-6">    <span class="at" style="color: #657422;">num_links_post =</span> <span class="fu" style="color: #4758AB;">sum</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(link_post)),</span>
<span id="cb5-7">    <span class="at" style="color: #657422;">num_links_img =</span> <span class="fu" style="color: #4758AB;">sum</span>(<span class="sc" style="color: #5E5E5E;">!</span><span class="fu" style="color: #4758AB;">is.na</span>(link_img))</span>
<span id="cb5-8">  ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-9">  <span class="fu" style="color: #4758AB;">ungroup</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb5-10">  <span class="fu" style="color: #4758AB;">arrange</span>(<span class="fu" style="color: #4758AB;">desc</span>(num_lines))</span></code></pre></div>
</details>
</div>
<p>Have the number of links per post increased over time?</p>
<p><img src="https://itsmetoeknee.netlify.app/posts/text-analysis-rweekly/viz_metrics_cnt_bypost-1.png" class="img-fluid"></p>
<p>It looks like there has been a correlated increase in the overall length of the posts (as determined by non-empty lines) and the number of links in each post.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">corrr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">correlate</span>(metrics_bypost <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">select</span>(num_lines, num_links))</span>
<span id="cb6-2"><span class="co" style="color: #5E5E5E;">#&gt; # A tibble: 2 x 3</span></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;">#&gt;   rowname   num_lines num_links</span></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;">#&gt;   &lt;chr&gt;         &lt;dbl&gt;     &lt;dbl&gt;</span></span>
<span id="cb6-5"><span class="co" style="color: #5E5E5E;">#&gt; 1 num_lines    NA         0.970</span></span>
<span id="cb6-6"><span class="co" style="color: #5E5E5E;">#&gt; 2 num_links     0.970    NA</span></span></code></pre></div>
</details>
</div>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">broom<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">tidy</span>(<span class="fu" style="color: #4758AB;">lm</span>(num_lines <span class="sc" style="color: #5E5E5E;">~</span> num_links, <span class="at" style="color: #657422;">data =</span> metrics_bypost))</span>
<span id="cb7-2"><span class="co" style="color: #5E5E5E;">#&gt;          term  estimate  std.error statistic      p.value</span></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;">#&gt; 1 (Intercept) 12.317353 4.93345168  2.496701 1.433479e-02</span></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;">#&gt; 2   num_links  1.796912 0.04754462 37.794219 2.016525e-57</span></span></code></pre></div>
</details>
</div>
<p>Let’s break down the increase of the number of links over time. Are there more links simply due to an increased use of images?</p>
<p><img src="https://itsmetoeknee.netlify.app/posts/text-analysis-rweekly/viz_links_cnt_bypost-1.png" class="img-fluid"></p>
<p>It is evident that the increase in the number of links is not the result of increased image usage, but, instead, to increased linkage to non-trivial content.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">corrr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">correlate</span>(metrics_bypost <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">select</span>(num_links, num_links_img, num_links_post))</span>
<span id="cb8-2"><span class="co" style="color: #5E5E5E;">#&gt; # A tibble: 3 x 4</span></span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;">#&gt;   rowname        num_links num_links_img num_links_post</span></span>
<span id="cb8-4"><span class="co" style="color: #5E5E5E;">#&gt;   &lt;chr&gt;              &lt;dbl&gt;         &lt;dbl&gt;          &lt;dbl&gt;</span></span>
<span id="cb8-5"><span class="co" style="color: #5E5E5E;">#&gt; 1 num_links         NA             0.324          0.865</span></span>
<span id="cb8-6"><span class="co" style="color: #5E5E5E;">#&gt; 2 num_links_img      0.324        NA              0.264</span></span>
<span id="cb8-7"><span class="co" style="color: #5E5E5E;">#&gt; 3 num_links_post     0.865         0.264         NA</span></span></code></pre></div>
</details>
</div>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">broom<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">tidy</span>(<span class="fu" style="color: #4758AB;">lm</span>(num_links <span class="sc" style="color: #5E5E5E;">~</span> num_links_img <span class="sc" style="color: #5E5E5E;">+</span> num_links_post, <span class="at" style="color: #657422;">data =</span> metrics_bypost))</span>
<span id="cb9-2"><span class="co" style="color: #5E5E5E;">#&gt;             term  estimate std.error statistic      p.value</span></span>
<span id="cb9-3"><span class="co" style="color: #5E5E5E;">#&gt; 1    (Intercept) 29.094312 4.7262724  6.155869 2.040398e-08</span></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;">#&gt; 2  num_links_img  1.008073 0.5275685  1.910790 5.921483e-02</span></span>
<span id="cb9-5"><span class="co" style="color: #5E5E5E;">#&gt; 3 num_links_post  1.168952 0.0749660 15.593093 2.586469e-27</span></span></code></pre></div>
</details>
</div>
<p>R Weeklyuses a fairly consistent set of “topics” (corresponding to the <code>head</code> variable in the scraped data) across all of their posts.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">head_rmv <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">"yaml and intro"</span></span>
<span id="cb10-2">data <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb10-3">  <span class="fu" style="color: #4758AB;">distinct</span>(head, name) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb10-4">  <span class="fu" style="color: #4758AB;">filter</span>(<span class="sc" style="color: #5E5E5E;">!</span>(head <span class="sc" style="color: #5E5E5E;">%in%</span> head_rmv)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span> </span>
<span id="cb10-5">  <span class="fu" style="color: #4758AB;">count</span>(head, <span class="at" style="color: #657422;">sort =</span> <span class="cn" style="color: #8f5902;">TRUE</span>)</span>
<span id="cb10-6"><span class="co" style="color: #5E5E5E;">#&gt; # A tibble: 44 x 2</span></span>
<span id="cb10-7"><span class="co" style="color: #5E5E5E;">#&gt;    head                   n</span></span>
<span id="cb10-8"><span class="co" style="color: #5E5E5E;">#&gt;    &lt;chr&gt;              &lt;int&gt;</span></span>
<span id="cb10-9"><span class="co" style="color: #5E5E5E;">#&gt;  1 r in real world       92</span></span>
<span id="cb10-10"><span class="co" style="color: #5E5E5E;">#&gt;  2 tutorial              92</span></span>
<span id="cb10-11"><span class="co" style="color: #5E5E5E;">#&gt;  3 upcoming event        92</span></span>
<span id="cb10-12"><span class="co" style="color: #5E5E5E;">#&gt;  4 highlight             89</span></span>
<span id="cb10-13"><span class="co" style="color: #5E5E5E;">#&gt;  5 r project update      89</span></span>
<span id="cb10-14"><span class="co" style="color: #5E5E5E;">#&gt;  6 r in organization     80</span></span>
<span id="cb10-15"><span class="co" style="color: #5E5E5E;">#&gt;  7 resource              71</span></span>
<span id="cb10-16"><span class="co" style="color: #5E5E5E;">#&gt;  8 quotes of week        63</span></span>
<span id="cb10-17"><span class="co" style="color: #5E5E5E;">#&gt;  9 insight               55</span></span>
<span id="cb10-18"><span class="co" style="color: #5E5E5E;">#&gt; 10 videos and podcast    55</span></span>
<span id="cb10-19"><span class="co" style="color: #5E5E5E;">#&gt; # ... with 34 more rows</span></span></code></pre></div>
</details>
</div>
<p>Is there a certain topic (or topics) in the RWeekly posts that are causing the increased length of posts?</p>
<p><img src="https://itsmetoeknee.netlify.app/posts/text-analysis-rweekly/viz_lines_cnt_bypost_byhead-1.png" class="img-fluid"></p>
<p>The steady increase in the length of the <code>tutorial</code> section stands out. (I suppose the <code>R</code> community really enjoys code-walkthroughs (like this one).) Also, the introduction of the <code>new package</code> header about a year after the first RWeekly post suggests that R developers really care about what their fellow community members are working on.</p>
</section>
</section>
<section id="words" class="level2">
<h2 class="anchored" data-anchor-id="words">Words</h2>
<p>The words used in the short descriptions that accompany each link to external content should provide a more focused perspective on what specifically is of interest in the <code>R</code> community. What are the most frequently used words in these short descriptions?</p>
<p><img src="https://itsmetoeknee.netlify.app/posts/text-analysis-rweekly/viz_unigrams_cnts-1.png" class="img-fluid"></p>
<p>Some unsurprising words appear at the top of this list, such as <code>data</code> and <code>analysis</code>. Some words that one would probably not see among the top of an analogous list for another programming community are <code>rstudio</code>, <code>shiny</code>, <code>ggplot2</code>, and <code>tidy</code>. It’s interesting that <code>shiny</code> actually appears as the top individual package–this could indicate that bloggers like to share their content through interactive apps (presumably because it is a great way to captivate and engage an audience).</p>
<p>It’s one thing to look at individual words, but it is perhaps more interesting to look at word relationships.</p>
<p><img src="https://itsmetoeknee.netlify.app/posts/text-analysis-rweekly/viz_unigrams_corrs-1.png" class="img-fluid"></p>
<p>This visual highlights a lot of the pairwise word correlations that we might expect in the data science realm: <code>data</code> and <code>science</code>, <code>time</code> and <code>series</code>, <code>machine</code> and <code>learning</code>, etc. Nonetheless, there are some that are certainly unique to the <code>R</code> community: <code>purrr</code> with <code>mapping</code>; <code>community</code> with <code>building</code>; <code>shiny</code> with <code>interactive</code> and <code>learning</code>; and <code>rstudio</code> with (<code>microsoft</code>) <code>server</code>.</p>
<p>The numerical values driving this correlation network not only is useful for quantifying the visual relationships, but, in this case, it actually highlights some relationships that get a bit lost in the graph (simply due to clustering). In particular, the prominence of the words <code>tutorial</code>, <code>conf</code>, <code>user</code>, and <code>interactive</code> stand out.</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1">unigram_corrs <span class="ot" style="color: #003B4F;">&lt;-</span> unigrams <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb11-2">  tetext<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">compute_corrs_at</span>(</span>
<span id="cb11-3">    <span class="at" style="color: #657422;">word =</span> <span class="st" style="color: #20794D;">"word"</span>,</span>
<span id="cb11-4">    <span class="at" style="color: #657422;">feature =</span> <span class="st" style="color: #20794D;">"name"</span>,</span>
<span id="cb11-5">    <span class="at" style="color: #657422;">num_top_ngrams =</span> <span class="dv" style="color: #AD0000;">100</span>,</span>
<span id="cb11-6">    <span class="at" style="color: #657422;">num_top_corrs =</span> <span class="dv" style="color: #AD0000;">100</span></span>
<span id="cb11-7">  )</span>
<span id="cb11-8">unigram_corrs <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">head</span>(<span class="dv" style="color: #AD0000;">20</span>)</span>
<span id="cb11-9"><span class="co" style="color: #5E5E5E;">#&gt; # A tibble: 20 x 4</span></span>
<span id="cb11-10"><span class="co" style="color: #5E5E5E;">#&gt;    item1       item2     correlation  rank</span></span>
<span id="cb11-11"><span class="co" style="color: #5E5E5E;">#&gt;    &lt;chr&gt;       &lt;chr&gt;           &lt;dbl&gt; &lt;int&gt;</span></span>
<span id="cb11-12"><span class="co" style="color: #5E5E5E;">#&gt;  1 tutorials   html            0.966     1</span></span>
<span id="cb11-13"><span class="co" style="color: #5E5E5E;">#&gt;  2 user2016    tutorials       0.955     2</span></span>
<span id="cb11-14"><span class="co" style="color: #5E5E5E;">#&gt;  3 user2016    html            0.950     3</span></span>
<span id="cb11-15"><span class="co" style="color: #5E5E5E;">#&gt;  4 machine     learning        0.726     4</span></span>
<span id="cb11-16"><span class="co" style="color: #5E5E5E;">#&gt;  5 user        user2016        0.708     5</span></span>
<span id="cb11-17"><span class="co" style="color: #5E5E5E;">#&gt;  6 slides      html            0.698     6</span></span>
<span id="cb11-18"><span class="co" style="color: #5E5E5E;">#&gt;  7 time        series          0.695     7</span></span>
<span id="cb11-19"><span class="co" style="color: #5E5E5E;">#&gt;  8 slides      tutorials       0.695     8</span></span>
<span id="cb11-20"><span class="co" style="color: #5E5E5E;">#&gt;  9 rstudio     conf            0.691     9</span></span>
<span id="cb11-21"><span class="co" style="color: #5E5E5E;">#&gt; 10 user        tutorials       0.690    10</span></span>
<span id="cb11-22"><span class="co" style="color: #5E5E5E;">#&gt; 11 user        html            0.687    11</span></span>
<span id="cb11-23"><span class="co" style="color: #5E5E5E;">#&gt; 12 user2016    slides          0.687    12</span></span>
<span id="cb11-24"><span class="co" style="color: #5E5E5E;">#&gt; 13 interactive html            0.668    13</span></span>
<span id="cb11-25"><span class="co" style="color: #5E5E5E;">#&gt; 14 text        mining          0.659    14</span></span>
<span id="cb11-26"><span class="co" style="color: #5E5E5E;">#&gt; 15 interactive user            0.658    15</span></span>
<span id="cb11-27"><span class="co" style="color: #5E5E5E;">#&gt; 16 interactive user2016        0.653    16</span></span>
<span id="cb11-28"><span class="co" style="color: #5E5E5E;">#&gt; 17 interactive tutorials       0.650    17</span></span>
<span id="cb11-29"><span class="co" style="color: #5E5E5E;">#&gt; 18 earl        london          0.594    18</span></span>
<span id="cb11-30"><span class="co" style="color: #5E5E5E;">#&gt; 19 network     building        0.582    19</span></span>
<span id="cb11-31"><span class="co" style="color: #5E5E5E;">#&gt; 20 interactive slides          0.550    20</span></span></code></pre></div>
</details>
</div>
<section id="most-unique-words" class="level3">
<h3 class="anchored" data-anchor-id="most-unique-words">Most Unique Words</h3>
<p>Let’s try to identify words that have risen and fallen in popularity. While there are many ways of doing, let’s try segmenting the <a href="https://rweekly.org/">R Weekly</a> posts into intervals of 60 days and computing the <a href="https://www.tidytextmining.com/tfidf">term-frequency, inverse-document-frequency</a> (TF-IDF) of words across these intervals. (I apologize if the resolution is sub-par.)</p>
<p><img src="https://itsmetoeknee.netlify.app/posts/text-analysis-rweekly/unigrams_tfidf-1.png" class="img-fluid"></p>
<p>A couple of things stand out:</p>
<ul>
<li>Posts were heavily influenced by <a href="http://user2016.r-project.org/"><code>user2016</code> conference</a> content in the early days of R Weekly (light blue and blue).</li>
<li>There was clearly a <code>20</code> theme in the 60 days between 2017-02-20 and 2017-04-10 (red).</li>
<li>The <a href="https://softwareengineering.stackexchange.com/questions/57/tabs-versus-spaces-what-is-the-proper-indentation-character-for-everything-in-e">“tabs vs.&nbsp;spaces”</a> debate rose to prominence during the late summer days of 2017 (orange), presumably after <a href="https://stackoverflow.blog/2017/06/15/developers-use-spaces-make-money-use-tabs/">David Robinson’s <em>Stack Overflow</em> post on the topic</a>.</li>
<li>R’s ongoing global influence is apparent with the appearance of <code>euro</code> with the <a href="http://user2016.r-project.org/"><code>user2016</code> conference</a> (light blue and blue); <code>poland</code> and <code>satrdays</code> (presumably due to the <a href="https://capetown2018.satrdays.org/">Cape Town R conference of the namesake</a> in late 2016 (green), and several Spanish words in January 2018 (yellow).</li>
</ul>
<p>I tried some different methods, but did not find much interesting regarding change in word frequency over time (aside from the TF-IDF approach). When using the method discussed in the <a href="https://www.tidytextmining.com/twitter.html#changes-in-word-use"><em>Tidy Text Mining</em> book for identifying change in word usage</a> across 60-day intervals, I found only two non-trivial “significant” changes among the top 5% of most frequently used words, which are for <code>user</code> and <code>tutorials</code>. <code>user</code> has dropped off a bit since the <code>useR2016</code> conference, and <code>tutorials</code> has grown in usage, which is evident with the increasing length of the <code>tutorial</code> section in posts.</p>
<p>That’s all I got for this subject. As I mentioned at the top, there are many of other great “meta” analyses like this one that are worth looking at, so definitely check them out!</p>


</section>
</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Actually, I downloaded the data locally so that I would not have to worry about GitHub API request limits. Thus, in addition to other custom processing steps that I added, my final code does not necessarily resemble hers.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>r</category>
  <guid>https://itsmetoeknee.netlify.app/posts/text-analysis-rweekly/index.html</guid>
  <pubDate>Mon, 05 Mar 2018 06:00:00 GMT</pubDate>
  <media:content url="https://itsmetoeknee.netlify.app/posts/text-analysis-rweekly/viz_unigrams_corrs-1.png" medium="image" type="image/png" height="86" width="144"/>
</item>
<item>
  <title>Visualizing an NBA Team’s Schedule Using R</title>
  <dc:creator>Tony ElHabr</dc:creator>
  <link>https://itsmetoeknee.netlify.app/posts/visualizing-nba-team-schedule/index.html</link>
  <description><![CDATA[ 



<p>If you’re not completely new to the data science community (specifically, the #rstats community), then you’ve probably seen a version of the “famous” data science workflow diagram. <sup>1</sup></p>
<p><img src="https://itsmetoeknee.netlify.app/posts/visualizing-nba-team-schedule/data-science.png" class="img-fluid"></p>
<p>If one is fairly familiar with a certain topic, then one might not spend much time with the initial “visualize” step of the workflow. Such is the case with me and NBA data–as a relatively knowledgeable NBA follower, I don’t necessarily need to spend much of my time exploring raw NBA data prior to modeling.</p>
<p>Anyways, as a break from experimenting with predictive models, I decided to make a visualization just for the sake of trying something I hadn’t done before. <sup>2</sup> In particular, I was inspired by the calendar heat map visualization that I saw in the <a href="https://r-statistics.co/Top50-Ggplot2-Visualizations-MasterList-R-Code.html">Top 50 ggplot visualizations post</a> on the <a href="https://r-statistics.co" class="uri">https://r-statistics.co</a> website.</p>
<p><img src="https://itsmetoeknee.netlify.app/posts/visualizing-nba-team-schedule/ggplot_masterlist_42.png" class="img-fluid"></p>
<p>To implement a plot of this nature, I decided to look at how my hometown team, the San Antonio Spurs, fared last season (2016) in terms of point differential. In case it’s not immediately obvious, lots of green is good. (This is not surprising to those of us who follow the NBA–the Spurs have been consistently good since the end of the 1990s.)</p>
<div class="cell">
<details open="">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(dplyr)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(ggplot2)</span>
<span id="cb1-3"></span>
<span id="cb1-4">results_prepared <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">'game_results-prepared.csv'</span> <span class="sc" style="color: #5E5E5E;">%&gt;%</span> <span class="fu" style="color: #4758AB;">read_csv</span>()</span>
<span id="cb1-5"></span>
<span id="cb1-6">colnames_base <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'date'</span>, <span class="st" style="color: #20794D;">'season'</span>, <span class="st" style="color: #20794D;">'tm'</span>)</span>
<span id="cb1-7">colnames_calc_dates <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'yyyy'</span>, <span class="st" style="color: #20794D;">'mm'</span>, <span class="st" style="color: #20794D;">'dd'</span>, <span class="st" style="color: #20794D;">'wd'</span>, <span class="st" style="color: #20794D;">'mm_yyyy'</span>, <span class="st" style="color: #20794D;">'mm_w'</span>)</span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;"># Look at a couple of different metrics.</span></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;"># Specifically, look at games played to date (g_td) and point differential (pd).</span></span>
<span id="cb1-10">colnames_viz <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">'g_td'</span>, <span class="st" style="color: #20794D;">'pd'</span>)</span>
<span id="cb1-11"></span>
<span id="cb1-12">results_calendar_tm <span class="ot" style="color: #003B4F;">&lt;-</span> results_prepared <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb1-13">  <span class="fu" style="color: #4758AB;">filter</span>(tm <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'SAS'</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb1-14">  <span class="fu" style="color: #4758AB;">mutate</span>(</span>
<span id="cb1-15">    <span class="at" style="color: #657422;">yyyy =</span> <span class="fu" style="color: #4758AB;">year</span>(date),</span>
<span id="cb1-16">    <span class="at" style="color: #657422;">mm =</span> lubridate<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">month</span>(date),</span>
<span id="cb1-17">    <span class="at" style="color: #657422;">dd =</span> lubridate<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">day</span>(date),</span>
<span id="cb1-18">    <span class="at" style="color: #657422;">wd =</span> lubridate<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">wday</span>(date, <span class="at" style="color: #657422;">label =</span> <span class="cn" style="color: #8f5902;">TRUE</span>, <span class="at" style="color: #657422;">abbr =</span> <span class="cn" style="color: #8f5902;">TRUE</span>),</span>
<span id="cb1-19">    <span class="at" style="color: #657422;">mm_yyyy =</span> zoo<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">as.yearmon</span>(date)</span>
<span id="cb1-20">  ) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb1-21">  <span class="fu" style="color: #4758AB;">group_by</span>(mm_yyyy) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb1-22">  <span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">mm_w =</span> <span class="fu" style="color: #4758AB;">ceiling</span>(dd <span class="sc" style="color: #5E5E5E;">/</span> <span class="dv" style="color: #AD0000;">7</span>)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb1-23">  <span class="fu" style="color: #4758AB;">ungroup</span>() <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb1-24">  <span class="fu" style="color: #4758AB;">select</span>(<span class="fu" style="color: #4758AB;">one_of</span>(colnames_base, colnames_calc_dates, colnames_viz)) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb1-25">  <span class="fu" style="color: #4758AB;">arrange</span>(season, g_td, tm)</span>
<span id="cb1-26"></span>
<span id="cb1-27"><span class="co" style="color: #5E5E5E;"># Tidy up because I was experimenting with different metrics, not just point differential.</span></span>
<span id="cb1-28">results_calendar_tm_tidy <span class="ot" style="color: #003B4F;">&lt;-</span> results_calendar_tm <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb1-29">  tidyr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">gather</span>(metric, value, colnames_viz)</span>
<span id="cb1-30"></span>
<span id="cb1-31">season <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="dv" style="color: #AD0000;">2016</span></span>
<span id="cb1-32">wd_labels <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">levels</span>(results_calendar_tm<span class="sc" style="color: #5E5E5E;">$</span>wd)</span>
<span id="cb1-33">wd_labels[<span class="dv" style="color: #AD0000;">2</span><span class="sc" style="color: #5E5E5E;">:</span><span class="dv" style="color: #AD0000;">6</span>] <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="st" style="color: #20794D;">''</span></span>
<span id="cb1-34">title <span class="ot" style="color: #003B4F;">&lt;-</span> <span class="fu" style="color: #4758AB;">str_c</span>(<span class="st" style="color: #20794D;">'San Antonio Spurs Point Differential in '</span>, season, <span class="st" style="color: #20794D;">' NBA Season'</span>)</span>
<span id="cb1-35"></span>
<span id="cb1-36">viz_pd_sas_2016 <span class="ot" style="color: #003B4F;">&lt;-</span> results_calendar_tm_tidy <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb1-37">  <span class="fu" style="color: #4758AB;">filter</span>(season <span class="sc" style="color: #5E5E5E;">%in%</span> seasons) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb1-38">  <span class="fu" style="color: #4758AB;">filter</span>(metric <span class="sc" style="color: #5E5E5E;">==</span> <span class="st" style="color: #20794D;">'pd'</span>) <span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb1-39">  <span class="fu" style="color: #4758AB;">ggplot</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-40">  <span class="fu" style="color: #4758AB;">geom_tile</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x =</span> wd, <span class="at" style="color: #657422;">y =</span> mm_w, <span class="at" style="color: #657422;">fill =</span> value), <span class="at" style="color: #657422;">colour =</span> <span class="st" style="color: #20794D;">'white'</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-41">  <span class="fu" style="color: #4758AB;">scale_y_reverse</span>() <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-42">  <span class="fu" style="color: #4758AB;">scale_x_discrete</span>(<span class="at" style="color: #657422;">labels =</span> wd_labels) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-43">  <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">axis.text.x =</span> <span class="fu" style="color: #4758AB;">element_text</span>(<span class="at" style="color: #657422;">angle =</span> <span class="dv" style="color: #AD0000;">90</span>, <span class="at" style="color: #657422;">vjust =</span> <span class="fl" style="color: #AD0000;">0.5</span>)) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-44">  <span class="fu" style="color: #4758AB;">scale_fill_gradient2</span>(<span class="at" style="color: #657422;">low =</span> <span class="st" style="color: #20794D;">'red'</span>, <span class="at" style="color: #657422;">mid =</span> <span class="st" style="color: #20794D;">'grey'</span>, <span class="at" style="color: #657422;">high =</span> <span class="st" style="color: #20794D;">'green'</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-45">  <span class="fu" style="color: #4758AB;">theme</span>(<span class="at" style="color: #657422;">legend.position =</span> <span class="st" style="color: #20794D;">'bottom'</span>) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-46">  <span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">x =</span> <span class="st" style="color: #20794D;">''</span>, <span class="at" style="color: #657422;">y =</span> <span class="st" style="color: #20794D;">''</span>, <span class="at" style="color: #657422;">title =</span> title) <span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb1-47">  <span class="fu" style="color: #4758AB;">facet_wrap</span>( <span class="sc" style="color: #5E5E5E;">~</span> mm_yyyy, <span class="at" style="color: #657422;">nrow =</span> <span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb1-48">viz_pd_sas_2016</span></code></pre></div>
</details>
</div>
<p><img src="https://itsmetoeknee.netlify.app/posts/visualizing-nba-team-schedule/viz_pd_sas_2016.png" class="img-fluid"></p>
<p>There are an infinite number of ways to visualize data like this, but I thought this was interesting because of the temporal nature of the data.</p>




<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>The figure shown here comes from the <a href="http://r4ds.had.co.nz/introduction.html">introductory chapter of the <em>R for Data Science</em> book</a>↩︎</p></li>
<li id="fn2"><p>Here, I use the NBA data that I have already scraped and cleaned.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>r</category>
  <category>nba</category>
  <guid>https://itsmetoeknee.netlify.app/posts/visualizing-nba-team-schedule/index.html</guid>
  <pubDate>Sun, 26 Nov 2017 06:00:00 GMT</pubDate>
  <media:content url="https://itsmetoeknee.netlify.app/posts/visualizing-nba-team-schedule/viz_pd_sas_2016.png" medium="image" type="image/png" height="106" width="144"/>
</item>
</channel>
</rss>
