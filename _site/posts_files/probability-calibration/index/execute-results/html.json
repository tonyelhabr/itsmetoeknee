{
  "hash": "f81da326ee18ecd581be0f92e4630a06",
  "result": {
    "markdown": "---\ntitle: Calibrating Binary Probabilities\ndescription: Using calibration to improve classifier model performance\ndate: 2023-09-11\ncategories:\n  - r\n  - soccer\nimage: compared-calibratoin.png\nexecute: \n  code-fold: false\n  eval: false\n  include: true\n  echo: true\n---\n\n\n## Introduction\n\nEver grappled with a [classification](https://en.wikipedia.org/wiki/Statistical_classification) model that consistently over-predicts or under-predicts an event? Your first thought might be to re-evaluate the model's features or framework. But what if tweaking the model isn't an option, either due to a lack of resources or access restrictions? The good news is, there's another way--it's called [**calibration**](https://www.tidyverse.org/blog/2022/11/model-calibration/).\n\nCalibration falls in the \"post-processing\" step of modeling. We modify the output of a model using nothing but the model predictions and labels of the output.\n\nOne of my favorite (and relatively new) packages in the [`{tidymodels}` ecosystem](https://www.tidymodels.org/) is the [`{probably}`](https://probably.tidymodels.org/) package. It provides functions that make it fairly straightforward to do calibration, even for those who are new to the concept. So let's use `{probably}` to demonstrate the power of calibration.\n\n## Calibrating a Binary Classifier\n\n### Data\n\nI'll be using the pre-match win probabilities from [FiveThirtyEight](https://data.fivethirtyeight.com/#soccer-spi) ([RIP](https://twitter.com/ryanabest/status/1672013407908667392)). Specifically, I'll subset their plethora of historical projections to two women's leagues: the [Women's Super League (WSL)](https://en.wikipedia.org/wiki/Women%27s_Super_League) in England and the [National Women's Soccer League (NWSL)](https://en.wikipedia.org/wiki/National_Women%27s_Soccer_League) in the U.S. I have a suspicion that the model probabilities are not as calibrated as they could be, as there is [has been observed that gender-agnostic models](https://statsbomb.com/articles/soccer/analytics-and-modelling-in-womens-football/) in soccer can be less performant for the women's game.\n\nTo keep things simple, I'm going to treat this as a [binary classification](https://en.wikipedia.org/wiki/Binary_classification) task, where matches are the \"positive\" outcome (`\"yes\"`), and losses and draw are grouped as the \"negative\" outcome (`\"no\"`).\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Retrieve data\"}\nlibrary(readr)\nlibrary(dplyr)\nmatches <- readr::read_csv('https://projects.fivethirtyeight.com/soccer-api/club/spi_matches.csv') |> \n  dplyr::filter(\n    !is.na(score1), ## match is completed\n    league %in% c(\n      \"FA Women's Super League\",\n      \"National Women's Soccer League\"\n    )\n  ) |> \n  dplyr::transmute(\n    league,\n    season,\n    date,\n    team1,\n    team2,\n    target = factor(ifelse(score1 > score2, 'yes', 'no')),\n    ## .pred_ is sort of a convention among {tidymodels} docs\n    .pred_yes = prob1,\n    .pred_no = 1- .pred_yes \n  )\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nmatches\n#> # A tibble: 1,358 × 6\n#>    date       team1               team2             target .pred_yes .pred_no\n#>    <date>     <chr>               <chr>             <fct>      <dbl>    <dbl>\n#>  1 2016-07-09 Liverpool Women     Reading           yes        0.439    0.561\n#>  2 2016-07-10 Arsenal Women       Notts County Lad… yes        0.357    0.643\n#>  3 2016-07-10 Chelsea FC Women    Birmingham City   no         0.480    0.520\n#>  4 2016-07-16 Liverpool Women     Notts County Lad… no         0.429    0.571\n#>  5 2016-07-17 Chelsea FC Women    Arsenal Women     no         0.412    0.588\n#>  6 2016-07-24 Reading             Birmingham City   no         0.382    0.618\n#>  7 2016-07-24 Notts County Ladies Manchester City … no         0.308    0.692\n#>  8 2016-07-31 Reading             Notts County Lad… no         0.407    0.593\n#>  9 2016-07-31 Arsenal Women       Liverpool Women   no         0.435    0.565\n#> 10 2016-08-03 Reading             Manchester City … no         0.306    0.694\n#> # ℹ 1,348 more rows\n```\n:::\n\n\n### Diagnosis\n\nWe start with the [\"diagnosis\"](https://www.tidymodels.org/learn/models/calibration/#but-is-it-calibrated) phase: \"How well do the original probabilities perform?\" To evaluate this, we can use one of the several `probably::cal_plot_*` functions. In this case, we'll use `cal_plot_breaks()`.[^1]\n\n[^1]: Sticking with the basics, I use the defaults for `num_breaks` (10) and `conf_level` (0.9).\n\nThis function neatly divides the range of predicted probabilities from zero to one into distinct bins. For each bin, it calculates the observed event rate using data that has probabilities falling within that bin's range. Ideally, if our predictions are calibrated, the curve produced should match up with a straight diagonal line, i.e. a 45 degree slope passing through (0,0) and (1,1). As a bonus, the `probably::cal_plot_*` family of functions even provides confidence intervals about the calibration curve.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nlibrary(probably)\npackageVersion('probably')\n#> [1] ‘1.0.1.9000’\n\nmatches |> \n  probably::cal_plot_breaks(\n    truth = target,\n    ## the \"_yes\" in `.pred_yes` must match one of the values in `target`\n    estimate = .pred_yes,\n    ## because \"yes\" is the second event level (\"no\" is the first)\n    event_level = 'second'\n  )\n```\n:::\n\n\n`{probably}` offers some really neat automatic plotting of calibration curves. While I'd suggest giving them a try, I like to make my curves in a certain manner. In particular, instead of using a \"rug\", I like showing sample sizes via points on the curve.\n\n\n\n\n\n![](raw-calibration.png)\n\nIndeed, it looks like there is some room for improvement with the match probabilities. It seems that the FiveThirtyEight model over-predicts when the actual win rate is low, broadly below 20%; and, likewise, it tends to under-predict when the true win rate is really greater than 60%\n\n### Remediation\n\nNow we move on the [\"remedation\"](https://www.tidymodels.org/learn/models/calibration/#remediation) step. That is, we fit a model with the binary outcome as the target variable and the probability estimate as the lone input feature. `{probably}` offers several options with the `cal_estimate_*()` of functions.\n\nI've opted for [Beta calibration](https://probably.tidymodels.org/reference/cal_estimate_beta.html), although [logistic calibration](https://probably.tidymodels.org/reference/cal_estimate_logistic.html) would work fine here as well. Beta calibration is a little more flexible, and, consequently, [can provide superior probability estimates](https://projecteuclid.org/journals/electronic-journal-of-statistics/volume-11/issue-2/Beyond-sigmoids--How-to-obtain-well-calibrated-probabilities-from/10.1214/17-EJS1338SI.full), especially when the target distribution is skewed.[^2]\n\n[^2]: We don't have a skew problem in this context, but it's good to note when a Beta calibration might provide meaningful benefits over other calibration methods.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nmatches |> \n  probably::cal_estimate_beta(\n    truth = target,\n    estimate = dplyr::starts_with('.pred'),\n    event_level = 'second'\n  )\n#>  ── Probability Calibration \n#>  Method: Beta calibration\n#>  Type: Binary\n#>  Source class: Data Frame\n#>  Data points: 1,358\n#>  Truth variable: `target`\n#>  Estimate variables:\n#>  `.pred_no` ==> no\n#>  .pred_yes` ==> yes\n```\n:::\n\n\nUnder the hood, `cal_estimate_beta()` is doing something like this.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nlibrary(betacal)\n\nbetacal::beta_calibration(\n  p = matches$.pred_yes,\n  y = matches$target == 'yes',\n  parameters = 'abm'\n)\n```\n:::\n\n\nIt's almost shocking how simple the implementation is.\n\n## Results\n\nWith the remediation model in hand, let's make a scatter plot of all the points in the data set, viewing how the model has adjusted the original probabilities.\n\n\n\n\n\n![](calibration-scatter.png)\n\nWe observe that the remediation model has increased point estimates on the lower end of the spectrum and decreased estimates on the upper end of the spectrum. The calibration has seemingly fine-tuned under-predicting and over-predicting behavior from the original model.\n\nTo really see the change that remediaton model has made, we can re-make our calibration curve plot, adding the remediated, or \"calibrated\", curve along side the original \"un-calibrated\" curve.\n\n\n\n\n\n![](compared-calibration.png)\n\nVisually, it's evident that the remediation has improved the probability estimates. The calibrated curve more closely \"hugs\" the ideal 45 degree slope across the whole probability spectrum.\n\n### Validation\n\nTo quantitatively describe the difference in calibration between the two models, we can compare the [Brier Skill Score (BSS)](https://en.wikipedia.org/wiki/Brier_score#Brier_Skill_Score_(BSS)) of the un-calibrated and calibrated models.[^3] Keep in mind that a higher BSS indicates a more calibrated model. (1 is ideal. 0 indicates that the model is no better or worse than a reference model[^4].)\n\n[^3]: I've discussed BSS in [a prior post on expected goals model calibration](/posts/opta-xg-model-calibration) and [another post on expected goals match-implied win probabilities](/posts/epl-xpts-simulation-1).\n\n[^4]: In this case, I choose to use the observed match win rate as the reference model.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Brier Skill Score (BSS) calculation\"}\nlibrary(yardstick)\nlibrary(rlang)\nbrier_score <- function(data, ...) {\n  UseMethod('brier_score')\n}\n\nbrier_score <- yardstick::new_prob_metric(brier_score, direction = 'minimize')\n\nbrier_score_vec <- function(truth, estimate, na_rm = TRUE, event_level, ...) {\n  \n  brier_score_impl <- function(truth, estimate, event_level, ...) {\n    truth <- 1 - (as.numeric(truth) - 1)\n    \n    if (event_level == 'second') {\n      truth <- 1 - truth\n    }\n    \n    mean((truth - estimate)^2)\n  }\n  \n  if (length(estimate) == 1) {\n    estimate <- rep(estimate, length(truth))\n  }\n  \n  yardstick::metric_vec_template(\n    metric_impl = brier_score_impl,\n    truth = truth,\n    estimate = estimate,\n    na_rm = na_rm,\n    cls = c('factor', 'numeric'),\n    estimator = 'binary',\n    event_level = event_level,\n    ...\n  )\n}\n\nbrier_skill_score <- function(data, ...) {\n  UseMethod('brier_skill_score')\n}\n\nbrier_skill_score <- yardstick::new_prob_metric(brier_skill_score, direction = 'maximize')\n\nbrier_skill_score_vec <- function(truth, estimate, ref_estimate, na_rm = TRUE, event_level, ...) {\n  \n  brier_skill_score_impl <- function(truth, estimate, ref_estimate, event_level, ...) {\n    truth_quo <- rlang::enquo(truth)\n    \n    estimate_bs <- brier_score_vec(\n      truth = truth,\n      estimate = estimate,\n      na_rm = na_rm,\n      event_level = event_level,\n      ...\n    )\n    \n    ref_bs <- brier_score_vec(\n      truth = truth,\n      estimate = ref_estimate,\n      na_rm = na_rm,\n      event_level = event_level,\n      ...\n    )\n    \n    1 - (estimate_bs / ref_bs)\n  }\n  \n  if (length(estimate) == 1) {\n    estimate <- rep(estimate, length(truth))\n  }\n  \n  if (length(ref_estimate) == 1) {\n    ref_estimate <- rep(ref_estimate, length(truth))\n  }\n  \n  yardstick::metric_vec_template(\n    metric_impl = brier_skill_score_impl,\n    truth = truth,\n    estimate = estimate,\n    ref_estimate = ref_estimate,\n    cls = c('factor', 'numeric'),\n    estimator = 'binary',\n    event_level = event_level,\n    ...\n  )\n}\n\nref_estimate <- matches |> \n  dplyr::count(target) |> \n  dplyr::mutate(prop = n / sum(n)) |> \n  dplyr::filter(target == 'yes') |> \n  dplyr::pull(prop)\n\nraw_brier_skill_score <- brier_skill_score_vec(\n  truth = calibrated$target,\n  estimate = calibrated$.raw_pred_yes,\n  ref_estimate = ref_prop,\n  event_level = 'second'\n)\n\ncalibrated_brier_skill_score <- brier_skill_score_vec(\n  truth = calibrated$target,\n  estimate = calibrated$.pred_yes,\n  ref_estimate = ref_prop,\n  event_level = 'second'\n)\n\ncompared_brier_skill_scores <- round(\n  c(\n    'Un-calibrated' = raw_brier_skill_score,\n    'Calibrated' = calibrated_brier_skill_score\n  ),\n  3\n)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\ncompared_brier_skill_scores\n#> Un-calibrated    Calibrated \n#>         0.196         0.205\n```\n:::\n\n\nIndeed, we have (marginally) improved the original pre-match win probabilities.\n\nI should note that the `{probably}` package offers `cal_validate_*()` functions to help with deciphering whether a calibrated model is truly better than the original. That set of functions uses a more robust and valid technique that I have here.[^5]\n\n[^5]: The `cal_validate_*()` function resample a holdout set, compute ROC AUC and Brier score, and calculate standard error of the performance metrics.\n\n## Conclusion\n\nWhile I wouldn't say \"calibration is all you need\", it's certainly something nice to have in your toolkit when you're working on a modeling task. It can be a game-changer, especially when tweaking the original model isn't an option, whether due to access limitations or, let's be honest, sheer laziness.\n\nOh, and I failed to mention this earlier---calibration isn't just for binary classifiers. Multinomial classifiers and even regression models can benefit from this technique as well.\n\nHappy modeling, folks.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}