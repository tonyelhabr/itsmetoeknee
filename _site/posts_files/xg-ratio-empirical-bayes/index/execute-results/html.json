{
  "hash": "e6b0492749a1cff58cf75cc99ff31f38",
  "result": {
    "markdown": "---\ntitle: Shooting Overperformance in Soccer\ndescription: Using the Gamma-Poisson conjugate family and the empirical Bayes framework to quantify overperformance\ndate: 2023-09-05\ndraft: true\ncategories:\n  - r\n  - soccer\nimage: shaw-replication.png\nexecute: \n  eval: false\n  include: true\n  echo: true\n  code-fold: false\n---\n\n\n## Introduction\n\nThis blog post is my attempt to replicate the results in Laurie Shaw's 2018 blog post [\"Exceeding Expected Goals\"](http://eightyfivepoints.blogspot.com/2018/09/exceeding-expected-goals.html). Specifically, I want to shed light on how to implement [Gamma-Poisson](https://en.wikipedia.org/wiki/Empirical_Bayes_method#Poisson%E2%80%93gamma_model) [empirical Bayes](https://en.wikipedia.org/wiki/Empirical_Bayes_method) (EB) estimation.\n\n### What Is empirical Bayes (EB) estimation?\n\n**Empirical Bayes** (EB) estimation. Wow, just typing that out makes me feel smart. But what is it, really? In short, I'd describe it as a mix of [Bayesian](https://en.wikipedia.org/wiki/Bayesian_inference) and [Frequentist](https://en.wikipedia.org/wiki/Frequentist_inference) inference. We lean into the observed frequencies of the data (Frequentist) while simultaneously refining our initial data assumptions through Bayesian updating. In practice, one might use EB as a (relatively) simple alternative to a full Bayesian analysis, which can feel daunting.\n\nIn regular Bayesian analysis, you start with your initial \"guess\" (prior distribution) about something, and as you gather data, you tweak that \"guess\" using Bayes' theorem to get a final view (posterior distribution). We combine what we thought about the data beforehand with how likely the data matches (likelihood).\n\nEmpirical Bayes puts a twist on this. Instead of having a prior guess, you figure out that initial guess from the same data you're analyzing. This can make things simpler, especially when you're dealing with tons of guesses but not much initial info.\n\n### A canonical example of EB estimation (Beta-Binomial)\n\n[David Robinson](https://github.com/dgrtwo) wrote [a wonderful blog post](http://varianceexplained.org/r/empirical_bayes_baseball/) about empirical Bayes estimation for estimating [batting averages in baseball](https://en.wikipedia.org/wiki/Batting_average_(baseball)), notably \"shrinking\" the battering averagesof those with relatively few at bats closer to some \"prior\" estimate derived from a choice of hyperparameters. For context, batting average, $BA$, is defined as a player's count of hits, $H$, divided by the count of their at-bats, $AB$.\n\n$$\nBA = H / AB\n$$ {#eq-ba}\n\n::: callout-note\nI'd David's post **must read** material prior to going through this blog post.\n:::\n\nIn his post, David uses [a Beta prior](https://en.wikipedia.org/wiki/Beta_distribution) and [a binomial posterior](https://en.wikipedia.org/wiki/Binomial_distribution) together, i.e. a [Beta-binomial Bayesian model](https://www.bayesrulesbook.com/chapter-3))[^1], since this tandem is suitable for proportions and probabilities. The gist of his approach: we add some fixed number of hits, $\\alpha_0$, and a fixed number of at-bats, $\\beta_0$, to the numerator and denominator of the battering average equation as so.\n\n[^1]: This [conjugate distribution table](https://en.wikipedia.org/wiki/Conjugate_prior) might be handy for those curious to know which distributions are typically paired together for empirical Bayes estimation.\n\n$$\n(H + \\alpha_0) / (AB + \\alpha_0 + \\beta_0)\n$$ {#eq-adj-ba}\n\nSpecifically, the \"prior\" estimate of batting average is found from isolating the $\\alpha_0$ and $\\beta_0$ elements:\n\n$$\n\\alpha_0 / (\\alpha_0 + \\beta_0)\n$$ {#eq-ba-prior}\n\nIf, for example, `alpha0 = 70` and `beta0 = 230`, then the prior estimate of batting average is effectively `70 / (70 + 230) = 0.3`. Note that `alpha0` and `beta0` are learned from the data using [maximum likelihood estimation (MLE)](https://en.wikipedia.org/wiki/Maximum_likelihood_estimation), although other approaches, such as [\"method of moments\"](https://en.wikipedia.org/wiki/Method_of_moments_(statistics)) could be used. (Heck, you could even defensibly choose these \"hyperparameters\" yourself, without any fancy statistics, if you feel that you have enough knowledge of the data.)\n\n### Gamma-Poisson EB estimation\n\nNow, for my replication of Shaw's analysis, we're going to be focusing on the ratio of a player's goals, $G$, divided by their [expected goals](/posts/epl-xpts-simulation-1)), $xG$, summed up over a fixed time period. Shaw refers to this as \"overperformance\" $O$ for a player $p$:\n\n$$\nO_p = \\frac{G_p}{xG_p}\n$$ {#eq-o}\n\nWhile one might be tempted to use Beta-Binomial EB--shrinking the raw estimate for those with a relatively low volume of shots--Shaw used a \\[Gamma-Poisson\\]( [Gamma-Poisson](https://www.bayesrulesbook.com/chapter-5#gamma-poisson-conjugate-family) EB adjustment, and justifiably so. Gamma-Poisson makes more sense when the underlying data consists of counts *and* what you're trying to estimate is a rate or ratio, not a proportion bounded between 0 and 1. Note that a $O_p$ ratio of 1 indicates that a player is scoring as many goals as expected; a ratio greater than 1 indicates underperformance; and a ratio less than 1 indicates overperformance. On, the other hand, with @eq-ba, batting average is bounded between 0 and 1.\n\n## Implementation\n\nOk, so with all of that context provided, now let's do the replication of Shaw's findings.\n\n### Data\n\nFirst, let's pull the data we'll need--2016/17 and 2017/18 [English Premier League](https://www.premierleague.com) shots, goals, and [xG](https://theanalyst.com/na/2023/08/what-is-expected-goals-xg/) by player. I'm using [understat](https://understat.com/)'s xG data since it's a fairly reliable source of data and is easy to retrieve data from via the [`{worldfootballR}` package](https://jaseziv.github.io/worldfootballR/).[^2]\n\n[^2]: [FBRef](https://fbref.com/en/expected-goals-model-explained/) only provides expected goals dating back to the 2017/18 season, so unfortunately it's not viable for this analysis.\n\nNote that Shaw used data from a provider, [Stratagem](https://www.linkedin.com/company/stratagem-ltd/about/), that no long provides data, as far as I can tell. For at least this reason, I won't be able to exactly match his reason.[^3]\n\n[^3]: The other major reason why I may not be able to match his results is if I've implemented the Gamma-Poisson adjustment in a different (hopefully, not incorrect ðŸ˜…) manner.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n## data wrangling\nlibrary(worldfootballR)\nlibrary(dplyr)\nlibrary(tibble)\n\n## distribution fitting and wrangling\nlibrary(MASS, include.only = 'fitdistr') ## to avoid `select` name conflict with dplyr\nlibrary(withr)\nlibrary(purrr)\nlibrary(tidyr)\n\nraw_shots <- worldfootballR::load_understat_league_shots(league = 'EPL')\nshots <- raw_shots |> \n  tibble::as_tibble() |> \n  dplyr::filter(\n    season %in% c(2016L, 2017L), ## 2016/17 and 2017/18 seasons\n    ## \"excluding free-kicks\" in the blog post\n    situation != 'DirectFreeKick'\n  ) |> \n  dplyr::arrange(id) |> \n  dplyr::transmute(\n    id,\n    player,\n    xg = x_g,\n    g = as.integer(result == 'Goal')\n  )\nshots\n#> # A tibble: 19,047 Ã— 4\n#>        id player               xg     g\n#>     <dbl> <chr>             <dbl> <int>\n#>  1 112088 Aaron Ramsey    0.0695      0\n#>  2 112089 Nathaniel Clyne 0.0293      0\n#>  3 112090 Aaron Ramsey    0.00734     0\n#>  4 112091 Roberto Firmino 0.0856      0\n#>  5 112092 Roberto Firmino 0.0441      0\n#>  6 112093 Sadio ManÃ©      0.0607      0\n#>  7 112094 Ragnar Klavan   0.0742      0\n#>  8 112095 Theo Walcott    0.761       0\n#>  9 112096 Theo Walcott    0.0721      1\n#> 10 112097 Roberto Firmino 0.0241      0\n#> # â„¹ 19,037 more rows\n```\n:::\n\n\nAbove was pulling in every record of shots, with 1 row per shot. Now we aggregate to the player-level, such that we have one row per player.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nshots_by_player <- shots |> \n  dplyr::group_by(player) |> \n  dplyr::summarize(\n    shots = dplyr::n(),\n    dplyr::across(c(g, xg), sum)\n  ) |> \n  dplyr::ungroup() |> \n  dplyr::mutate(raw_g_xg_ratio = g / xg) |> \n  dplyr::arrange(dplyr::desc(shots))\nshots_by_player\n#> # A tibble: 588 Ã— 5\n#>    player            shots     g    xg raw_g_xg_ratio\n#>    <chr>             <int> <int> <dbl>          <dbl>\n#>  1 Harry Kane          293    59  46.7          1.26 \n#>  2 Sergio AgÃ¼ero       234    41  41.2          0.994\n#>  3 Christian Eriksen   229    18  16.1          1.12 \n#>  4 Alexis SÃ¡nchez      217    33  29.1          1.13 \n#>  5 Romelu Lukaku       196    41  32.1          1.28 \n#>  6 Roberto Firmino     184    26  21.1          1.23 \n#>  7 Kevin De Bruyne     179    14  12.2          1.15 \n#>  8 SalomÃ³n RondÃ³n      171    15  16.2          0.924\n#>  9 Paul Pogba          168    11  14.3          0.768\n#> 10 Christian Benteke   164    18  28.5          0.631\n#> # â„¹ 578 more rows\n```\n:::\n\n\nNext, we estimate hyperparameters for our prior gamma distribution (with `dgamma`, these are the `shape` and `rate` parameters[^4]) using MLE. I choose to include players having taken at least 50 shots for estimating these hyperparameters. In general, you want to subset your data here to records that provide good \"signal\", and, therefore, will provide reliable estimates of your hyperparameters.\n\n[^4]: In [the wild](https://en.wikipedia.org/wiki/Gamma_distribution), you'll see `alpha` and `beta` used to describe the hyperparameters. `shape` and `rate` are different ways of framing these parameters.\n\nNote that this process of selecting priors using a subset of your data is one thing that separates empirical Bayes estimation from a traditional, full Bayesian approach. In the latter, one chooses priors for an analysis without using the data to be included in the analysis.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nprior_shots_by_player <- dplyr::filter(\n  shots_by_player, \n  shots >= 50,\n  g > 0 ## prevent error with fitting prior distribution\n)\n\nprior_distr <- MASS::fitdistr(\n  prior_shots_by_player$raw_g_xg_ratio,\n  dgamma,\n  start = list(shape = 1, rate = 1)\n)\nprior_shape <- prior_distr$estimate[1]\nprior_rate <- prior_distr$estimate[2]\nlist(prior_shape = round(prior_shape, 2), prior_rate = round(prior_rate, 2))\n#> $prior_shape\n#> shape \n#>  9.39 \n#> \n#> $prior_rate\n#> rate \n#> 8.93\n```\n:::\n\n\nNow we simulate\n\n\n::: {.cell data-label='adj_shots_by_player'}\n\n```{.r .cell-code  code-fold=\"false\"}\nsimulate_gamma_posterior <- function(\n    successes, \n    trials, \n    prior_shape, \n    prior_rate, \n    n_sims = 10000,\n    seed = 42\n) {\n  posterior_shape <- prior_shape + successes\n  posterior_rate <- prior_rate + trials\n  withr::local_seed(seed)\n  posterior_sample <- rgamma(n = n_sims, shape = posterior_shape, rate = posterior_rate)\n  list(\n    mean = mean(posterior_sample),\n    sd = sd(posterior_sample)\n  )\n}\n\nshots_by_player$adj_g_xg_ratio <- purrr::map2(\n  shots_by_player$g, shots_by_player$xg,\n  function(g, xg) {\n    simulate_gamma_posterior(\n      successes = g,\n      trials = xg,\n      prior_shape = prior_shape,\n      prior_rate = prior_rate\n    )\n  }\n)\n\nadj_shots_by_player <- shots_by_player |> \n  tidyr::unnest_wider(\n    adj_g_xg_ratio, \n    names_sep = '_'\n  ) |> \n  dplyr::arrange(dplyr::desc(adj_g_xg_ratio_mean))\nadj_shots_by_player\n#> # A tibble: 588 Ã— 7\n#>    player            shots     g    xg raw_g_xg_ratio adj_g_xg_ratio_mean adj_g_xg_ratio_sd\n#>    <chr>             <int> <int> <dbl>          <dbl>               <dbl>             <dbl>\n#>  1 Fernando Llorente    57    16  9.19           1.74                1.40             0.281\n#>  2 Philippe Coutinho   160    20 12.5            1.60                1.37             0.256\n#>  3 Shkodran Mustafi     37     5  1.82           2.75                1.34             0.357\n#>  4 Pascal GroÃŸ          43     7  3.34           2.10                1.34             0.334\n#>  5 Ryan Fraser          55     8  4.09           1.95                1.34             0.324\n#>  6 Eden Hazard         148    28 19.2            1.45                1.33             0.219\n#>  7 James McArthur       53    10  5.93           1.69                1.31             0.299\n#>  8 Charlie Daniels      39     5  2.18           2.30                1.30             0.346\n#>  9 Xherdan Shaqiri     117    12  7.61           1.58                1.29             0.282\n#> 10 Andy Carroll         67    10  6.09           1.64                1.29             0.296\n```\n:::\n\n\nNow we can plot our results\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nlibrary(ggplot2)\nlibrary(forcats)\nlibrary(ggh4x)\nlibrary(magick)\nshaw_players <- c(\n  'Eden Hazard' = 'E. Hazard',\n  'Mohamed Salah' = 'Mohamed Salah',\n  'Son Heung-Min' = 'Heung-Min Son',\n  'Joshua King' = 'J. King',\n  'Romelu Lukaku' = 'R. Lukaku',\n  'Harry Kane' = 'H. Kane',\n  'Sadio ManÃ©' = 'S. Mane',\n  'Dele Alli' = 'D. Ali',\n  'Riyad Mahrez' = 'R. Mahrez',\n  'Christian Eriksen' = 'C. Eriksen',\n  'Pedro' = 'Pedro',\n  'Alexis SÃ¡nchez' = 'A. Sanchez',\n  'Roberto Firmino' = 'Roberto Firmino',\n  'Jamie Vardy' = 'J. Vardy',\n  'Xherdan Shaqiri' = 'X. Shaqiri',\n  'Wilfried Zaha' = 'W. Zaha',\n  'Nathan Redmond' = 'N. Redmond',\n  'Gylfi Sigurdsson' = 'G. Sigurdsson',\n  'Kevin De Bruyne' = 'K. De Bruyne',\n  'Andros Townsend' = 'A. Townsend',\n  'Sergio AgÃ¼ero' = 'S. Aguero',\n  'Marcus Rashford' = 'M. Rashford',\n  'Jermain Defoe' = 'J. Defoe',\n  'Raheem Sterling' = 'R. Sterling',\n  'Marko Arnautovic' = 'M. Arnautovic',\n  'Paul Pogba' = 'P. Pogba',\n  'SalomÃ³n RondÃ³n' = 'S. Rondon',\n  'Christian Benteke' = 'C. Benteke'\n)\n\nordinal_adj_shots_by_player <- adj_shots_by_player |>\n  dplyr::filter(\n    player %in% names(shaw_players)\n  ) |> \n  dplyr::mutate(\n    player = forcats::fct_reorder(shaw_players[player], adj_g_xg_ratio_mean)\n  )\n\nadj_ratio_plot <- ordinal_adj_shots_by_player |>\n  ggplot2::ggplot() +\n  ggplot2::aes(y = player) +\n  ggplot2::geom_errorbarh(\n    aes(\n      xmin = adj_g_xg_ratio_mean - adj_g_xg_ratio_sd,\n      xmax = adj_g_xg_ratio_mean + adj_g_xg_ratio_sd\n    ),\n    color = 'blue',\n    linewidth = 0.1,\n    height = 0.3\n  ) +\n  ggplot2::geom_point(\n    ggplot2::aes(x = adj_g_xg_ratio_mean),\n    shape = 23,\n    size = 0.75,\n    stroke = 0.15,\n    fill = 'red',\n    color = 'black'\n  ) +\n  ggplot2::geom_vline(\n    ggplot2::aes(xintercept = 1), \n    linewidth = 0.1, \n    linetype = 2\n  ) +\n  ## add duplicate axis for ticks: https://stackoverflow.com/questions/56247205/r-ggplot2-add-ticks-on-top-and-right-sides-of-all-facets\n  ggplot2::scale_x_continuous(sec.axis = ggplot2::dup_axis()) +\n  ## ggplot2 doesn't support duplicated and creatinga  second axis for discrete variables:\n  ##   https://github.com/tidyverse/ggplot2/issues/3171.\n  ##   using ggh4x is a workaround.\n  ggplot2::guides(\n    y.sec = ggh4x::guide_axis_manual(\n      breaks = ordinal_adj_shots_by_player$player,\n      labels = ordinal_adj_shots_by_player$player\n    )\n  ) +\n  ggplot2::theme_linedraw(base_family = 'DejaVu Sans', base_size = 4) +\n  ggplot2::theme(\n    plot.title = ggplot2::element_text(hjust = 0.5, size = 4.25, face = 'plain'),\n    axis.ticks.length = ggplot2::unit(-1, 'pt'),\n    axis.ticks = ggplot2::element_line(linewidth = 0.05),\n    panel.grid.major.y = ggplot2::element_blank(),\n    panel.grid.minor = ggplot2::element_blank(),\n    panel.grid.major.x = ggplot2::element_line(linetype = 2),\n    axis.text.x.top = ggplot2::element_blank(),\n    axis.text.y.right = ggplot2::element_blank(),\n    axis.title.x.top = ggplot2::element_blank(),\n    axis.title.y.right = ggplot2::element_blank()\n  ) +\n  ggplot2::labs(\n    title = 'Shots from 2016/17 & 2017/18 seasons',\n    y = NULL,\n    x = 'Outperformance (= G/xG)'\n  )\n\nproj_dir <- 'posts/xg-ratio-empirical-bayes'\nplot_path <- file.path(proj_dir, 'shaw-figure-1-replication.png')\nggplot2::ggsave(\n  adj_ratio_plot,\n  filename = plot_path,\n  units = 'px',\n  width = 549,\n  height = 640\n)\n\nlibrary(magick)\norig_image <- magick::image_read(file.path(proj_dir, 'shaw-figure-1.png'))\nreplicated_image_with_asa_logo <- magick::image_read(plot_with_asa_logo_path)\ncombined_image_with_tony_logo <- magick::image_append(\n  c(orig_image, replicated_image_with_tony_logo), \n  stack = TRUE\n)\n\nmagick::image_write(\n  combined_image_with_tony_logo, \n  path = file.path(proj_dir, 'shaw-figure-1-compared-w-tony-logo.png')\n)\n```\n:::\n\n\n![](shaw-figure-1-compared-w-tony-logo.png)\n\nNote that I've used Beta-Binomial empirical Bayes a few times for public projects in the past:\n\n1.  [to estimate the proportion of direct free kick shots on target (soccer), grouped by league](https://twitter.com/TonyElHabr/status/1457377069957107715?s=20)\n2.  [to adjust Whataburger Yelp reviews for small sample sizes](https://twitter.com/TonyElHabr/status/1429610210964955137?s=20)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}