---
title: Shooting Performance Likeliness
description: "Quantifying how unlikely a player's season-long shooting performance was"
date: 2024-05-04
draft: false
toc-depth: 4
toc-expand: true
categories:
  - r
  - soccer
image: maddison_uu_approach3.png
execute: 
  code-fold: show
  eval: false
  include: false
  echo: true
---

# Introduction

Towards the end of each soccer season, we naturally start to look back at player performances, often looking to seems to have improved the most compared to their past seasons. Or, on the other end of the spectrum, who disappointed the most. We may have different motivations for doing so--e.g. we may be trying to attribute team over- and under-performance to individuals, we may be hypothesizing who is likely to be transferred or resigned, etc.

The question "How unexpected (or "unlikely") was player X's shooting performance this season?" is often posed when observing a large difference in a player's goals scored and [expected goals (xG)](https://theanalyst.com/na/2021/07/what-are-expected-goals-xg/). For instance, if a striker only scores 9 goals on 12 xG in a given season, their "underperformance" of 3 goals is certainly notable, as its about 25% lower than expected (i.e. `(9 - 12) / 12`).

The ["Outperformance" ($O_p$) ratio](/posts/xg-ratio-empirical-bayes/)--the ratio of a player $p$'s (non-penalty) goals $G_p$ to expected goals $xG_p$--is perhaps the most common way of evaluating a player's shooting performance.[^1]

[^1]: The raw difference between goals and xG is another reasonable measure of shooting performance, but it can "hide" shot volume. Is it fair to compare a player who take 100 shots in a year and scores 12 goals on 10 xG with a player who takes 10 shots and scores 3 goals on 1 xG? The raw difference is +2 in both cases, indicating no difference in the shooting performance for the two players. But $O$ would be 1.2 and 3 respectively, hinting at the former player's small sample size (since no one can reasonably expect to sustain an $O$ greater than 1.5 or 2 over many shots).

$$
O_p = \frac{G_p}{xG_p}
$$

An $O_p$ ratio of 1 indicates that a player is scoring as many goals as expected; a ratio greater than 1 indicates underperformance; and a ratio less than 1 indicates overperformance. Our hypothetical player underperformed with $O_p = \frac{8}{12} = 0.67$.

In most cases, we have prior seasons of data to use when evaluating a player's $O_p$ ratio for a given season. For example, let's say our hypothetical player scored 12 goals on 10 xG ($O_p = 1.2$) in the season prior, and 11 goals on 10 xG ($O_p = 1.1$) before that. Putting things in perspective, an $O_p = 0.75$ after those performances seems fairly unlikely, especially compared to an "average" player who theoretically achieves $O_p = 1$ ratio every year.

So how do we put a number on the unlikeliness of that $O_p = 0.75$ for our hypothetical player, accounting for their prior season-long performances?

### Data

I'll be using public data from [FBref](https://fbref.com/) for the 2018/19 - 2023/24 seasons of the [the Big 5 European soccer leagues](https://fbref.com/en/comps/Big5/Big-5-European-Leagues-Stats), updated through April 26. Fake data is nice for examples, but ultimately we want to test our methods on real data. Our intuition about the results can be a useful caliber of the sensibility of our results.

```{r}
#| label: setup
#| code-fold: true
#| echo: true
#| code-summary: "Setup"
library(dplyr)
library(purrr)
library(rlang)
library(tidyr)

library(worldfootballR)

library(qs)

COUNTRIES <- c('ENG', 'ESP', 'GER', 'ITA', 'FRA')
GENDERS <- 'M'
SEASON_END_YEARS <- 2018:2024
TIER <- '1st'
PROJ_DIR <- 'drafts/xg-likelihood'
```

```{r}
#| label: reprex_print
#| include: false
reprex_print <- function(...) {
  capture.output(...) |> 
    paste('#>', x = _) |> 
    cat(sep = '\n')
}
```

```{r}
#| label: raw-data-pull
#| include: true
#| code-fold: true
#| code-summary: "Get shot data"
raw_shots <- worldfootballR::load_fb_match_shooting(
  country = COUNTRIES,
  tier = TIERS,
  gender = GENDERS,
  season_end_year = SEASON_END_YEARS
)
#> → Data last updated 2024-04-25 17:52:47 UTC

np_shots <- raw_shots |> 
  ## Drop penalties
  dplyr::filter(
    !dplyr::coalesce((Distance == '13' & round(as.double(xG), 2) == 0.79), FALSE)
  ) |> 
  dplyr::transmute(
    season_end_year = Season_End_Year,
    player_id = Player_Href |> dirname() |> basename(),
    player = Player,
    match_date = lubridate::ymd(Date),
    match_id = MatchURL |> dirname() |> basename(),
    minute = Minute,
    g = as.integer(Outcome == 'Goal'),
    xg = as.double(xG)
  ) |> 
  ## A handful of scored shots with empty xG
  dplyr::filter(!is.na(xg)) |> 
  dplyr::arrange(season_end_year, player_id, match_date, minute)

## Use the more commonly used name when a player ID is mapped to multiple names
##   (This "bug" happens because worldfootballR doesn't go back and re-scrape data
##   when fbref makes a name update.)
player_name_mapping <- np_shots |> 
  dplyr::count(player_id, player) |> 
  dplyr::group_by(player_id) |> 
  dplyr::slice_max(n, n = 1, with_ties = FALSE) |> 
  dplyr::ungroup() |> 
  dplyr::distinct(player_id, player)

player_season_np_shots <- np_shots |> 
  dplyr::summarize(
    .by = c(player_id, season_end_year), 
    shots = dplyr::n(),
    dplyr::across(c(g, xg), sum)
  ) |> 
  dplyr::mutate(
    o = g / xg
  ) |> 
  dplyr::left_join(
    player_name_mapping,
    by = dplyr::join_by(player_id)
  ) |> 
  dplyr::relocate(player, .after = player_id) |> 
  dplyr::arrange(player_id, season_end_year)
player_season_np_shots
#> # A tibble: 15,317 × 7
#>    player_id player          season_end_year shots     g    xg     o
#>    <chr>     <chr>                     <int> <int> <int> <dbl> <dbl>
#>  1 0000acda  Marco Benassi              2018    70     5  4.01 1.25 
#>  2 0000acda  Marco Benassi              2019    59     7  5.61 1.25 
#>  3 0000acda  Marco Benassi              2020    20     1  1.01 0.990
#>  4 0000acda  Marco Benassi              2022    10     0  0.99 0    
#>  5 0000acda  Marco Benassi              2023    19     0  1.35 0    
#>  6 000b3da6  Manuel Iturra              2018     2     0  0.41 0    
#>  7 00242715  Moussa Niakhate            2018    16     0  1.43 0    
#>  8 00242715  Moussa Niakhate            2019    10     1  1.5  0.667
#>  9 00242715  Moussa Niakhate            2020    11     1  1.02 0.980
#> 10 00242715  Moussa Niakhate            2021     9     2  1.56 1.28 
#> # ℹ 15,307 more rows
```

```{r}
#| label: np_shots-save
qs::qsave(np_shots, file.path(PROJ_DIR, 'np_shots.qs'))
qs::qsave(player_season_np_shots, file.path(PROJ_DIR, 'player_season_np_shots.qs'))
```

```{r}
#| label: np_shots-read
np_shots <- qs::qread(file.path(PROJ_DIR, 'np_shots.qs'))
player_season_np_shots <- qs::qread(file.path(PROJ_DIR, 'player_season_np_shots.qs'))
```

```{r}
#| label: players_to_evaluate
## Choose Maddison and Cunha based off of this
# players_to_evaluate <- dplyr::inner_join(
#   player_season_np_shots |> 
#     dplyr::filter(season_end_year < 2024L) |>
#     dplyr::summarize(
#       .by = c(player_id, player),
#       prior_count = n(), 
#       prior_count_with_pos_o = sum(o > 1),
#       prior_count_with_neg_o = sum(o < 1),
#       dplyr::across(
#         c(
#           shots,
#           g,
#           xg,
#         ),
#         \(.x) sum(.x),
#         .names = 'prior_{.col}'
#       )
#     ) |>
#     dplyr::arrange(dplyr::desc(prior_shots)),
#   player_season_np_shots |> 
#     dplyr::filter(season_end_year == 2024L) |> 
#     dplyr::select(
#       player_id,
#       shots,
#       g,
#       xg,
#       o
#     ) |> 
#     dplyr::rename_with(
#       \(.x) paste0('target_', .x),
#       c('shots', 'g', 'xg', 'o')
#     ),
#   by = dplyr::join_by(player_id)
# )
# 
# players_to_evaluate |> 
#   dplyr::filter(prior_count == prior_count_with_pos_o, target_o < 1) |> 
#   dplyr::arrange(dplyr::desc(prior_shots))
# 
# players_to_evaluate |> 
#   dplyr::filter(prior_count == prior_count_with_neg_o, target_o > 1) |> 
#   dplyr::arrange(dplyr::desc(prior_shots))
```

We'll focus on two players in particular--[James Maddison](https://fbref.com/en/players/ee38d9c5/James-Maddison) and [Matheus Cunha](https://fbref.com/en/players/dc62b55d/Matheus-Cunha). Maddison has had a sub-par 2023/2024 season for his own standards, underperforming his xG for the first time in since he started playing in the Premier League in 2018/19. On the other hand, Cunha--who has bounced around teams across the Bundesliga, La Liga, and most recently the Premier League--has overperformed his xG for the first time this season.[^2]

[^2]: If you look at Cunha's FBref page, it will show partial seasons where he has been transferred and has overperformed either before or after being transferred. But when combining the partial seasons into a whole seasons, he had never managed to have an $O_p$ greater than 1 until 2023/24.

```{r}
#| label: select_player_season_np_shots
#| include: true
#| code-fold: show
#| code-summary: "Players to highlight throughout this post"
SELECT_PLAYERS <- c(
  'ee38d9c5' = 'James Maddison',
  'dc62b55d' = 'Matheus Cunha'
)
select_player_season_np_shots <- player_season_np_shots |>
  dplyr::filter(player_id %in% names(SELECT_PLAYERS))
select_player_season_np_shots
#> # A tibble: 12 × 7
#>    player_id player         season_end_year shots     g    xg     o
#>    <chr>     <chr>                    <int> <int> <int> <dbl> <dbl>
#>  1 dc62b55d  Matheus Cunha             2019    34     2  4.16 0.481
#>  2 dc62b55d  Matheus Cunha             2020    51     5  5.34 0.936
#>  3 dc62b55d  Matheus Cunha             2021    68     5  6.91 0.724
#>  4 dc62b55d  Matheus Cunha             2022    39     6  6.06 0.990
#>  5 dc62b55d  Matheus Cunha             2023    38     2  3.44 0.581
#>  6 dc62b55d  Matheus Cunha             2024    71    10  8.59 1.16 
#>  7 ee38d9c5  James Maddison            2019    81     6  5.85 1.03 
#>  8 ee38d9c5  James Maddison            2020    74     6  5.36 1.12 
#>  9 ee38d9c5  James Maddison            2021    75     8  3.86 2.07 
#> 10 ee38d9c5  James Maddison            2022    72    12  7.56 1.59 
#> 11 ee38d9c5  James Maddison            2023    83     9  7.12 1.26 
#> 12 ee38d9c5  James Maddison            2024    49     4  4.72 0.847
```

```{r}
#| label: more-setup
#| include: true
#| code-fold: true
#| code-summary: "More variables useful for the rest of the post"
TARGET_SEASON_END_YEAR <- 2024

player_np_shots <- player_season_np_shots |> 
  dplyr::mutate(
    is_target = season_end_year == TARGET_SEASON_END_YEAR
  ) |> 
  dplyr::summarize(
    .by = c(is_target, player_id, player),
    dplyr::across(
      c(shots, g, xg),
      \(.x) sum(.x, na.rm = TRUE)
    )
  ) |> 
  dplyr::mutate(o = g / xg) |> 
  dplyr::arrange(player, player_id, is_target)

wide_player_np_shots <- player_np_shots |>
  dplyr::transmute(
    player_id, 
    player,
    which = ifelse(is_target, 'target', 'prior'), 
    shots, g, xg, o
  ) |> 
  tidyr::pivot_wider(
    names_from = which, 
    values_from = c(shots, g, xg, o), 
    names_glue = '{which}_{.value}'
  )

all_players_to_evaluate <- wide_player_np_shots |> 
  tidyr::drop_na(prior_o, target_o) |> 
  dplyr::filter(
    prior_shots >= 50,
    target_shots >= 10,
    prior_g > 0, 
    target_g > 0
  )
```

## Methods and Analysis

### Approach 0: $t$-test

If you have some background in statistics, perhaps the first approach that comes to mind is a [$t$-test](https://en.wikipedia.org/wiki/Student%27s_t-test) (using shot-weighted averages and standard deviations).[^3]

[^3]: This is a two-sided test

```{r}
#| label: select_t_test
#| include: true
#| code-fold: true
#| code-summary: "Approach 0"
## The actual t-test
approach0 <- select_player_season_np_shots |> 
  dplyr::filter(season_end_year < TARGET_SEASON_END_YEAR) |> 
  dplyr::summarise(
    .by = c(player),
    mean = weighted.mean(o, w = shots),
    ## could also use a function like Hmisc::wtd.var for weighted variance
    sd = sqrt(sum(shots * (o - weighted.mean(o, w = shots))^2) / sum(shots))
  ) |> 
  dplyr::inner_join(
    wide_player_np_shots |> 
      dplyr::select(player, prior_o, target_o),
    by = dplyr::join_by(player)
  ) |> 
  dplyr::mutate(
    z_score = (target_o - mean) / sd,
    uu = pnorm(-abs(z_score)),
    ou = pnorm(abs(z_score))
  ) |> 
  dplyr::select(-c(mean, sd)) |> 
  dplyr::arrange(player)
```

```{r}
#| label: approach0-show
#| include: true
#| code-fold: show
#| code-summary: "Approach 0 output"
approach0 |> dplyr::select(player, prior_o, target_o, uu, ou)
#> # A tibble: 2 × 5
#>   player         prior_o target_o     uu    ou
#>   <chr>            <dbl>    <dbl>  <dbl> <dbl>
#> 1 James Maddison   1.38     0.847 0.0707 0.929
#> 2 Matheus Cunha    0.772    1.16  0.0125 0.988
```

#### Discussion

In reality, this isn't giving us a percentage of likelihood of the outcome. Rather, the p-value measures the probability of obtaining an outperformance as extreme as the one observed in 2023/24 (or more extreme) if the null hypothesis is true. The null hypothesis in this case would be that there is no significant difference between the player's actual outperformance ratio in the 2023/24 "target" season and the distribution of outperformance ratios observed in previous seasons.

The t-test indicates that Cunha's goals-to-xG ratio this year violates the null hypothesis, suggesting that this season has been significantly remarkable for him. On the other hand, the t-test indicates that there is not sufficient evidence that Maddison's $O_p$ this season is significantly worse than his $O_p$ in prior seasons.

### Approach 1: Comparing with Other Players

The next approach I'll present is not so statistically grounded, but may be how some think about unlikeliness.

1.  Calculate the proportional difference between the pre-target and target season outperformance ratios--$O_{p,\text{target}'}$ and $O_{p,\text{target}'}$ respectively--for all players $P$.

$$
\delta O_p = \frac{O_{p,\text{target}} - O_{p,\text{target}'}}{O_{p,\text{target}'}}
$$

2.  Weight $\delta O^w_p$ by the player's $xG_p$ accumulated in prior seasons.[^4]

[^4]: The weighting here is to reflect the intuition that players who have taken a lot of shots in the past and have an uncharacteristic season are shown as more unlikely than a player with only one prior season of shots, who happens to have a very different goals-to-expected goals ratio in the latter season.

$$
\delta O^w_p = \delta O_p * xG_p
$$

3.  Calculate the the unlikelihood of the outcome $U_p$ as a percentile rank of $\delta O^w_p$.

To quantify the "underperforming" unlikelihood $U^-_p$, we sort $\delta O^w_p$ in ascending order--more negative $\delta O^w_p$ values correspond to lower percentile $U^-_p$, which represent more unlikely outcomes where a players underperformed relative to prior seasons. In code, this looks as follows.

```{r}
#| label: uu_approach1
#| include: true
#| code-fold: true
#| code-summary: "Approach 1"
## `uu` for "underperforming unlikelihood"
uu_approach1 <- all_players_to_evaluate |> 
  dplyr::transmute(
    player_id,
    player,
    prior_o,
    target_o,
    prior_xg,
    weighted_delta_o = prior_xg * (target_o - prior_o) / prior_o,
    uu_rank = dplyr::row_number(weighted_delta_o),
    uu = dplyr::percent_rank(weighted_delta_o)
  ) |> 
  dplyr::arrange(uu_rank)
```

```{r}
#| label: select_uu_approach1
#| include: true
#| code-fold: show
#| code-summary: "Approach 1 output for Maddison"
uu_approach1 |> 
  dplyr::filter(player == 'James Maddison') |> 
  dplyr::select(player, prior_o, target_o, prior_xg, weighted_delta_o, uu_rank, uu)
#> # A tibble: 1 × 7
#>   player         prior_o target_o prior_xg weighted_delta_o uu_rank     uu
#>   <chr>            <dbl>    <dbl>    <dbl>            <dbl>   <int>  <dbl>
#> 1 James Maddison    1.38    0.847     29.8            -11.5      37 0.0608
```

So, among the 593 player's evaluated, Maddison's 2023/24 $O_p$ ranks as the 37th most unlikely. In terms of $U^-_p$, Maddison's 2023/24 goals-to-xG ratio ranks as a 6th percentile outcome.

For "overperforming" unlikelihood $U^+_p$, we sort $\delta O_p$ in descending order.

```{r}
#| label: ou_approach1
#| include: true
#| code-fold: true
#| code-summary: "Output of approach 1 for Maddison"
## `ou` for overperforming unlikeliness.
ou_approach1 <- uu_approach1 |> 
  dplyr::transmute(
    player_id,
    player,
    prior_o,
    target_o,
    prior_xg,
    weighted_delta_o,
    ou_rank = dplyr::row_number(-weighted_delta_o),
    ou = dplyr::percent_rank(-weighted_delta_o)
  )
```

This methodology shows that Cunha's 2023/24 $O_p$ ranks as the 70th most unlikely in terms of overperformance, or a 12th percentile outcome.

```{r}
#| label: select_ou_approach1
#| include: true
#| code-fold: show
#| code-summary: "Approach 1 output for Cunha"
ou_approach1 |> 
  dplyr::filter(player == 'Matheus Cunha') |> 
  dplyr::select(player, prior_o, target_o, prior_xg, weighted_delta_o, ou_rank, ou)
#> # A tibble: 1 × 7
#>   player        prior_o target_o prior_xg weighted_delta_o ou_rank    ou
#>   <chr>           <dbl>    <dbl>    <dbl>            <dbl>   <int> <dbl>
#> 1 Matheus Cunha   0.772     1.16     25.9             13.2      70 0.117
```

#### Discussion

These results feel fairly reasonable, although the rankings are sensitive to the pool of players with which a given player is compared. If a large majority of players in a given season happened to score more than their xG would imply, then a player scoring at a neutral pace would be penalized by this approach. Of course, such an outcome is unlikely, but speaks to the role that selection bias might have with influencing results with this methodology.

One other thing--we're implicitly assuming that the distribution of unlikeliness should be uniform across all players in a given season. In other words, we're assuming that there has to be 1% of players with a 1st percentile underperforming outcome, 17% of players with 17th percentile underperforming outcome, etc. I think this assumption makes sense in the long run, but in any given individual season, there may not be a single player who shots terribly enough to really deserve that "worst of the worst", 1st percentile outcome.

### Approach 2: Resampling from Prior History of Shots

There's only so much you can do with player-season level data. We need to dive into shot-level data if we want to more robustly understand uncertainty of outcomes.

Here's a more sophisticated approach to quantifying the unlikeliness of a target season's $G / xG$ ratio:

1.  Sample $N_{p,\text{target}}$ shots (with replacement[^5]) from a player's past shots $S_{p,\text{target}'}$. Repeat this for $R$ resamples.[^6]
2.  To quantify unlikeliness of a given player underperforming in the target season $U^-_p$, count the number of resamples $r^-$ in which the outperformance ratio $\hat{O}_{p,\text{target}'}$ of the sampled shots is less than or equal to the observed $O_{p,\text{target}}$ in the target season for the player.[^7] The proportion $\frac{r^-}{R}$ represents the unlikeness of a given player's observed $O_{p,\text{target}}$ in the target season.

[^5]: One could argue that without replacement is also reasonable. However, some players wouldn't have enough shots from prior seasons to match their volume of shots in 2023/24.

[^6]: (Change nothing about the shot's xG and goal outcomes.) $N_p$ should be set equal to the number of shots a player has taken in the target season, i.e. 2023/24 here. $M$ should be set to some fairly large number, so as to achieve stability in the results.

[^7]: Similarly, to estimate the unlikeness of an overperforming season, count up in how many simulations $r^+$ the outperformance ratio of the resampled shots is greater than $O_{p,\text{target}}$ and calculate the proportion $\U^+ = \frac{r^+}{r}$.

Here's how that looks in code.

```{r}
#| label: uu_approach2
#| include: true
#| code-fold: true
#| code-summary: "Approach 2"
resample_player_shots <- function(
    shots, 
    n_shots_to_sample, 
    n_sims = 1000,
    replace = TRUE,
    seed = 42
) {
  
  withr::local_seed(seed)
  purrr::map_dfr(
    1:n_sims,
    \(.sim) {
      sampled_shots <- shots |> 
        slice_sample(n = n_shots_to_sample, replace = replace)
      
      list(
        sim = .sim,
        xg = sum(sampled_shots$xg),
        g = sum(sampled_shots$g),
        o = sum(sampled_shots$g) / sum(sampled_shots$xg)
      )
    }
  )
}

resample_one_player_o <- function(shots, target_season_end_year) {
  target_shots <- shots |>
    dplyr::filter(season_end_year == target_season_end_year)
  
  prior_shots <- shots |>
    dplyr::filter(season_end_year < target_season_end_year)
  
  prior_shots |> 
    resample_player_shots(
      n_shots_to_sample = nrow(target_shots)
    )
}

resample_player_o <- function(shots, players, target_season_end_year) {
  purrr::imap_dfr(
    players,
    \(.player, .player_id) {
      shots |> 
        dplyr::filter(player_id == .player_id) |> 
        resample_one_player_o(
          target_season_end_year = target_season_end_year
        ) |> 
        dplyr::mutate(
          player_id = .player_id,
          player = .player
        )
    }
  )
}

select_resampled_o <- np_shots |> 
  resample_player_o(
    players = SELECT_PLAYERS,
    target_season_end_year = TARGET_SEASON_END_YEAR
  ) |> 
  dplyr::inner_join(
    wide_player_np_shots |> 
      dplyr::select(
        player_id,
        prior_o,
        target_o
      ),
    by = dplyr::join_by(player_id)
  ) |> 
  dplyr::arrange(player, player_id)

uu_approach2 <- select_resampled_o |>
  dplyr::summarize(
    .by = c(player_id, player, prior_o, target_o),
    uu = sum(o <= target_o) / n(),
    ou = sum(o >= target_o) / n()
  ) |> 
  dplyr::arrange(player)
```

```{r}
#| label: select_resampled_props-show
#| include: true
#| code-fold: show
#| code-summary: "Approach 1 output"
uu_approach2 |> dplyr::select(player, prior_o, target_o, uu, ou)
#> # A tibble: 2 × 5
#>   player         prior_o target_o    uu    ou
#>   <chr>            <dbl>    <dbl> <dbl> <dbl>
#> 1 James Maddison   1.38     0.847 0.163 0.837
#> 2 Matheus Cunha    0.772    1.16  0.898 0.103
```

These results imply that Maddison's 2023/24 $G / xG$ ratio of 0.847 (or worse) occurs in 16.3% of simulations (`uu`), and that Cunha's 2023/24 $O$ ratio of 1.16 (or better) occurs in 10.3% of simulations (`1 - uu`).[^8] Honestly, these numbers feel fairly reasonable, but perhaps a bit too opinionated.

[^8]: Put more in layman's terms, we might expect Maddison to have a season-long $O$ ratio like his 2023/24 ratio in 1 of every 6 seasons. Likewise, Cunha's 2023/24 outcome is a 1 in 10 season occurrence, given his shot history.

This approach is fairly simplistic and elegant--we just sample shots from a player's history and count up the outcomes with respect to a target threshold. The plot below should provide a bit of visual intuition as to what's going on.

```{r}
#| label: maddison_resampled_o_plot
library(ggplot2)
library(sysfonts)
library(showtext)
library(ggtext)
library(htmltools)

TAG_LABEL <- htmltools::tagList(
  htmltools::tags$span(htmltools::HTML(enc2utf8("&#xf099;")), style = 'font-family:fb'),
  htmltools::tags$span("@TonyElHabr"),
)
CAPTION_LABEL <- '**Data**: Opta via fbref. Updated through 2024-04-26.'
# SUBTITLE_LABEL <- 'Big 5 Leagues, 2017/18 - 2022/23'
PLOT_RESOLUTION <- 300
WHITISH_FOREGROUND_COLOR <- 'white'
COMPLEMENTARY_FOREGROUND_COLOR <- '#cbcbcb' # '#f1f1f1'
BLACKISH_BACKGROUND_COLOR <- '#1c1c1c'
COMPLEMENTARY_BACKGROUND_COLOR <- '#4d4d4d'
FONT <- 'Titillium Web'
sysfonts::font_add_google(FONT, FONT)
## https://github.com/tashapiro/tanya-data-viz/blob/main/chatgpt-lensa/chatgpt-lensa.R for twitter logo
sysfonts::font_add('fb', 'Font Awesome 6 Brands-Regular-400.otf')
showtext::showtext_auto()
showtext::showtext_opts(dpi = PLOT_RESOLUTION)

ggplot2::theme_set(ggplot2::theme_minimal())
ggplot2::theme_update(
  text = ggplot2::element_text(family = FONT),
  title = ggplot2::element_text(size = 18, color = WHITISH_FOREGROUND_COLOR),
  plot.title = ggtext::element_markdown(face = 'bold', size = 18, color = WHITISH_FOREGROUND_COLOR),
  plot.title.position = 'plot',
  plot.subtitle = ggtext::element_markdown(size = 18, color = COMPLEMENTARY_FOREGROUND_COLOR),
  axis.text = ggplot2::element_text(color = WHITISH_FOREGROUND_COLOR, size = 14),
  # axis.title = ggplot2::element_text(size = 14, color = WHITISH_FOREGROUND_COLOR, face = 'bold', hjust = 0.99),
  axis.title.x = ggtext::element_markdown(size = 14, color = WHITISH_FOREGROUND_COLOR, face = 'bold', hjust = 0.99),
  axis.title.y = ggtext::element_markdown(size = 14, color = WHITISH_FOREGROUND_COLOR, face = 'bold', hjust = 0.99),
  axis.line = ggplot2::element_blank(),
  strip.text = ggplot2::element_text(size = 14, color = WHITISH_FOREGROUND_COLOR, face = 'bold', hjust = 0),
  panel.grid.major = ggplot2::element_line(color = COMPLEMENTARY_BACKGROUND_COLOR),
  panel.grid.minor = ggplot2::element_line(color = COMPLEMENTARY_BACKGROUND_COLOR),
  panel.grid.minor.x = ggplot2::element_blank(),
  panel.grid.minor.y = ggplot2::element_blank(),
  plot.margin = ggplot2::margin(10, 20, 10, 20),
  plot.background = ggplot2::element_rect(fill = BLACKISH_BACKGROUND_COLOR, color = BLACKISH_BACKGROUND_COLOR),
  plot.caption = ggtext::element_markdown(color = WHITISH_FOREGROUND_COLOR, hjust = 0, size = 10, face = 'plain'),
  plot.caption.position = 'plot',
  plot.tag = ggtext::element_markdown(size = 10, color = WHITISH_FOREGROUND_COLOR, hjust = 1),
  plot.tag.position = c(0.99, 0.01),
  panel.spacing.x = grid::unit(2, 'lines'),
  panel.background = ggplot2::element_rect(fill = BLACKISH_BACKGROUND_COLOR, color = BLACKISH_BACKGROUND_COLOR)
)

group_palette <- c(
  # 'gte' = '#f15bb5',
  'lte' = '#00bbf9',
  'other' = '#6E7275'
)

maddison_resampled_o <- select_resampled_o |>
  dplyr::filter(player == 'James Maddison') |> 
  dplyr::mutate(
    group = ifelse(o <= target_o, 'lte', 'other')
  )

maddison_uu_approach2_plot <- maddison_resampled_o |> 
  ggplot2::ggplot() +
  ggplot2::aes(
    x = o
  ) +
  ggplot2::geom_histogram(
    ggplot2::aes(fill = group),
    binwidth = 0.05,
    boundary = 0,
    show.legend = FALSE
  ) +
  ggplot2::scale_fill_manual(
    values = group_palette
  ) +
  ggplot2::geom_vline(
    data = uu_approach2 |> 
      dplyr::filter(player == 'James Maddison'),
    ggplot2::aes(xintercept = target_o),
    linetype = 2,
    color = 'white'
  ) +
  ggplot2::geom_vline(
    ggplot2::aes(xintercept = 1),
    color = 'white',
    linetype = 1,
    linewidth = 1.5
  ) +
  ggplot2::coord_cartesian(
    ylim = c(0, 48), 
    xlim = c(0, 4),
    expand = FALSE,
    clip = 'off'
  ) +
  ggplot2::annotate(
    geom = 'text',
    x = 0.95,
    y = 45,
    hjust = 1,
    label = 'Underperformance',
    color = WHITISH_FOREGROUND_COLOR,
    fontface = 'bold',
    family = FONT,
    size = 12 / .pt
  ) +
  ggplot2::annotate(
    geom = 'text',
    x = 1.05,
    y = 45,
    hjust = 0,
    label = 'Overperformance',
    color = WHITISH_FOREGROUND_COLOR,
    fontface = 'bold',
    family = FONT,
    size = 12 / .pt
  ) +
  ggplot2::annotate(
    geom = 'text',
    x = 2.5,
    y = 45,
    hjust = 0,
    vjust = 1,
    label = "An outperformance ratio of 0.847\n(Maddison's 2023/24 G / xG ratio)\nor worse occurs in 16.3% of 1k\nsimulations.",
    color = group_palette[['lte']],
    fontface = 'bold',
    family = FONT,
    size = 12 / .pt
  ) +
  ggplot2::annotate(
    geom = 'curve',
    x = 2.4,
    y = 40,
    xend = 0.8,
    yend = 29,
    arrow = grid::arrow(length = grid::unit(3, 'pt'), type = 'closed'),
    linewidth = 0.5,
    curvature = 0.25,
    color = group_palette[['lte']]
  )  +
  ggplot2::annotate(
    ggpath::GeomFromPath,
    x = 4,
    y = 52,
    path = file.path(PROJ_DIR, '493165.png'),
    width = 0.08
  ) +
  ggplot2::theme(
    plot.title = ggtext::element_markdown(size = 16),
    plot.subtitle = ggtext::element_markdown(size = 12)
  ) +
  ggplot2::labs(
    title = 'Resampled Shooting Outperformance Ratio (G / xG) for James Maddison',
    subtitle = "Shots Sampled From Maddison's 2018/19 - 2022/2023 Seasons",
    x = 'Outperformance Ratio (G / xG)',
    y = 'Count of Simulations',
    caption = CAPTION_LABEL,
    tag = TAG_LABEL
  )

ggplot2::ggsave(
  maddison_uu_approach2_plot,
  filename = file.path(PROJ_DIR, 'maddison_uu_approach2.png'),
  width = 8,
  height = 8 / 1.5
)
```

![](maddison_uu_approach2.png)

#### Discussion

So is this good enough? Maybe. There are some caveats I can think of:

1.  We're implicitly making an assumption that a player's past shot profile is representative of their future shot profile.
2.  We're effectively treating each player's $G / xG$ ratio as constant and only trying to understand the uncertainty around it.

These things don't necessarily mean that this methodology is bad--it just has its caveats. On the other hand, one notable advantage of this approach is that it is "non-parametric"--we don't assume anything about the underlying distribution of a player's $O_p$; we simply let the power of resampling shape the distribution of outcomes, which should look different for a striker that only takes shots near the goal and a defender that only launches shots from outside the box.

One way to check on the robustness of this approach is to see what the distribution of underperforming unlikeness $U^-_p$ looks like across all players $P$. We should expect a distribution that looks relatively uniform--in other words, about 10% of players should have a 90th percentile unlikely outcomes (i.e. very likely), 10% of players should have a 10th percentile unlikely outcome (i.e. very unlikely), and so on.

```{r}
#| label: all_uu_approach2
#| include: true
#| code-fold: true
#| code-summary: "Approach 2, but with all players (meeting some baseline criteria)"
all_players <- rlang::set_names(
  all_players_to_evaluate$player,
  all_players_to_evaluate$player_id,
)

all_resampled_o <- np_shots |> 
  resample_player_o(
    players = all_players,
    target_season_end_year = TARGET_SEASON_END_YEAR
  ) |> 
  dplyr::inner_join(
    wide_player_o |> 
      dplyr::select(
        player_id,
        prior_o,
        target_o,
        prior_shots,
        target_shots
      ),
    by = dplyr::join_by(player_id)
  ) |> 
  dplyr::arrange(player, player_id)

all_uu_approach2 <- all_resampled_o |>
  dplyr::summarize(
    .by = c(player, prior_o, target_o, prior_shots, target_shots),
    uu = sum(o <= target_o) / n()
  ) |> 
  dplyr::arrange(uu)
```

```{r}
#| label: all_resampled_shots-save
#| include: false
qs::qsave(all_resampled_o, file.path(PROJ_DIR, 'all_resampled_shots.qs'))
```

```{r}
#| label: all_resampled_shots-read
#| include: false
all_resampled_o <- qs::qread(file.path(PROJ_DIR, 'all_resampled_shots.qs'))
```

```{r}
#| label: all_uu_approach2_plot
all_uu_approach2_plot <- all_uu_approach2 |> 
  ggplot2::ggplot() +
  ggplot2::aes(
    x = uu
  ) +
  ggplot2::geom_histogram(
    fill = group_palette[['other']],
    binwidth = 0.1,
    color = BLACKISH_BACKGROUND_COLOR,
    boundary = 0,
    show.legend = FALSE
  ) +
  ggplot2::annotate(
    geom = 'text',
    x = 0.25,
    y = 70,
    hjust = 0,
    vjust = 0,
    label = "Maddison's 2023/24 G / xG ratio was\nin the 16.3th percentile of\nunlikely outcomes.",
    color = group_palette[['lte']],
    fontface = 'bold',
    family = FONT,
    size = 12 / .pt
  ) +
  ggplot2::annotate(
    geom = 'curve',
    x = 0.24,
    y = 70,
    xend = 0.16,
    yend = 50,
    arrow = grid::arrow(length = grid::unit(3, 'pt'), type = 'closed'),
    linewidth = 0.5,
    curvature = 0.25,
    color = group_palette[['lte']]
  ) +
  ggplot2::coord_cartesian(
    # expand = FALSE,
    clip = 'off'
  ) +
  ggplot2::scale_x_continuous(
    labels = scales::percent,
    breaks = seq(0, 1, by = 0.1)
  ) +
  ggplot2::theme(
    panel.grid.major.x = ggplot2::element_blank(),
    plot.title = ggtext::element_markdown(size = 16),
    plot.subtitle = ggtext::element_markdown(size = 12)
  ) +
  ggplot2::labs(
    title = 'Underperformance Unlikelihood % of 2023/24 G / xG',
    subtitle = 'Calculated via a Resampling Approach',
    y = 'Count of Players',
    x = 'Underperformance Unlikelihood %',
    caption = CAPTION_LABEL,
    tag = TAG_LABEL
  )
all_uu_approach2_plot

ggplot2::ggsave(
  all_uu_approach2_plot,
  filename = file.path(PROJ_DIR, 'all_uu_approach2.png'),
  width = 8,
  height = 8 / 1.5
)
```

![](all_uu_approach2.png)

Indeed, the histogram below follows a fairly uniform distribution, with a bit of irregularity at the very edges.

Who exactly is in the edges of the spectrum?

Well, notably, [Manchester City's striker Erling Haaland](https://archive.is/https://theathletic.com/5430355/2024/04/20/erling-haaland-manchester-city-human/) shows up as having the most unlikely outcome for the 2023/24 season using this methodology.

```{r}
#| label: all_uu_approach2-show
#| include: true
#| code-fold: show
#| code-summary: "Approach 2 output for all players"
all_uu_approach2 |> dplyr::select(player, prior_o, target_o, prior_shots, target_shots, uu)
#> # A tibble: 593 × 6
#>    player                    prior_o target_o prior_shots target_shots    uu
#>    <chr>                       <dbl>    <dbl>       <int>        <int> <dbl>
#>  1 Erling Haaland               1.26    0.791         313           98 0.004
#>  2 Amine Harit                  1.27    0.262         107           33 0.01 
#>  3 Pierre-Emerick Aubameyang    1.07    0.606         405           91 0.01 
#>  4 Téji Savanier                1.42    0.282         276           72 0.01 
#>  5 Antonio Sanabria             1.05    0.386         269           47 0.014
#>  6 Alex Baena                   1.54    0.348          61           57 0.016
#>  7 Elye Wahi                    1.38    0.753         114           47 0.017
#>  8 Kevin Behrens                1.39    0.673          51           52 0.019
#>  9 Ciro Immobile                1.23    0.383         635           41 0.02 
#> 10 Ansu Fati                    1.31    0.430         125           34 0.024
#> # ℹ 583 more rows
#> # ℹ Use `print(n = ...)` to see more rows
```

Haaland's peculiar season has been noted among fans and the media, and it's interesting to see that this methodology has put the odds of such an outcome as a 0.4th percentile outcome. Perhaps that's right, but I honestly think that's just a little too extreme.

Let's see if we can improve on things with another approach.

### Approach 3: Sampling from an Estimated Distribution

If we assume that $O_p$ ratios come from a [Gamma data-generating process](https://en.wikipedia.org/wiki/Gamma_process), then we can leverage the properties of a player-level [Gamma distribution](https://en.wikipedia.org/wiki/Gamma_distribution) to assess the unlikelihood of a players $G / xG$ ratio.

To estimate the underperforming unlikeliness $U^-_p$:

1.  Estimate a Gamma distribution $\Gamma_{p,\text{target}'}$ to model a player's true outperformance ratio $O_{p}$ across all shots, excluding those in the target season--$\hat{O}_{p,\text{target}'}$.
2.  Calculate the probability that $\hat{O}_{p,\text{target}'}$ is less than or equal to the player's observed $O_{p,\text{target}}$ in the target season using the Gamma distribution's cumulative distribution function (CDF).

The same process applies for estimating overperforming unlikeliness $U^+_p$, except that we'd calculate the probability that $\hat{O}_{p,\text{target}'}$ is greter than or equal to the player's observed $O_{p,\text{target}}$ in the latter step.

```{r}
#| label: uu_approach3
#| include: true
#| code-fold: true
#| code-summary: "Approach 3"
N_SIMS <- 10000

SHOT_TO_SHAPE_MAPPING <- list(
  'from' = c(50, 750),
  'to' = c(1, 25)
)
estimate_one_gamma_distributed_o <- function(
    shots,
    target_season_end_year
) {
  player_np_shots <- shots |> 
    dplyr::mutate(is_target = season_end_year == target_season_end_year)
  
  prior_player_np_shots <- player_np_shots |> 
    dplyr::filter(!is_target)
  
  target_player_np_shots <- player_np_shots |> 
    dplyr::filter(is_target)
  

  agg_player_np_shots <- player_np_shots |>
    dplyr::summarize(
      .by = c(is_target),
      shots = dplyr::n(),
      dplyr::across(c(g, xg), \(.x) sum(.x))
    ) |> 
    dplyr::mutate(o = g / xg)
  
  agg_prior_player_np_shots <- agg_player_np_shots |> 
    dplyr::filter(!is_target)
  
  agg_target_player_np_shots <- agg_player_np_shots |> 
    dplyr::filter(is_target)

  shape <- dplyr::case_when(
    agg_prior_player_np_shots$shots < SHOT_TO_SHAPE_MAPPING$from[1] ~ SHOT_TO_SHAPE_MAPPING$to[2],
    agg_prior_player_np_shots$shots > SHOT_TO_SHAPE_MAPPING$from[2] ~ SHOT_TO_SHAPE_MAPPING$to[2],
    TRUE ~ scales::rescale(
      agg_prior_player_np_shots$shots, 
      from = SHOT_TO_SHAPE_MAPPING$from, 
      to = SHOT_TO_SHAPE_MAPPING$to
    )
  )
  list(
    'shape' = shape,
    'rate' = shape / agg_prior_player_np_shots$o
  )
}

estimate_gamma_distributed_o <- function(
    shots,
    players,
    target_season_end_year
) {
  
  purrr::imap_dfr(
    players,
    \(.player, .player_id) {
      params <- shots |> 
        dplyr::filter(player_id == .player_id) |> 
        estimate_one_gamma_distributed_o(
          target_season_end_year = target_season_end_year
        )
      
      list(
        'player_id' = .player_id,
        'player' = .player,
        'params' = list(params)
      )
    }
  )
}

select_gamma_o <- np_shots |> 
  estimate_gamma_distributed_o(
    players = SELECT_PLAYERS,
    target_season_end_year = TARGET_SEASON_END_YEAR
  ) |> 
  dplyr::inner_join(
    wide_player_np_shots |> 
      dplyr::select(
        player_id,
        prior_o,
        target_o
      ),
    by = dplyr::join_by(player_id)
  ) |> 
  dplyr::arrange(player, player_id)

uu_approach3 <- select_gamma_o |> 
  dplyr::mutate(
    uu = purrr::map2_dbl(
      target_o,
      params,
      \(.target_o, .params) {
        pgamma(
          .target_o, 
          shape = .params$shape, 
          rate = .params$rate,
          lower.tail = TRUE
        )
      }
    ),
    ou = 1 - uu
  ) |> 
  tidyr::unnest_wider(params)
```

```{r}
#| label: uu_approach3-show
#| include: true
#| code-fold: show
#| code-summary: "Approach 3 output"
uu_approach3 |> dplyr::select(player, prior_o, target_o, uu, ou)
#> # A tibble: 2 × 5
#>   player         prior_o target_o     uu     ou
#>   <chr>            <dbl>    <dbl>  <dbl>  <dbl>
#> 1 James Maddison   1.38     0.847 0.0679 0.932 
#> 2 Matheus Cunha    0.772    1.16  0.903  0.0965
```

We see that Maddison's 2023/24 $O_\{p,\text{target}}$ ratio of 0.847 (or worse) was about 7% unlikely given his prior shot history (`uu`), and that Cunha's 2023/24 $O_{p,\text{target}}$ ratio of 1.16 was a 10th percentile outcome (`ou`).

To gain some intuition around this approach, we can plot out the Gamma distributed estimate of Maddison's $O_p$. The result is a histogram that looks not all that dissimilar to the one from before with resampled shots, just much smoother (since this is a "parametric" approach).

```{r}
#| label: maddison_uu_approach3_plot
sample_from_gamma_o <- function(
    shape,
    rate,
    min = 0, 
    max = 2.5, 
    n_samples = N_SIMS,
    seed = 42
) {
  withr::local_seed(42)
  rgamma(
    N_SIMS,
    shape = shape,
    rate = rate
  )
}

maddison_uu_approach3_samples <- uu_approach3 |>
  dplyr::filter(player == 'James Maddison')|> 
  dplyr::select(
    player,
    shape,
    rate,
    target_o
  ) |> 
  dplyr::mutate(
    o = purrr::map2(
      shape,
      rate,
      \(.shape, .rate) {
        sample_from_gamma_o(
          shape = .shape,
          rate = .rate
        )
      }
    ),
    .keep = 'unused'
  ) |> 
  tidyr::unnest_longer(o) |> 
  dplyr::mutate(
    group = ifelse(o < target_o, 'lte', 'other')
  )

maddison_uu_approach3_plot <- maddison_uu_approach3_samples |> 
  ggplot2::ggplot() +
  ggplot2::aes(
    x = o
  ) +
  ggplot2::geom_histogram(
    ggplot2::aes(fill = group),
    binwidth = 0.05,
    boundary = 0,
    show.legend = FALSE
  ) +
  ggplot2::scale_fill_manual(
    values = group_palette
  ) +
  ggplot2::geom_vline(
    data = uu_approach3 |> 
      dplyr::filter(player == 'James Maddison'),
    ggplot2::aes(xintercept = target_o),
    linetype = 2,
    color = 'white'
  ) +
  ggplot2::geom_vline(
    ggplot2::aes(xintercept = 1),
    color = 'white',
    linetype = 1,
    linewidth = 1.5
  ) +
  ggplot2::coord_cartesian(
    ylim = c(-50, 700), 
    xlim = c(-0.05, 2.55),
    expand = FALSE,
    clip = 'off'
  ) +
  ggplot2::annotate(
    geom = 'text',
    x = 0.95,
    y = 650,
    hjust = 1,
    label = 'Underperformance',
    color = WHITISH_FOREGROUND_COLOR,
    fontface = 'bold',
    family = FONT,
    size = 12 / .pt
  ) +
  ggplot2::annotate(
    geom = 'text',
    x = 1.05,
    y = 650,
    hjust = 0,
    label = 'Overperformance',
    color = WHITISH_FOREGROUND_COLOR,
    fontface = 'bold',
    family = FONT,
    size = 12 / .pt
  ) +
  ggplot2::annotate(
    geom = 'text',
    x = 1.7,
    y = 625,
    hjust = 0,
    vjust = 1,
    label = "An outperformance ratio of 0.847\n(Maddison's 2023/24 G / xG ratio)\nor worse occurs in 3.3% of 10k draws.",
    color = group_palette[['lte']],
    fontface = 'bold',
    family = FONT,
    size = 11 / .pt
  ) +
  ggplot2::annotate(
    geom = 'curve',
    x = 1.55,
    y = 600,
    xend = 0.85,
    yend = 220,
    arrow = grid::arrow(length = grid::unit(3, 'pt'), type = 'closed'),
    linewidth = 0.5,
    curvature = 0.25,
    color = group_palette[['lte']]
  )  +
  ggplot2::annotate(
    ggpath::GeomFromPath,
    x = 2.5,
    y = 730,
    path = file.path(PROJ_DIR, '493165.png'),
    width = 0.08
  ) +
  ggplot2::theme(
    plot.title = ggtext::element_markdown(size = 16),
    plot.subtitle = ggtext::element_markdown(size = 12)
  ) +
  ggplot2::labs(
    title = 'Estimated Distribution of G / xG Ratio for James Maddison',
    subtitle = "Based on Maddison's 2018/19 - 2022/2023 seasons",
    x = 'Outperformance Ratio (G / xG)',
    y = 'Count of Samples (out of 10k)',
    caption = CAPTION_LABEL,
    tag = TAG_LABEL
  )

ggplot2::ggsave(
  maddison_uu_approach3_plot,
  filename = file.path(PROJ_DIR, 'maddison_uu_approach3.png'),
  width = 8,
  height = 8 / 1.5
)
```

![](maddison_uu_approach3.png)

#### Discussion

As with approach 2, we should check to see what the distribution of underperforming unlikeliness looks like--we should expect to see a somewhat uniform distribution.

```{r}
#| label: all_uu_approach3
#| include: true
#| code-fold: true
#| code-summary: "Approach 3 for all players"
all_gamma_o <- np_shots |> 
  estimate_gamma_distributed_o(
    players = all_players,
    target_season_end_year = TARGET_SEASON_END_YEAR
  ) |> 
  dplyr::inner_join(
    wide_player_np_shots |> 
      dplyr::select(
        player_id,
        prior_o,
        target_o,
        prior_shots,
        target_shots,
        prior_g,
        target_g,
        prior_xg,
        target_xg
      ),
    by = dplyr::join_by(player_id)
  ) |> 
  dplyr::arrange(player, player_id)

all_uu_approach3 <- all_gamma_o |> 
  dplyr::mutate(
    uu = purrr::map2_dbl(
      target_o,
      params,
      \(.target_o, .params) {
        pgamma(
          .target_o, 
          shape = .params$shape, 
          rate = .params$rate,
          lower.tail = TRUE
        )
      }
    ),
    ou = 1 - uu
  ) |> 
  tidyr::unnest_wider(params) |> 
  dplyr::arrange(uu)
```

```{r}
#| label: all_uu_approach3_plot
all_uu_approach3_plot <- all_uu_approach3 |> 
  ggplot2::ggplot() +
  ggplot2::aes(
    x = uu
  ) +
  ggplot2::geom_histogram(
    fill = group_palette[['other']],
    binwidth = 0.1,
    color = BLACKISH_BACKGROUND_COLOR,
    boundary = 0,
    show.legend = FALSE
  ) +
  ggplot2::annotate(
    geom = 'text',
    x = 0.09,
    y = 70,
    hjust = 0,
    vjust = 0,
    label = "Maddison's 2023/24 G / xG ratio was\nin the 9.65th percentile of\nunlikely outcomes.",
    color = group_palette[['lte']],
    fontface = 'bold',
    family = FONT,
    size = 12 / .pt
  ) +
  ggplot2::annotate(
    geom = 'curve',
    x = 0.24,
    y = 70,
    xend = 0.16,
    yend = 50,
    arrow = grid::arrow(length = grid::unit(3, 'pt'), type = 'closed'),
    linewidth = 0.5,
    curvature = 0.25,
    color = group_palette[['lte']]
  ) +
  ggplot2::coord_cartesian(
    # expand = FALSE,
    clip = 'off'
  ) +
  ggplot2::scale_x_continuous(
    labels = scales::percent,
    breaks = seq(0, 1, by = 0.1)
  ) +
  ggplot2::theme(
    panel.grid.major.x = ggplot2::element_blank(),
    plot.title = ggtext::element_markdown(size = 16),
    plot.subtitle = ggtext::element_markdown(size = 12)
  ) +
  ggplot2::labs(
    title = 'Underperformance Unlikelihood % of 2023/24 G / xG',
    subtitle = 'Calculated via a Parametric Approach',
    y = 'Count of Players',
    x = 'Underperformance Unlikelihood %',
    caption = CAPTION_LABEL,
    tag = TAG_LABEL
  )
all_uu_approach3_plot

ggplot2::ggsave(
  all_uu_approach3_plot,
  filename = file.path(PROJ_DIR, 'all_uu_approach3.png'),
  width = 8,
  height = 8 / 1.5
)
```

![](all_uu_approach3.png)

# Conclusion
