---
title: Does completing your passes even matter?
description: Looking at where an incomplete pass can still net you positive ePV.
date: 2024-04-01
draft: true
categories:
  - r
  - soccer
execute: 
  code-fold: show
  eval: true
  include: true
  echo: false
---

## Introduction

I heard someone recently say something like "Possession values (PV) models in soccer basically come down to ball progression". That's an interesting thought, and add a hunch that this isn't too far off.

One way of getting at that idea is too look at how your PV model treats incomplete passes.

-   Does it say that all long passes are "good" (i.e. have \>0 PV)?
-   What role does the starting position of the pass play? (i.e. Are balls crossed into the 18-yard box from the wing treated similarly to goal kicks launched into the opponent's box?)
-   How does PV for an unsuccessful pass compare to a successful one, holding all else equal?

I attempt to answer some of these questions with a VAEP model--an open-source PV model. My model is trained on 2013/14 - 2023/24 English Premier League data.

```{r}
#| label: setup
#| include: false
#| eval: false
## Data retrieval
library(curl)
library(arrow)
library(qs) ## local dev

## Data manipulation
library(dplyr)
# library(tidyr)
library(purrr)
library(lubridate)
library(rlang)
library(tidyselect)
# library(forcats)
library(tibble)

## Modeling
library(xgboost)

## Data exporting
library(jsonlite)

PROJ_DIR <- 'posts/ball-progression-epv'
```

```{r}
#| label: data-pull
#| include: false
#| eval: false
read_parquet_from_url <- function(url) {
  load <- curl::curl_fetch_memory(url)
  arrow::read_parquet(load$content)
}

REPO <- 'tonyelhabr/socceraction-streamlined'
read_socceraction_parquet_release <- function(name, tag) {
  url <- sprintf('https://github.com/%s/releases/download/%s/%s.parquet', REPO, tag, name)
  read_parquet_from_url(url)
}

read_socceraction_parquet_releases <- function(name, tag = 'data-processed') {
  purrr::map_dfr(
    2013:2022,
    \(season_start_year) {
      basename <- sprintf('8-%s-%s', season_start_year, name)
      message(basename)
      read_socceraction_parquet_release(basename, tag = tag)
    }
  )
}

x <- read_socceraction_parquet_releases('x')
y <- read_socceraction_parquet_releases('y')
actions <- read_socceraction_parquet_releases('actions')
games <- read_socceraction_parquet_releases('games') |> 
  dplyr::mutate(
    date = lubridate::date(game_date)
  )

MODEL_COLS <- c('type_pass_a0', 'type_cross_a0', 'type_throw_in_a0', 'type_freekick_crossed_a0', 'type_freekick_short_a0', 'type_corner_crossed_a0', 'type_corner_short_a0', 'type_take_on_a0', 'type_foul_a0', 'type_tackle_a0', 'type_interception_a0', 'type_shot_a0', 'type_shot_penalty_a0', 'type_shot_freekick_a0', 'type_keeper_save_a0', 'type_keeper_claim_a0', 'type_keeper_punch_a0', 'type_keeper_pick_up_a0', 'type_clearance_a0', 'type_bad_touch_a0', 'type_non_action_a0', 'type_dribble_a0', 'type_goalkick_a0', 'bodypart_foot_a0', 'bodypart_head_a0', 'bodypart_other_a0', 'bodypart_head/other_a0', 'result_fail_a0', 'result_success_a0', 'result_offside_a0', 'result_owngoal_a0', 'result_yellow_card_a0', 'result_red_card_a0', 'goalscore_team', 'goalscore_opponent', 'goalscore_diff', 'start_x_a0', 'start_y_a0', 'end_x_a0', 'end_y_a0', 'dx_a0', 'dy_a0', 'movement_a0', 'start_dist_to_goal_a0', 'start_angle_to_goal_a0', 'end_dist_to_goal_a0', 'end_angle_to_goal_a0', 'period_id_a0', 'time_seconds_a0', 'time_seconds_overall_a0')

xy <- dplyr::inner_join(
  y,
  x |> dplyr::select(game_id, action_id, tidyselect::all_of(MODEL_COLS)),
  by = dplyr::join_by(game_id, action_id)
) |> 
  dplyr::inner_join(
    actions |>
      dplyr::select(
        game_id,
        team_id,
        period_id,
        action_id
      ),
    by = dplyr::join_by(game_id, action_id)
  ) |>
  dplyr::inner_join(
    games |> dplyr::select(competition_id, season_id, game_id),
    by = dplyr::join_by(game_id)
  ) |> 
  dplyr::mutate(
    dplyr::across(c(scores, concedes), ~ifelse(.x, 'yes', 'no') |> factor()),
    dplyr::across(tidyselect::where(is.logical), as.integer)
  )
```

```{r}
#| label: data-pull-save
#| include: false
#| eval: false
# library(qs)
qs::qsave(xy, file.path(PROJ_DIR, 'xy.qs'))
```

```{r}
#| label: data-pull-read
#| include: false
#| eval: false
xy <- qs::qread(file.path(PROJ_DIR, 'xy.qs'))
```

```{r}
#| label: model
#| include: false
#| eval: false
df_to_mat <- function(df) {
  model.matrix(
    ~.+0,
    data = model.frame(
      ~.+0,
      df,
      na.action = na.pass
    )
  )
}

select_x <- function(df) {
  df |> 
    dplyr::select(tidyselect::all_of(MODEL_COLS)) |> 
    df_to_mat()
}

fit_model <- function(df, target, trees = 100, max_depth = 3, overwrite = FALSE) {
  path <- file.path(PROJ_DIR, paste0('model_', target, '_', trees, '_', max_depth, '.model'))
  if (file.exists(path) & isFALSE(overwrite)) {
    return(xgboost::xgb.load(path))
  }
  x <- select_x(df)
  y <- as.integer(df[[target]]) - 1L
  fit <- xgboost::xgboost(
    data = x,
    label = y,
    eval_metric = 'logloss',
    nrounds = trees,
    print_every_n = 10,
    max_depth = 3, 
    n_jobs = -3
  )
  xgboost::xgb.save(fit, path)
  fit
}

fit_models <- function(df, ...) {
  list(
    'scores',
    'concedes'
  ) |> 
    rlang::set_names() |> 
    purrr::map(
      function(.x) {
        fit_model(
          df, 
          target = .x,
          ...
        )
      }
    )
}

predict_value <- function(fit, df, ...) {
  x <- select_x(df)
  predict(fit, newdata = x, ...)
}

predict_values <- function(fits, df) {
  pred_scores <- predict_value(
    fit = fits$scores,
    df = df
  )
  
  pred_concedes <- predict_value(
    fit = fits$concedes,
    df = df
  )
  
  tibble::tibble(
    pred_scores = pred_scores,
    pred_concedes = pred_concedes,
    pred = pred_scores - pred_concedes
  )
}

augment <- function(fits, df) {
  preds <- predict_values(fits = fits, df = df)
    
  dplyr::bind_cols(
    df |> 
      dplyr::select(
        competition_id,
        season_id,
        game_id,
        team_id,
        period_id,
        action_id,
        scores,
        concedes
      ),
    preds 
  )
}

fits <- fit_models(xy, trees = 100)
preds <- augment(fits = fits, df = xy)
```

```{r}
#| label: model-save
#| include: false
#| eval: false
qs::qsave(fits, file.path(PROJ_DIR, 'fits.qs'))
qs::qsave(preds, file.path(PROJ_DIR, 'preds.qs'))
```

```{r}
#| label: model-read
#| include: false
#| eval: false
fits <- qs::qread(file.path(PROJ_DIR, 'fits.qs'))
preds <- qs::qread(file.path(PROJ_DIR, 'preds.qs'))
```

```{r}
#| label: pred-prep
#| include: false
#| eval: false
calculate_d <- function(end, start) {
  end - start
}

calculate_dist <- function(dx, dy) {
  sqrt(dx^2 + dy^2)
}

FIELD_DIMENSIONS <- list(
  'width' = 68,
  'length' = 105
)

GOAL_COORDS <- list(
  'x' = FIELD_DIMENSIONS$length,
  'y' = FIELD_DIMENSIONS$width / 2
)

calculate_dist_to_goal <- function(x, y) {
  dx <- abs(GOAL_COORDS$x - x)
  dy <- abs(GOAL_COORDS$y - y)
  calculate_dist(dx, dy)
}

calculate_angle_to_goal <- function(x, y) {
  dx <- abs(GOAL_COORDS$x - x)
  dy <- abs(GOAL_COORDS$y - y)
  atan2(dy, dx)
}

base_non_atomic_features <- tibble::tibble(
  type_pass_a0 = c(1L),
  type_cross_a0 = c(0L),
  type_throw_in_a0 = c(0L),
  type_freekick_crossed_a0 = c(0L),
  type_freekick_short_a0 = c(0L),
  type_corner_crossed_a0 = c(0L),
  type_corner_short_a0 = c(0L),
  type_take_on_a0 = c(0L),
  type_foul_a0 = c(0L),
  type_tackle_a0 = c(0L),
  type_interception_a0 = c(0L),
  type_shot_a0 = c(0L),
  type_shot_penalty_a0 = c(0L),
  type_shot_freekick_a0 = c(0L),
  type_keeper_save_a0 = c(0L),
  type_keeper_claim_a0 = c(0L),
  type_keeper_punch_a0 = c(0L),
  type_keeper_pick_up_a0 = c(0L),
  type_clearance_a0 = c(0L),
  type_bad_touch_a0 = c(0L),
  type_non_action_a0 = c(0L),
  type_dribble_a0 = c(0L),
  type_goalkick_a0 = c(0L),
  bodypart_foot_a0 = c(1L),
  bodypart_head_a0 = c(0L),
  bodypart_other_a0 = c(0L),
  `bodypart_head/other_a0` = c(0L),
  # result_fail_a0 = c(1L),
  # result_success_a0 = c(0L),
  result_offside_a0 = c(0L),
  result_owngoal_a0 = c(0L),
  result_yellow_card_a0 = c(0L),
  result_red_card_a0 = c(0L),
  goalscore_team = c(0L),
  goalscore_opponent = c(0L),
  goalscore_diff = c(0L),
  period_id_a0 = c(1L),
  time_seconds_a0 = c(0),
  time_seconds_overall_a0 = c(0)
)

create_seq <- function(start = 0, end = 100, width = 1) {
  seq(
    width / 2,
    end - width / 2,
    by = width
  )
}

X_DELTA <- 105/16
Y_DELTA <- 68/12
X_SEQ <- create_seq(width = X_DELTA, start = 0, end = 105)
Y_SEQ <- create_seq(width = Y_DELTA, start = 0, end = 68)

grid_non_atomic_features <- base_non_atomic_features |>
  tidyr::crossing(
    start_x_a0 = X_SEQ,
    start_y_a0 = Y_SEQ,
    result_fail_a0 = c(0L, 1L),
    result_success_a0 = c(0L, 1L),
    end_x_a0 = X_SEQ,
    end_y_a0 = Y_SEQ
  ) |> 
  dplyr::filter(
    result_fail_a0 != result_success_a0
  ) |> 
  dplyr::mutate(
    idx1 = sprintf('%02d', dplyr::dense_rank(start_x_a0) - 1L),
    idy2 = sprintf('%02d', dplyr::dense_rank(start_y_a0) - 1L),
    idx2 = sprintf('%02d', dplyr::dense_rank(end_x_a0) - 1L),
    idy1 = sprintf('%02d', dplyr::dense_rank(end_y_a0) - 1L),
    dx_a0 = calculate_d(end_x_a0, start_x_a0),
    dy_a0 = calculate_d(end_y_a0, start_y_a0),
    
    movement_a0 = calculate_dist(dx_a0, dy_a0),
    start_dist_to_goal_a0 = calculate_dist_to_goal(start_x_a0, start_y_a0),
    start_angle_to_goal_a0 = calculate_angle_to_goal(start_x_a0, start_y_a0),
    end_dist_to_goal_a0 = calculate_dist_to_goal(end_x_a0, end_y_a0),
    end_angle_to_goal_a0 = calculate_angle_to_goal(end_x_a0, end_y_a0)
  )

raw_grid_preds_non_atomic <- predict_values(
  fits,
  grid_non_atomic_features
)

mini_preds_and_features <- dplyr::bind_cols(
  grid_non_atomic_features |> 
    dplyr::transmute(
      pass_status = ifelse(result_success_a0 == 1L, 'complete', 'incomplete'),
      idx1,
      idy1,
      idx2,
      idy2
    ),
  raw_grid_preds_non_atomic |> 
    dplyr::select(
      pred_scores,
      pred_concedes,
      pred
    )
)

freq_grid <- tidyr::crossing(
  x = X_SEQ,
  y = Y_SEQ
) |>
  dplyr::arrange(x, y) |>
  dplyr::transmute(idx = dplyr::row_number(), x, y) |>
  dplyr::group_by(y) |> 
  dplyr::mutate(next_x = dplyr::lead(x) |> dplyr::coalesce(x + (x - dplyr::lag(x)))) |>
  dplyr::ungroup() |>
  dplyr::group_by(x) |>
  dplyr::mutate(next_y = dplyr::lead(y) |> dplyr::coalesce(y + (y - dplyr::lag(y)))) |>
  dplyr::ungroup() |> 
  dplyr::mutate(
    i = dplyr::dense_rank(x),
    j = dplyr::dense_rank(y)
  )

start_pass_location_counts <- dplyr::inner_join(
  xy |> 
    dplyr::filter(type_pass_a0 == 1) |> 
    dplyr::filter(
      result_success_a0 == 1L | result_fail_a0 == 1L
    ) |> 
    dplyr::inner_join(
      preds |>
        dplyr::select(
          competition_id,
          season_id,
          game_id,
          period_id,
          team_id,
          action_id,
          pred_scores,
          pred_concedes,
          pred
        ),
      by = dplyr::join_by(
        competition_id,
        season_id,
        game_id,
        period_id,
        team_id,
        action_id
      )
    ),
  freq_grid,
  by = dplyr::join_by(
    start_x_a0 >= x, 
    start_x_a0 < next_x, 
    start_y_a0 >= y,
    start_y_a0 < next_y
  )
) |> 
  dplyr::group_by(idx, result_success_a0, result_fail_a0) |> 
  dplyr::summarize(
    n = dplyr::n(),
    dplyr::across(
      c(
        pred_scores,
        pred_concedes,
        pred
      ),
      list(actual = \(.x) mean(.x, na.rm = TRUE))
    )
  ) |> 
  dplyr::ungroup() |> 
  dplyr::right_join(
    freq_grid,
    by = dplyr::join_by(idx),
    relationship = 'many-to-many'
  ) |> 
  dplyr::mutate(
    idx1 = sprintf('%02d', i - 1L),
    idy1 = sprintf('%02d', j - 1L)
  )

pass_props <- start_pass_location_counts |> 
  dplyr::group_by(
    pass_status = ifelse(result_success_a0 == 1L, 'incomplete', 'complete')
  ) |> 
  dplyr::transmute(
    idx1,
    idy1,
    prop = n / sum(n),
    rank = dplyr::row_number(dplyr::desc(prop)),
    pred_scores_actual,
    pred_concedes_actual,
    pred_actual
  ) |> 
  dplyr::ungroup() |> 
  dplyr::arrange(pass_status, dplyr::desc(prop))

export_df <- mini_preds_and_features |> 
  dplyr::left_join(
    pass_props,
    by = dplyr::join_by(pass_status, idx1, idy1)
  )
```

```{r}
#| label: export_df
#| include: false
#| eval: false
export_df <- mini_preds_and_features |> 
  dplyr::left_join(
    pass_props,
    by = dplyr::join_by(pass_status, idx1, idy1)
  )

export_df %>%
  split(.$pass_status) |> 
  purrr::iwalk(
    \(.x, .y) {
      
      dplyr::transmute(
        .x,
        parent_i = as.integer(idx1),
        parent_j = as.integer(idy1),
        i = as.integer(idx2),
        j = as.integer(idy2),
        x = i * X_DELTA,
        y = j * Y_DELTA,
        width = X_DELTA,
        height = Y_DELTA,
        value = pred,
        rank,
        pred_scores_actual,
        pred_concedes_actual,
        pred_actual
      )  |> 
        dplyr::arrange(j, i) |> 
        tidyr::nest(
          value = -c(parent_i, parent_j)
        ) |> 
        dplyr::transmute(
          i = parent_i,
          j = parent_j,
          x = i * X_DELTA,
          y = j * Y_DELTA,
          width = X_DELTA,
          height = Y_DELTA,
          value
        ) |> 
        dplyr::arrange(j, i)  |> 
        jsonlite::write_json(
          file.path(PROJ_DIR, sprintf('%s_nested_pv_data.json', .y)),
          pretty = TRUE,
          auto_unbox = TRUE
        )
    }
  )

export_df %>%
  split(.$pass_status) |> 
  purrr::iwalk(
    \(.x, .y) {
      
      .x |> 
        dplyr::filter(
          idx1 == '07',
          idy1 == '05'
        ) |> 
        dplyr::transmute(
          i = as.integer(idx2),
          j = as.integer(idy2),
          x = i * X_DELTA,
          y = j * Y_DELTA,
          width = X_DELTA,
          height = Y_DELTA,
          value = pred,
          rank,
          pred_scores,
          pred_concedes,
          pred_scores_actual,
          pred_concedes_actual,
          pred_actual
        )  |> 
        dplyr::arrange(j, i) |> 
        jsonlite::write_json(
          file.path(PROJ_DIR, sprintf('%s_pv_data.json', .y)),
          pretty = TRUE,
          auto_unbox = TRUE
        )
    }
  )
```

```{r}
#| label: plot-debugging
#| include: false
#| eval: false
library(ggplot2)
plot_pass_grid <- function(x, y, pass_status = 'complete', f, ...) {
  export_df |> 
    mutate(
      i = as.integer(idx2),
      j = as.integer(idy2),
      x = i * X_DELTA,
      y = j * Y_DELTA,
      width = X_DELTA,
      height = Y_DELTA,
      pred = f(pred)
    ) |> 
    filter(
      pass_status == .env$pass_status,
      idx1 == sprintf('%02d', .env$x),
      idy1 == sprintf('%02d', .env$y)
    ) |> 
    arrange(desc(pred)) |> 
    ggplot() +
    aes(
      x = as.integer(idx2),
      y = as.integer(idy2)
    ) +
    geom_tile(
      aes(
        fill = pred
      )
    ) +
    geom_tile(
      data = tibble(idx2 = !!x, idy2 = !!y),
      color = 'red',
      fill = 'red'
    ) +
    scale_fill_gradient2(
      ...
    )
}

plot_pass_grid(
  x = 7,
  y = 5,
  pass_status = 'complete',
  # breaks = c(-0.1, 0, 0.1),
  f = \(.x) pmax(pmin(.x, 0.025), -0.025)
)

plot_pass_grid(
  x = 7,
  y = 5,
  pass_status = 'incomplete',
  f = \(.x) pmax(pmin(.x, 0.025), -0.025)
)
```

## Possession Value (PV) for Passes

### Successful Passes

#### From the Center Spot, To Anywhere on the Pitch

In the interactive 12x16 pitch below, the red tile illustrates where a hypothetical pass is made, and the colored tiles illustrate the possession value (PV) associated with a successful pass made to that area. Hovering over the tile shows the PV value above the pitch as well.

```{ojs}
//| include: true
//| code-fold: false
//| fig-cap: A heatmap showing the possession value (PV) of an average successful pass from roughly the center spot (annotated in blue) to all other spots on the pitch.
{
  const chart = d3.create("div")
  const title = chart.append("div").attr("id", "heatmap-title-complete")
  title.append("p").html(`PV: <span id='pv-value-complete'>0</span>`)
  chart.append("div").attr("id", "heatmap-complete")

  const legendSwatchContainer = chart.append("div")
    .attr("id", "heatmap-legend-complete")
    .style("display", "flex")
    .style("flex-direction", "column") // Stack swatches and labels vertically
    .style("align-items", "center") // Center the flex items
    .style("width", "100%"); // Take up the full width to center the content
  
  const legendRange = [
    1.1 * d3.min(colorScaleCompleteRange), 
    1.1 * d3.max(colorScaleCompleteRange)
  ];
  const stepSize = (legendRange[1] - legendRange[0]) / (swatchParams.num - 1);
  const legendSwatches = d3.range(legendRange[0], legendRange[1] + stepSize, stepSize);
  legendSwatches[legendSwatches.length - 1] = legendRange[1];
  
  // Calculate the total width for the legend swatches to be used in setting the width of the container
  const totalLegendWidth = swatchParams.width * swatchParams.num;
  
  // Append the swatches as a row
  const swatchRow = legendSwatchContainer.append("div")
    .style("display", "flex")
    .style("justify-content", "center") // Center the row of swatches
    .style("width", "100%"); // Take up the full width to center the content

  // Append the individual swatches
  swatchRow.selectAll("div")
    .data(legendSwatches)
    .enter()
    .append("div")
    .style("width", `${swatchParams.width}px`)
    .style("height", `${swatchParams.height}px`)
    .style("background-color", d => colorScaleComplete(d));

  // Append the label row
  const labelRow = legendSwatchContainer.append("div")
    .style("display", "flex")
    .style("justify-content", "center") // Center the row of labels
    .style("width", `${totalLegendWidth}px`);

  // Append the individual labels under the swatches
  labelRow.selectAll("span")
    .data(colorScaleCompleteRange)
    .enter()
    .append("span")
    .text(d => {
      if (d === d3.min(colorScaleCompleteRange)) {
        return "<= " + d;
      } else if (d === d3.max(colorScaleCompleteRange)) {
        return ">= " + d;
      }
      return d;
    })
    .style("flex", d => d === 0 ? "1" : null)
    .style("text-align", "center") // Center the text within its flex item

  return chart.node();

}
```

```{ojs}
//| echo: false
//| output: false
//| code-fold: false
{
  const heatmap_complete = d3_soccer.heatmap(pitch)
    .colorScale(colorScaleComplete)
    .enableInteraction(true)
    .onSelect((x,y,v) => {
      const cappedValue = Math.min(Math.max(v, -1), 1);
      d3.select('#pv-value-complete').text(cappedValue.toFixed(3));
    })
    .parent_el('#heatmap-complete')
    .interpolate(false);

  d3.select('#heatmap-complete').html('').datum(complete_pv_data).call(heatmap_complete);

  const svg = d3.select('#heatmap-complete').select('svg');

  svg.append("rect")
    .attr("x", passStartParams.x)
    .attr("y", passStartParams.y)
    .attr("width", tileParams.width)
    .attr("height", tileParams.height)
    .style("stroke", "blue")
    .style("fill", "none")
    .style("stroke-width", "1px");
}
```

FIN

#### From Anywhere on the Pitch, To Anywhere on the Pitch

Now, to give the full picture, the interactive pitch below will dynamically update to show PV values associated with a pass starting from the tile that you hover over.

```{ojs}
//| include: true
//| code-fold: false
//| fig-cap: A heatmap showing the possession value (PV) of an average successful pass from the hover spot to all other spots on the pitch.
{
  const chart = d3.create("div")
  const title = chart.append("div").attr("id", "heatmap-title-complete-nested")
  title.append("p").html(`min PV: <span id='pv-min-complete-nested'>0</span>, max PV: <span id='pv-max-complete-nested'>0</span>`)
  chart.append("div").attr("id", "heatmap-complete-nested")

  const legendSwatchContainer = chart.append("div")
    .attr("id", "heatmap-legend-complete-nested")
    .style("display", "flex")
    .style("flex-direction", "column") // Stack swatches and labels vertically
    .style("align-items", "center") // Center the flex items
    .style("width", "100%"); // Take up the full width to center the content
  
  const legendRange = [
    1.1 * d3.min(colorScaleCompleteRange), 
    1.1 * d3.max(colorScaleCompleteRange)
  ];
  const stepSize = (legendRange[1] - legendRange[0]) / (swatchParams.num - 1);
  const legendSwatches = d3.range(legendRange[0], legendRange[1] + stepSize, stepSize);
  legendSwatches[legendSwatches.length - 1] = legendRange[1];
  
  // Calculate the total width for the legend swatches to be used in setting the width of the container
  const totalLegendWidth = swatchParams.width * swatchParams.num;
  
  // Append the swatches as a row
  const swatchRow = legendSwatchContainer.append("div")
    .style("display", "flex")
    .style("justify-content", "center") // Center the row of swatches
    .style("width", "100%"); // Take up the full width to center the content

  // Append the individual swatches
  swatchRow.selectAll("div")
    .data(legendSwatches)
    .enter()
    .append("div")
    .style("width", `${swatchParams.width}px`)
    .style("height", `${swatchParams.height}px`)
    .style("background-color", d => colorScaleComplete(d));

  // Append the label row
  const labelRow = legendSwatchContainer.append("div")
    .style("display", "flex")
    .style("justify-content", "center") // Center the row of labels
    .style("width", `${totalLegendWidth}px`);

  // Append the individual labels under the swatches
  labelRow.selectAll("span")
    .data(colorScaleCompleteRange)
    .enter()
    .append("span")
    .text(d => {
      if (d === d3.min(colorScaleCompleteRange)) {
        return "<= " + d;
      } else if (d === d3.max(colorScaleCompleteRange)) {
        return ">= " + d;
      }
      return d;
    })
    .style("flex", d => d === 0 ? "1" : null)
    .style("text-align", "center") // Center the text within its flex item

  return chart.node();

}
```

```{ojs}
//| echo: false
//| output: false
//| code-fold: false
{  
    const heatmap_complete_nested = d3_soccer.heatmap(pitch)
      .colorScale(d3.scaleLinear().domain([-1, 1]).range(["white", "white"]))
      .enableInteraction(true)
      .onSelect((x,y,v) => {
        const rawMinValue = d3.min(v, d => d.value);
        const rawMaxValue = d3.max(v, d => d.value);
        const minValue = Math.max(rawMaxValue, -1);
        const maxValue = Math.min(rawMaxValue, 1);
        
        d3.select('#pv-min-complete-nested').text(minValue.toFixed(3));
        d3.select('#pv-max-complete-nested').text(maxValue.toFixed(3));
        const cells = d3
          .select("#heatmap-complete-nested")
          .selectAll("rect.cell")
          .data(v)
  
        cells.enter()
          .merge(cells) // Merge enter and update selections
          .attr("x", d => d.x)
          .attr("y", d => d.y)
          .attr("width", d => d.width)
          .attr("height", d => d.height)
          .style("fill", d => colorScaleComplete(+d.value));
  
        cells.exit().remove()

         d3.select("#heatmap-complete-nested").selectAll("rect.cell").data(complete_nested_pv_data)
      })
      .parent_el("#heatmap-complete-nested")
      .interpolate(false);

    d3.select("#heatmap-complete-nested").html("").datum(complete_nested_pv_data).call(heatmap_complete_nested);
}
```

There are some oddities if you look close enough, but such is the nature of an ML model.

### Unsuccessful Passes

#### From the Center Spot, To Anywhere on the Pitch

Now, the more interesting side of things--how does the PV heatmap look for incomplete passes? Let's start with an example again, looking at PV for unsuccessful passes from the center spot.

```{ojs}
//| include: true
//| code-fold: false
//| fig-cap: A heatmap showing the possession value (PV) of an average unsuccessful pass from roughly the center spot (annotated in blue) to all other spots on the pitch.
{
  const chart = d3.create("div")
  const title = chart.append("div").attr("id", "heatmap-title-incomplete")
  title.append("p").html(`PV: <span id='pv-value-incomplete'>0</span>`)
  chart.append("div").attr("id", "heatmap-incomplete")

  const legendSwatchContainer = chart.append("div")
    .attr("id", "heatmap-legend-incomplete")
    .style("display", "flex")
    .style("flex-direction", "column") // Stack swatches and labels vertically
    .style("align-items", "center") // Center the flex items
    .style("width", "100%"); // Take up the full width to center the content
  
  const legendRange = [
    1.1 * d3.min(colorScaleIncompleteRange), 
    1.1 * d3.max(colorScaleIncompleteRange)
  ];
  const stepSize = (legendRange[1] - legendRange[0]) / (swatchParams.num - 1);
  const legendSwatches = d3.range(legendRange[0], legendRange[1] + stepSize, stepSize);
  legendSwatches[legendSwatches.length - 1] = legendRange[1];
  
  // Calculate the total width for the legend swatches to be used in setting the width of the container
  const totalLegendWidth = swatchParams.width * swatchParams.num;
  
  // Append the swatches as a row
  const swatchRow = legendSwatchContainer.append("div")
    .style("display", "flex")
    .style("justify-content", "center") // Center the row of swatches
    .style("width", "100%"); // Take up the full width to center the content

  // Append the individual swatches
  swatchRow.selectAll("div")
    .data(legendSwatches)
    .enter()
    .append("div")
    .style("width", `${swatchParams.width}px`)
    .style("height", `${swatchParams.height}px`)
    .style("background-color", d => colorScaleIncomplete(d));

  // Append the label row
  const labelRow = legendSwatchContainer.append("div")
    .style("display", "flex")
    .style("justify-content", "center") // Center the row of labels
    .style("width", `${totalLegendWidth}px`);

  // Append the individual labels under the swatches
  labelRow.selectAll("span")
    .data(colorScaleIncompleteRange)
    .enter()
    .append("span")
    .text(d => {
      if (d === d3.min(colorScaleIncompleteRange)) {
        return "<= " + d;
      } else if (d === d3.max(colorScaleIncompleteRange)) {
        return ">= " + d;
      }
      return d;
    })
    .style("flex", d => d === 0 ? "1" : null)
    .style("text-align", "center") // Center the text within its flex item

  return chart.node();

}
```

```{ojs}
//| echo: false
//| output: false
//| code-fold: false
{
  const heatmap_incomplete = d3_soccer.heatmap(pitch)
    .colorScale(colorScaleIncomplete)
    .enableInteraction(true)
    .onSelect((x,y,v) => {
      const cappedValue = Math.min(Math.max(v, -1), 1);
      d3.select('#pv-value-incomplete').text(cappedValue.toFixed(3));
    })
    .parent_el("#heatmap-incomplete")
    .interpolate(false);

  d3.select("#heatmap-incomplete").html("").datum(incomplete_pv_data).call(heatmap_incomplete);

  const svg = d3.select("#heatmap-incomplete").select("svg");

  svg.append("rect")
    .attr("x", passStartParams.x)
    .attr("y", passStartParams.y)
    .attr("width", tileParams.width)
    .attr("height", tileParams.height)
    .style("stroke", "blue")
    .style("fill", "none")
    .style("stroke-width", "1px");
}
```

I think this grid is actually fairly intuitive. Incomplete passes backwards have very negative PVs, as those are leading to turnovers probably setting up the opponent for a good scoring opportunity. Incomplete passes forward mostly have neutral PVs, with some notable spots on the pitch having non-trivially positive PVs.

Some of those exceptions include the top of the 18-yard-box (i.e. ["zone 14"](https://www.youtube.com/watch?v=_EFtACGzD7E)), where a loss of possession can actually be advantageous, as it leaves the opponent likely in a vulnerable position. You could also infer that the "risk" of losing possession to passes to zone 14 is justified from the potential to take a shot. The other observable positive PV end-points for passes taken from the center of the pitch are the goal lines on the ends of the 18-yard box. We could deduce that passes to those areas often lead to cutback passes to the front of the goal, which often lead to high-converting shots. So again, the PV model seems to indicate that the "lost opportunity" of such a (failed) pass seems worth it. on average.

#### From Anywhere on the Pitch, To Anywhere on the Pitch

Now lets scale up our pass PV grid to all incomplete passes. Hovering over a tile will show PV associated with unsuccessful passes from that point on the pitch.

```{ojs}
//| include: true
//| code-fold: false
//| fig-cap: A heatmap showing the possession value (PV) of an average unsuccessful pass from the hover spot to all other spots on the pitch.
{
  const chart = d3.create("div")
  const title = chart.append("div").attr("id", "heatmap-title-incomplete-nested")
  title.append("p").html(`min PV: <span id='pv-min-incomplete-nested'>0</span>, max PV: <span id='pv-max-incomplete-nested'>0</span>`)
  chart.append("div").attr("id", "heatmap-incomplete-nested")

  const legendSwatchContainer = chart.append("div")
    .attr("id", "heatmap-legend-incomplete-nested")
    .style("display", "flex")
    .style("flex-direction", "column") // Stack swatches and labels vertically
    .style("align-items", "center") // Center the flex items
    .style("width", "100%"); // Take up the full width to center the content
  
  const legendRange = [
    1.1 * d3.min(colorScaleIncompleteRange), 
    1.1 * d3.max(colorScaleIncompleteRange)
  ];
  const stepSize = (legendRange[1] - legendRange[0]) / (swatchParams.num - 1);
  const legendSwatches = d3.range(legendRange[0], legendRange[1] + stepSize, stepSize);
  legendSwatches[legendSwatches.length - 1] = legendRange[1];
  
  // Calculate the total width for the legend swatches to be used in setting the width of the container
  const totalLegendWidth = swatchParams.width * swatchParams.num;
  
  // Append the swatches as a row
  const swatchRow = legendSwatchContainer.append("div")
    .style("display", "flex")
    .style("justify-content", "center") // Center the row of swatches
    .style("width", "100%"); // Take up the full width to center the content

  // Append the individual swatches
  swatchRow.selectAll("div")
    .data(legendSwatches)
    .enter()
    .append("div")
    .style("width", `${swatchParams.width}px`)
    .style("height", `${swatchParams.height}px`)
    .style("background-color", d => colorScaleIncomplete(d));

  // Append the label row
  const labelRow = legendSwatchContainer.append("div")
    .style("display", "flex")
    .style("justify-content", "center") // Center the row of labels
    .style("width", `${totalLegendWidth}px`);

  // Append the individual labels under the swatches
  labelRow.selectAll("span")
    .data(colorScaleIncompleteRange)
    .enter()
    .append("span")
    .text(d => {
      if (d === d3.min(colorScaleIncompleteRange)) {
        return "<= " + d;
      } else if (d === d3.max(colorScaleIncompleteRange)) {
        return ">= " + d;
      }
      return d;
    })
    .style("flex", d => d === 0 ? "1" : null)
    .style("text-align", "center") // Center the text within its flex item

  return chart.node();

}
```

```{ojs}
//| echo: false
//| output: false
//| code-fold: false
{  
    const heatmap_incomplete_nested = d3_soccer.heatmap(pitch)
      .colorScale(d3.scaleLinear().domain([-1, 1]).range(["white", "white"]))
      .enableInteraction(true)
      .onSelect((x,y,v) => {
        const rawMinValue = d3.min(v, d => d.value);
        const rawMaxValue = d3.max(v, d => d.value);
        const minValue = Math.max(rawMaxValue, -1);
        const maxValue = Math.min(rawMaxValue, 1);
        
        d3.select('#pv-min-incomplete-nested').text(minValue.toFixed(3));
        d3.select('#pv-max-incomplete-nested').text(maxValue.toFixed(3));
        const cells = d3
          .select("#heatmap-incomplete-nested")
          .selectAll("rect.cell")
          .data(v)
  
        cells.enter()
          .merge(cells) // Merge enter and update selections
          .attr("x", d => d.x)
          .attr("y", d => d.y)
          .attr("width", d => d.width)
          .attr("height", d => d.height)
          .style("fill", d => colorScaleIncomplete(+d.value));
  
        cells.exit().remove()

         d3.select("#heatmap-incomplete-nested").selectAll("rect.cell").data(incomplete_nested_pv_data)
      })
      .parent_el("#heatmap-incomplete-nested")
      .interpolate(false);

    d3.select("#heatmap-incomplete-nested").html("").datum(incomplete_nested_pv_data).call(heatmap_incomplete_nested);
}
```

## Conclusion

I'll note that the choice of model surely plays a role in the inference we'll make. Even atomic VAEP, which splits passes into two actions--the pass itself and the reception (or lack of)--may yield different answers.

```{ojs}
//| include: false
pitch = d3_soccer.pitch()
  .height(300)
  .rotate(false)
  .showDirOfPlay(true)
  .shadeMiddleThird(false)
  .pitchStrokeWidth(0.5)
  .clip([[0, 0], [105, 68]]);
```

```{ojs}
//| include: false
d3 = require("d3@v5")
```

```{ojs}
//| include: false
d3_soccer = require("d3-soccer@0.1.0")
```

```{ojs}
//| label: complete_pv_data
//| include: false
complete_pv_data  = FileAttachment("complete_pv_data.json").json()
```

```{ojs}
//| label: incomplete_pv_data
//| include: false
incomplete_pv_data = FileAttachment("incomplete_pv_data.json").json()
```

```{ojs}
//| label: complete_nested_pv_data
//| include: false
complete_nested_pv_data  = FileAttachment("complete_nested_pv_data.json").json()
```

```{ojs}
//| label: incomplete_nested_pv_data
//| include: false
incomplete_nested_pv_data = FileAttachment("incomplete_nested_pv_data.json").json()
```

```{ojs}
//| label: colorScaleCompleteRange
//| include: false
colorScaleCompleteRange = [-0.025, 0, 0.025]
```

```{ojs}
//| label: colorScaleIncompleteRange
//| include: false
colorScaleIncompleteRange = [-0.025, 0, 0.025]
```

```{ojs}
//| label: colorScaleComplete
//| include: false
colorScaleComplete = d3.scaleLinear()
  .domain(colorScaleCompleteRange)
  .range(["#a6611a", "white", "#018571"]).clamp(true)
```

```{ojs}
//| label: colorScaleIncomplete
//| include: false
colorScaleIncomplete = d3.scaleLinear()
  .domain(colorScaleIncompleteRange)
  .range(["#d01c8b", "white", "#4dac26"]).clamp(true)
```

```{ojs}
//| label: swatchParams
//| include: false
swatchParams = {
  return {
    width: 40,
    height: 20,
    num: 7
  }
}
```

```{ojs}
//| label: passStartParams
//| include: false
passStartParams = {
  return {
    x: 45.9375,
    y: 28.33333
  }
}
```

```{ojs}
//| label: tileParams
//| include: false
tileParams = {
  return {
    width: 6.5625,
    height: 5.666667
  }
}
```
