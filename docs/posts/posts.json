[
  {
    "path": "posts/2021-01-11-fantasy-football-schedule-problem/",
    "title": "Fantasy Football and the Classical Scheduling Problem",
    "description": "Fantasy Football and the Classical Scheduling Problem",
    "author": [
      {
        "name": "Tony ElHabr",
        "url": "https://twitter.com/TonyElHabr"
      }
    ],
    "date": "2021-01-11",
    "categories": [
      "r",
      "python",
      "optimization",
      "reticulate"
    ],
    "contents": "\r\n\r\nContents\r\nIntroduction\r\nProblem\r\nConstraint Programming\r\nAlternative: Exhaustive Search\r\nApplication\r\nTake-away\r\n\r\nIntroduction\r\nEvery year I play in several fantasy football (American) leagues. For those who are unaware, it’s a game that occurs every year in sync with the National Football League (NFL) where participants play in weekly head-to-head games as general managers of virtual football teams. (Yes, it’s very silly.) The winner at the end of the season is often not the player with the team that scores the most points; often a fortunate sequence of matchups dictates who comes out on top.\r\nI didn’t fare so well this year in one of my leagues, but my disappointing placement was not due to my team struggling to score points; rather, I was extremely unlucky. I finished the season in 7th place despite scoring the most points!\r\nThis inspired me to quantify just how unlikely I was. The most common way to calculate the likelihood of a given team’s ranking in a league with is with a Monte Carlo simulation based on some parameterized model of scoring to generate probabilities for the final standings. FiveThirtyEight uses such a model for their soccer models, for example. For a setting in which team scores are independent of one another, such as fantasy football, another approach is to simply calculate what each team’s record would be if they had played every other team each week. (So, if your league has 10 teams and each plays each other once, each team would have a hypothetical count of 90 games played.) However, I was particularly interested in answering the question: “In how many different schedules would I have finished where I did?”\r\nProblem\r\nFiguring out how unlucky I was to finish 7th requires me to first figure out how many possible schedules there are. Formally, the problem can be put as follows1:\r\n\r\nLet \\(T={t_1, ., t_n}\\) be a set of an even \\(n\\) teams. Let \\(R\\) denote a round consisting of a set of pairs \\((t_i, t_j)\\) (denoting a match), such that \\(0 < i <j ??? n\\), and such that each team in \\(T\\) is participates exactly once in \\(R\\). Let \\(S\\) be a schedule consisting of a tuple of \\(n???1\\) valid rounds \\((R_1, ., R_{n???1})\\), such that all rounds in \\(S\\) are pair-wise disjoint (no round shares a match). How many valid constructions of \\(S\\) are there for \\(n\\) input teams?\r\n\r\nFor a small number of teams, it’s fairly simple to write out all possible combinations of matchups. For example, for a two-team league (where each team plays each other once), there is only one possible schedule (solution)—Team 1 vs. Team 2. For a four-team league, there are six possible schedules. Two are shown below.\r\n\r\nsolution\r\nround\r\nteam1\r\nteam2\r\n1\r\n1\r\n1\r\n2\r\n\r\n\r\n3\r\n4\r\n\r\n2\r\n1\r\n3\r\n\r\n\r\n2\r\n4\r\n\r\n3\r\n1\r\n4\r\n\r\n\r\n2\r\n3\r\n2\r\n1\r\n1\r\n3\r\n\r\n\r\n2\r\n4\r\n\r\n2\r\n1\r\n2\r\n\r\n\r\n3\r\n4\r\n\r\n3\r\n1\r\n4\r\n\r\n\r\n2\r\n3\r\n\r\nNote that there is no concept of “home advantage” in fantasy football, so the order of teams in a given matchup does not matter. Also, note that if our restriction (“constraint”) that each team must play each other once and only once, implies that the number of teams has to be an even number.\r\nConstraint Programming\r\nTo truly answer this question, we can turn to constraint programming. If you’re familiar with constraint programming, then you’ll notice that this set-up is similar to the canonical nurse scheduling problem and is a specific form of the tournament problem.\r\nBelow is some python code that is able to identify the number feasible solutions for four teams. I print out the first solution for illustrative purposes.\r\n\r\nfrom ortools.sat.python import cp_model\r\n\r\nclass SolutionPrinter(cp_model.CpSolverSolutionCallback):\r\n    def __init__(self, games, n_team, n_show=None):\r\n        cp_model.CpSolverSolutionCallback.__init__(self)\r\n        self._games = games\r\n        self._n_show = n_show\r\n        self._n_team = n_team\r\n        self._n_sol = 0\r\n\r\n    def on_solution_callback(self):\r\n        self._n_sol += 1\r\n        print()\r\n        if self._n_show is None or self._n_sol <= self._n_show:\r\n            print(f'Solution {self._n_sol}.')\r\n            for team1 in range(self._n_team):\r\n                for team2 in range(self._n_team):\r\n                    if team1 != team2:\r\n                        print(\r\n                            f'Team {team1 + 1} vs. Team {team2 + 1} in Round {self.Value(self._games[(team1, team2)])}'\r\n                        )\r\n        else:\r\n            print(f'Found solution {self._n_sol}.')\r\n\r\n    def get_n_sol(self):\r\n        return self._n_sol\r\n\r\nn_team = 4\r\nn_w = n_team - 1\r\nmodel = cp_model.CpModel()\r\ngames = {}\r\nfor team1 in range(n_team):\r\n    for team2 in range(n_team):\r\n        if team1 != team2:\r\n            games[(team1, team2)] = model.NewIntVar(1, n_w, f'{team1:02}_{team2:02}')\r\n\r\nfor team1 in range(n_team):\r\n    for team2 in range(n_team):\r\n        if team1 != team2:\r\n            model.Add(games[(team1, team2)] == games[(team2, team1)])\r\n\r\n\r\n# Each team can only play in 1 game each week\r\nfor t in range(n_team):\r\n    model.AddAllDifferent(\r\n        [games[(t, team2)] for team2 in range(n_team) if t != team2]\r\n    )\r\n\r\nsolver = cp_model.CpSolver()\r\nsolution_printer = SolutionPrinter(games, n_team=n_team, n_show=2)\r\nstatus = solver.SearchForAllSolutions(model, solution_printer)\r\n\r\nprint()\r\nprint(f'Solve status: {solver.StatusName(status)}')\r\nprint(f'Solutions found: {solution_printer.get_n_sol()}')\r\n\r\n\r\n# Solution 1.\r\n# Team 1 vs. Team 2 in Round 3\r\n# Team 1 vs. Team 3 in Round 2\r\n# Team 1 vs. Team 4 in Round 1\r\n# Team 2 vs. Team 1 in Round 3\r\n# Team 2 vs. Team 3 in Round 1\r\n# Team 2 vs. Team 4 in Round 2\r\n# Team 3 vs. Team 1 in Round 2\r\n# Team 3 vs. Team 2 in Round 1\r\n# Team 3 vs. Team 4 in Round 3\r\n# Team 4 vs. Team 1 in Round 1\r\n# Team 4 vs. Team 2 in Round 2\r\n# Team 4 vs. Team 3 in Round 3\r\n# \r\n# Found solution 2.\r\n# \r\n# Found solution 3.\r\n# \r\n# Found solution 4.\r\n# \r\n# Found solution 5.\r\n# \r\n# Found solution 6.\r\n# \r\n# Solve status: OPTIMAL\r\n# Solutions found: 6\r\n\r\nEasy enough to run for 10 teams and get an answer, right? WRONG. Turns out this the number of feasible solutions (schedules) starts to blow up really quickly. In fact, I believe the number of solutions for this particular problem is only known up to 14 teams. (I’ve intentionally left the numbers un-rounded to emphasize just how much the number of solutions increases as a function of the number of teams.)\r\n\r\nn\r\nsolutions\r\n2\r\n1\r\n4\r\n6\r\n6\r\n720\r\n8\r\n31,449,600\r\n10\r\n444,733,651,353,600\r\n12\r\n10,070,314,878,246,925,803,220,024\r\n14\r\n614,972,203,951,464,579,840,082,248,206,026,604,282\r\n\r\nUnless you happen to be an expert in graph theory and combinatorics, you probably wouldn’t be able to figure this out by hand; for us non-experts out there, we can refer to a known sequence of 1-factorizations of a complete graph \\(K_{2n}\\) and use our brain to figure out permutations in a given round. (Don’t worry if that makes no sense.)\r\nWhy do I bring this up? Well, I realized that generating all possible schedules for a 10-team league (such as my aforementioned league) is just not reasonable for anyone without a supercomputer and a lot of time. I enhanced the above python code a bit and tried it out for a 10-team league and was only able to generate a couple of million solutions after 3 hours.\r\nAlternative: Exhaustive Search\r\nThe failure to generate all solutions made me reconsider things a bit. If I can’t reasonably “have it all”, I should simplify things a bit. By “simplify”, I mean perform an “exhaustive” (or \"brute-force) search that stops after a specified number of solutions. And, by re-writing things in R, I can eliminate dependencies on Google’s ortools package and python. (Both are great, but, nonetheless, they are potential obstacles for R users.)\r\nWriting a script to perform an exhaustive search is not so easy itself, and, in this case, requires a completely different approach to the problem. My steps are as follows:\r\nSet up an \\(n\\) x \\(n-1\\) matrix, where the \\(n\\) rows designate teams and the \\(n-1\\) columns designate rounds.\r\n\r\n\r\nleague_size = 4\r\nrounds <- league_size - 1\r\nmat <- matrix(nrow = league_size, ncol = rounds)\r\nmat\r\n\r\n\r\n\r\n\r\n\r\n#      [,1] [,2] [,3]\r\n# [1,]   NA   NA   NA\r\n# [2,]   NA   NA   NA\r\n# [3,]   NA   NA   NA\r\n# [4,]   NA   NA   NA\r\n\r\n\r\n\r\nRandomly select the opponent of team 1 in round 1.\r\n\r\n\r\nteam_i <- 1\r\nround_i <- 1\r\nretry_i <- 1\r\nidx_team <- 1:league_size\r\nset.seed(1)\r\n\r\nteam_1_round_1 <- sample(2:league_size, 1, replace = FALSE)\r\nmat[team_i, round_i] <- team_1_round_1\r\nmat\r\n\r\n\r\n\r\n\r\n\r\n#      [,1] [,2] [,3]\r\n# [1,]    2   NA   NA\r\n# [2,]   NA   NA   NA\r\n# [3,]   NA   NA   NA\r\n# [4,]   NA   NA   NA\r\n\r\n\r\n\r\nFind a unique set of opponents for teams 2 through \\(n\\) to fill the rest of the cells in column 1.\r\n\r\n\r\nwhile(team_i <= league_size) {\r\n  if(team_i %in% teams_already_matched) {\r\n    team_i_round_i <- which(team_i == teams_already_matched)\r\n    mat[team_i, round_i] <- team_i_round_i\r\n    team_i <- team_i + 1\r\n  } else {\r\n    teams_cant_match <- unique(c(teams_already_indexed, teams_already_matched))\r\n    teams_unmatched <- setdiff(teams_possible, teams_cant_match)\r\n    n_matched <- length(teams_unmatched)\r\n    if(n_matched == 0) {\r\n      mat[2:league_size, round_i] <- NA\r\n      team_i <- 2\r\n    } else {\r\n      team_i_round_i <- if(n_matched == 1) {\r\n        teams_unmatched\r\n      } else {\r\n        sample(teams_unmatched, 1)\r\n      }\r\n\r\n      mat[team_i, round_i] <- team_i_round_i\r\n      team_i <- team_i + 1\r\n    }\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n#      [,1] [,2] [,3]\r\n# [1,]    2   NA   NA\r\n# [2,]    1   NA   NA\r\n# [3,]    4   NA   NA\r\n# [4,]    3   NA   NA\r\n\r\n\r\n\r\nIdentify a unique set of opponents for team 1 for all other rounds (rounds 2 through \\(n-1\\)).\r\n\r\n\r\nteams_possible <- setdiff(idx_team, c(1, team_1_round_1))\r\nteam1_all_rounds <- sample(teams_possible, size = length(teams_possible))\r\nmat[1, 2:rounds] <- team1_all_rounds\r\nmat\r\n\r\n\r\n\r\n\r\n\r\n#      [,1] [,2] [,3]\r\n# [1,]    2    3    4\r\n# [2,]    1   NA   NA\r\n# [3,]    4   NA   NA\r\n# [4,]    3   NA   NA\r\n\r\n\r\n\r\nRepeat step 3 for rounds 2 through \\(n-2\\) (penultimate round).\r\n\r\n\r\nwhile(round_i < rounds) {\r\n  team_i <- 2\r\n  while(team_i <= league_size) {\r\n    teams_possible <- setdiff(idx_team, team_i)\r\n    teams_already_indexed <- 1:(team_i - 1)\r\n    teams_already_matched <- mat[teams_already_indexed, round_i]\r\n    teams_already_played <- mat[team_i, 1:(round_i - 1)]\r\n    reset <- FALSE\r\n    if(team_i %in% teams_already_matched) {\r\n      team_i_round_i <- which(team_i == teams_already_matched)\r\n      if(any(team_i_round_i == teams_already_played)) {\r\n        reset <- TRUE\r\n      }\r\n    } else {\r\n      teams_cant_match <-\r\n        unique(c(teams_already_indexed, teams_already_matched, teams_already_played))\r\n      teams_unmatched <- setdiff(teams_possible, teams_cant_match)\r\n      n_matched <- length(teams_unmatched)\r\n      if (n_matched == 0) {\r\n        reset <- TRUE\r\n      } else {\r\n        team_i_round_i <- if(n_matched == 1) {\r\n          teams_unmatched\r\n        } else {\r\n          sample(teams_unmatched, 1)\r\n        }\r\n      }\r\n    }\r\n    \r\n    if(reset) {\r\n      mat[2:league_size, round_i] <- NA\r\n      team_i <- 2\r\n      retry_i <- retry_i + 1\r\n    } else {\r\n      mat[team_i, round_i] <- team_i_round_i\r\n      team_i <- team_i + 1\r\n    }\r\n  }\r\n  round_i <- round_i + 1\r\n}\r\nmat\r\n\r\n\r\n\r\n\r\n\r\n#      [,1] [,2] [,3]\r\n# [1,]    2    3    4\r\n# [2,]    1    4   NA\r\n# [3,]    4    1   NA\r\n# [4,]    3    2   NA\r\n\r\n\r\n\r\nIdentify the only valid set of matchups for the last round \\(n-1\\).\r\n\r\n\r\nidx_not1 <- 2:league_size\r\ntotal <- Reduce(sum, idx_team) - idx_not1\r\nrs <- rowSums(mat[idx_not1, 1:(rounds - 1)])\r\nteams_last <- total - rs\r\nmat[idx_not1, rounds] <- teams_last\r\nmat\r\n\r\n\r\n\r\n\r\n\r\n#      [,1] [,2] [,3]\r\n# [1,]    2    3    4\r\n# [2,]    1    4    3\r\n# [3,]    4    1    2\r\n# [4,]    3    2    1\r\n\r\n\r\n\r\nThat is the core of the solution. The rest of the work2 involves repeating the steps for however many times you want, always checking for duplicates of previous solutions, i.e. sampling without replacement. (Or, if you don’t care about schedules being unique, i.e. sampling with replacement, it’s even easier.)\r\nApplication\r\nSince generating unique schedules is something I’d like to be able to do every year for my fantasy football leagues, I wrote a package for it, called {ffsched}. The package includes functionality to retrieve your league’s fantasy scores from ESPN, which you can combine with the simulated schedules to generate a plot such as the following.\r\n\r\nIt’s immediately evident how un-lucky I (“Tony El Tigre”) was. In the 100,000 simulations, I never finished below 7th, and I only finished 7th 1.1% of the time!\r\nIn the previous year I scored the most points and finished first. “The Juggernaut” got the short end of the stick in 2019, finishing 7th. He only finished 7th or lower in 6.6% of schedules.\r\n\r\nTake-away\r\nAn exhaustive search as a work-around for true constraint programming isn’t always elegant and can be difficult to implement, but if you’re motivated enough to do it—as I was to prove my extreme lack of fortune—it can generate what you need to make a compelling point. My use case (for generating unique fantasy generating football schedules) is inconsequential, but such techniques are often immensely important in real world contexts.\r\n\r\nThis is almost directly taken from https://math.stackexchange.com/questions/284416/how-many-possible-arrangements-for-a-round-robin-tournament.↩︎\r\nIn fantasy football, teams often play each other more than once in a year (depending on your league size), so I’ve somewhat simplified the problem for the purpose of this post. More work could be done to figure out the number of possibilities when more than one game has to be scheduled for each pair of teams.↩︎\r\n",
    "preview": "posts/2021-01-11-fantasy-football-schedule-problem/viz_standings_tile_2020.png",
    "last_modified": "2021-01-11T11:13:54-06:00",
    "input_file": {},
    "preview_width": 3600,
    "preview_height": 2400
  },
  {
    "path": "posts/2020-10-14-decomposition-smoothing-soccer/",
    "title": "Decomposition and Smoothing with data.table, reticulate, and spatstat",
    "description": "Decomposition and Smoothing with data.table, reticulate, and spatstat",
    "author": [
      {
        "name": "Tony ElHabr",
        "url": "https://twitter.com/TonyElHabr"
      }
    ],
    "date": "2020-10-14",
    "categories": [
      "r",
      "soccer",
      "reticulate",
      "data.table",
      "spatstat",
      "tidyverse"
    ],
    "contents": "\r\n\r\nContents\r\nData\r\nNon-Equi Joining with {data.table}\r\nNon-Negative Matrix Factorization (NNMF) with {reticulate} and sklearn\r\nGaussian Smoothing with {spatstat}\r\nConclusion\r\n\r\nWhile reading up on modern soccer analytics (I’ve had an itch for soccer and tracking data recently, I stumbled upon an excellent set of tutorials written by Devin Pleuler. In particular, his notebook on non-negative matrix factorization (NNMF) caught my eye. I hadn’t really heard of the concept before, but it turned out to be much less daunting once I realized that it is just another type of matrix decomposition. Singular value decomposition (SVD), which I’m much more familiar with, belongs to the same family of calculations (although NNMF and SVD are quite different). In an effort to really gain a better understanding of NNMF, I set out to emulate his notebook.\r\nIn the process of converting his python code to R, I encountered three challenges with resolutions worth documenting.\r\nBefore the NNMF calculation, I needed to perform non-equi join with a fairly size-able data set. Unfortunately, {dplyr}1 does not have built-in support for such a join. I tossed aside any kind of personal implicit bias against {data.table}—which is certainly the go-to option in the R ecosystem for non-equi joins—and used it for this process.\r\nFor the NNMF calculation, the only R implementation (that I could find) comes with the {NMF} package2, which requires the installation of the Bioconductor-exclusive {BiocManager} package. I’m relatively unfamiliar with Bioconductor, so this was not very appealing (although I did end up downloading {NMF} and trying it out). Instead, I ended up using {reticulate} to call the skearn.decomposition.NMF() function directly (as is done in the python code). This is a perfect example of using {reticulate} for a non-trivial reason (i.e. for an algorithm).\r\nAfter the NNMF computation, I needed to perform 2-D Gaussian smoothing, which is helpful for making the output of the NNMF output more interpretable. The {spatstat} package had just the function for the job (spatstat::blur()), and it all it took for me was to write some a tidy wrapper function to integrate it nicely into my workflow.\r\nI’ve always considered myself a “whatever gets the job done” kind of person, not insistent on ignoring solutions that use “base” R, {data.table}, python, etc. Nonetheless, replicating Devin’s notebook really underscored the importance of being comfortable outside of a {tidyverse}-centric workflow.\r\nAnyways, this post outlines the code and my thought process in porting Devin’s code to R. I’ll skip some of the details, emphasizing the things that are most interesting.\r\nData\r\nWe’ll be working with the open-sourced StatsBomb data for the 2018 Men’s World Cup, which I’ve called events below. 3\r\nThis is a relatively large data set with lots of columns (and rows). However, we only need three columns for what we’re going to do: (1) a unique identifier for each player, player_id, along with their (2) x and (3) y coordinates.\r\n\r\n\r\nlibrary(tidyverse)\r\n\r\n\r\n\r\nA quick summary of the data shows that there are 603 unique players, and that the x and y coordinates range from 1 to 120 (yards) and 1 to 80 respectively.\r\n\r\n\r\nevents %>% \r\n  summarize(\r\n    n = n(),\r\n    n_player = n_distinct(player_id),\r\n    across(c(x, y), list(min = min, max = max, mean = mean))\r\n  )\r\n\r\n\r\n\r\nNon-Equi Joining with {data.table}\r\nOur first challenge is to convert the following chunk of python.\r\n\r\nimport numpy as np\r\n\r\nx_scale, y_scale = 30, 20\r\n\r\nx_bins = np.linspace(0, 120, x_scale)\r\ny_bins = np.linspace(0, 80, y_scale)\r\n\r\nplayers = {}\r\n\r\nfor e in events:\r\n    if 'player' in e.keys():\r\n        player_id = e['player']['id']\r\n        if player_id not in players.keys():\r\n            players[player_id] = np.zeros((x_scale, y_scale))\r\n        try:\r\n            x_bin = int(np.digitize(e['location'][0], x_bins[1:], right=True))\r\n            y_bin = int(np.digitize(e['location'][1], y_bins[1:], right=True))\r\n            players[player_id][x_bin][y_bin] += 1\r\n        except:\r\n            pass\r\n\r\nThis code creates a nested dict, where the keys are player id’s and the values are 20x30 matrices. Each element in the matrix is an integer that represents the count of times that the player was recorded being at a certain position on the pitch. (These counts range from 0 to 94 for this data set.)\r\nSome technical details:\r\nThe python events is actually a pretty heavily nested list4, hence the non-rectangular operations such as e['player']['id'].\r\nObservations with missing coordinates are ignored with the try-except block.\r\nx and y values (elements of the 'location' sub-list) are mapped to “bins” using numpy’s digitize() function, which is analogous to base::cut().\r\nHow can we do this same data manipulation in an idiomatic R fashion? We could certainly create a named list element and use base::cut() to closely match the python approach. However, I prefer to stick with data frames and SQL-ish operations since I think these are much more “natural” for R users.5\r\nSo, going forward with data frames and joins, it’s quickly apparent that we’ll have to do some non-equi joining. {fuzzyjoin} and {sqldf} offer functionality for such an approach, but {data.table} is really the best option. The only minor inconvenience here is that we have to explicitly coerce our events data frame to a data.table.\r\nWe’ll also need a helper, grid-like data frame to assist with the binning. The 600-row grid_xy_yards data frame (30 x bins * 20 y bins) below is essentially a tidy definition of the cells of the grid upon which we are binning the events data. (One can use whatever flavor of crossing(), expand.grid(), seq(), etc. that you prefer to create a data frame like this.)\r\nVisually, this grid looks like this.\r\n\r\nAnd if you prefer numbers instead of a chart, see the first 10 rows below.\r\n\r\n\r\ngrid_xy_yards\r\n\r\n\r\n\r\nTwo things to note about this supplementary data frame:\r\nCells aren’t evenly spaced integers, i.e. x cells are defined at 0, 4.138, 8.276, …, 80 instead of something like 0, 4, 8, …, 80, and y cells are defined at 0, 4.211, 8.421, …, 120 instead of something like 0, 4, 8, …, 120). That’s simply due to using 30 and 20 instead of 31 and 21 to split up the x and y ranges respectively. I point this out because this SQL-ish approach would have been much easier if these numbers were just integers! We could have done an inner join on an integer grid instead of non-equi-joining upon a grid of floating point numbers. Unfortunately, joining on floating point numbers as keys leads to inconsistent results, simply due to the nature of floating points.6\r\nThe index idx is important! This will come back into play when we do the NNMF procedure, at which point we’ll “flatten” out our x-y pairs into a 1-d format.\r\nOk, on to the actual data joining.\r\n\r\n\r\nevents_dt <- events %>% drop_na() %>% data.table::as.data.table()\r\ngrid_xy_yards_dt <- grid_xy_yards %>% data.table::as.data.table()\r\n\r\n# We don't even have to load `{data.table}` for this to work!\r\nevents_binned <-\r\n  events_dt[grid_xy_yards_dt, on=.(x > x, x <= next_x, y >= y, y < next_y)] %>% \r\n  as_tibble() %>% \r\n  select(player_id, idx, x, y)\r\nevents_binned\r\n\r\n\r\n\r\nIn retrospect, this join was pretty straightforward!\r\nThe rest of the code below is just doing the actual tallying.\r\nFirst, we make an intermediate data set grid_players, which is the Cartesian product of all possible cells in the grid and all players in events.\r\nSecond, we “add back” missing cells to events_binned using the intermediate data set grid_players.\r\nIn the end, we end up with a players data frame with 603 player_ids * 30 x bins * 20 y bins = 361,800 rows.\r\n\r\n\r\n# This `dummy` column approach is an easy way to do a Cartesian join when the two data frames don't share any column names.\r\ngrid_players <-\r\n  grid_xy_yards %>% \r\n  mutate(dummy = 0L) %>% \r\n  # Cartesian join of all possible cells in the grid and all players in `events`.\r\n  full_join(\r\n    events %>% \r\n      drop_na() %>% \r\n      distinct(player_id) %>% \r\n      mutate(dummy = 0L),\r\n    by = 'dummy'\r\n  )\r\n\r\nplayers <-\r\n  events_binned %>% \r\n  group_by(player_id, x, y, idx) %>% \r\n  summarize(n = n()) %>% \r\n  ungroup() %>% \r\n  # Rejoin back on the grid to 'add back' cells with empty counts (i.e. `n = 0`).\r\n  full_join(grid_players, by = c('player_id', 'x', 'y', 'idx')) %>% \r\n  select(-dummy, -next_x, -next_y) %>% \r\n  replace_na(list(n = 0L)) %>% \r\n  arrange(player_id, x, y)\r\nplayers\r\n\r\n\r\n\r\nTo make this a little bit more tangible, let’s plot Messi’s heatmap. (Is this really a blog post about soccer if it doesn’t mention Messi 😆?)\r\n\r\nNon-Negative Matrix Factorization (NNMF) with {reticulate} and sklearn\r\nNext up is the actual NNMF calculation. I don’t care if you’re the biggest R stan in the world—you have to admit that the python code to perform the NNMF is quite simple and (dare I say) elegant. The comps=30 here means\r\n\r\nfrom sklearn.decomposition import NMF\r\n\r\n# Flatten individual player matrices into shape=(600,) which is the product of the original shape components (30 by 20)\r\nunraveled = [np.matrix.flatten(v) for k, v in players.items()]\r\ncomps = 30\r\nmodel = NMF(n_components=comps, init='random', random_state=0)\r\nW = model.fit_transform(unraveled)\r\n\r\nMy understanding is that comps=30 is telling the algorithm to reduce our original data (with 603 players) to a lower dimensional space with 30 player “archetypes” that best represent the commonalities among the 603 players.7 Per Devin, the choice of 30 here is somewhat arbitrary. In practice, one might perform some cross validation to identify what number minimizes some loss function, but that’s beyond the scope of what we’re doing here.\r\nAfter re-formatting our players data into a wide format—equivalent to the numpy.matrix.flatten() call in the python code—we could use the {NMF} package for an R replication.\r\n\r\n\r\n# Convert from tidy format to wide format (603 rows x 600 columns)\r\nplayers_mat <-\r\n  players %>% \r\n  drop_na() %>% \r\n  select(player_id, idx, n) %>% \r\n  pivot_wider(names_from = idx, values_from = n) %>% \r\n  select(-player_id) %>% \r\n  as.matrix()\r\n\r\ncomps <- 30L\r\nW <- NMF::nmf(NMF::rmatrix(players_mat), rank = comps, seed = 0, method = 'Frobenius')\r\n\r\n\r\n\r\nHowever, I found that the results weren’t all that comparable to the python results. (Perhaps I needed to define the arguments in a different manner.) So why not use {reticulate} and call the sklearn.decomposition.NMF() function to make sure that we exactly emulate the python decomposition?\r\n\r\n\r\nsklearn <- reticulate::import('sklearn')\r\n# Won't work if `n_components` aren't explicitly defined as integers!\r\nmodel <- sklearn$decomposition$NMF(n_components = comps, init = 'random', random_state = 0L)\r\nW <- model$fit_transform(players_mat)\r\n\r\n\r\n\r\nThe result includes 30 20x30 matrices—one 30x20 x-y matrix for each of the 30 components (comps). We have some wrangling left to do to gain anything meaningful from this NNMF procedure, but we have something to work with!\r\nGaussian Smoothing with {spatstat}\r\nThe last thing to do is to post-process the NNMF results and, of course, make pretty plots. The python plotting is pretty standard matplotlib, with the exception of the Gaussian smoothing performed on each component’s matrix model.component_ in the loop to make sub-plots.\r\n\r\nfrom scipy.ndimage import gaussian_filter\r\n\r\nfor i in range(9):\r\n    # ... Excerpted\r\n    z = np.rot90(gaussian_filter(model.components_[i].reshape(x_scale, y_scale), sigma=1.5), 1)\r\n    # ... Excerpted\r\n\r\nThe first 9 smoothed component matrices come out looking like this. 8\r\n\r\nThere’s a couple of steps involved to do the same thing in R.\r\nFirst, we’ll convert the components matrices to a tidy format, decomp_tidy\r\nSecond, we’ll join our tidied components matrices with our tidy grid of cells, grid_xy_yards, and convert our x and y bins to integers in preparation of the matrix operation performed in the subsequent step.\r\nLastly, we’ll perform the Gaussian smoothing on nested data frames with a custom function, smoothen_dimension, that wraps spatstat::blur(). This function also maps idx back to field positions (in meters instead of yards) using the supplementary grid_xy_rev_m9 data frame (which is a lot like grid_xy_yards)\r\n\r\n\r\n## 1\r\ndecomp_tidy <-\r\n  model$components_ %>% \r\n  as_tibble() %>% \r\n  # \"Un-tidy\" tibble with 30 rows (one for each dimension) and 600 columns (one for every `idx`)\r\n  mutate(dimension = row_number()) %>% \r\n  # Convert to a tidy tibble with dimensions * x * y rows (30 * 30 * 20 = 18,000)\r\n  pivot_longer(-dimension, names_to = 'idx', values_to = 'value') %>% \r\n  # The columns from the matrix are named `V1`, `V2`, ... `V600` by default, so convert them to an integer that can be joined on.\r\n  mutate(across(idx, ~str_remove(.x, '^V') %>% as.integer()))\r\n\r\n## 2\r\ndecomp <-\r\n  decomp_tidy %>% \r\n  # Join on our grid of x-y pairs.\r\n  inner_join(\r\n    # Using `dense_rank` because we need indexes here (i.e. 1, 2, ..., 30 instead of 0, 4.1, 8.2, ..., 120 for `x`).\r\n    grid_xy_yards %>% \r\n      select(idx, x, y) %>% \r\n      mutate(across(c(x, y), dense_rank))\r\n  )\r\n\r\n## 3\r\nsmoothen_component <- function(.data, ...) {\r\n  mat <-\r\n    .data %>% \r\n    select(x, y, value) %>% \r\n    pivot_wider(names_from = x, values_from = value) %>% \r\n    select(-y) %>% \r\n    as.matrix()\r\n  \r\n  mat_smoothed <-\r\n    mat %>% \r\n    spatstat::as.im() %>% \r\n    # Pass `sigma` in here.\r\n    spatstat::blur(...) %>% \r\n    # Could use `spatstat::as.data.frame.im()`, but it converts directly to x,y,value triplet of columns, which is not the format I want.\r\n    pluck('v')\r\n  \r\n  res <-\r\n    mat_smoothed %>% \r\n    # Convert 20x30 y-x matrix to tidy format with 20*30 rows.\r\n    as_tibble() %>% \r\n    mutate(y = row_number()) %>% \r\n    pivot_longer(-y, names_to = 'x', values_to = 'value') %>% \r\n      # The columns from the matrix are named `V1`, `V2`, ... `V30` by default, so convert them to an integer that can be joined on.\r\n    mutate(across(x, ~str_remove(.x, '^V') %>% as.integer())) %>% \r\n    arrange(x, y) %>% \r\n    # \"Re-index\" rows with `idx`, ranging from 1 to 600.\r\n    mutate(idx = row_number()) %>% \r\n    select(-x, -y) %>% \r\n    # Convert `x` and `y` indexes (i.e. 1, 2, 3, ..., to meters and flip the y-axis).\r\n    inner_join(grid_xy_rev_m) %>% \r\n    # Re-scale smoothed values to 0-1 range.\r\n    mutate(frac = (value - min(value)) / (max(value) - min(value))) %>% \r\n    ungroup()\r\n  res\r\n}\r\n\r\ndecomp_smooth <-\r\n  decomp %>% \r\n  nest(data = -c(dimension)) %>% \r\n  # `sigma` passed into `...` of `smoothen_component()`. (`data` passed as first argument.)\r\n  mutate(data = map(data, smoothen_component, sigma = 1.5)) %>% \r\n  unnest(data)\r\ndecomp_smooth\r\n\r\n\r\n\r\nWith the data in the proper format, the plotting is pretty straightforward {ggplot2} code (so it’s excerpted).\r\n\r\nViola! I would say that our R version of the python plot is very comparable (just by visual inspection). Note that we could achieve a similar visual profile without the smoothing—see below—but the smoothing undoubtedly makes pattern detection a little less ambiguous.\r\n\r\nFrom the smoothed contours, we can discern several different player profiles (in terms of positioning).\r\nComponents 1, 5, 9: left back\r\nComponents 2: right midfielder\r\nComponent 3: attacking right midfielder\r\nComponent 4: wide left midfielder\r\nComponent 6: central left midfielder\r\nComponents 7, 8: goalkeeper\r\nThe redundancy with left back and goalkeeper is not ideal. That’s certainly something we could fine tune with more experimentation with components. Anyways, the point of this post wasn’t so much about the insights that could be gained (although that’s ultimately what stakeholders would be interested in if this were a “real” analysis).\r\nConclusion\r\nTranslating python code can be challenging, throwing us off from our typical workflow (for me, being {tidyverse}-centric). But hopefully one can see the value in “doing whatever it takes”, even if it means using “non-tidy” R functions (e.g. {data.table}, matrices, etc.) or a different language altogether.\r\n\r\nthe go-to package for data manipulation and all SQL-ish things↩︎\r\nNon-negative matrix factorization may also be abbreviated just as NMF, hence the package name.↩︎\r\nThere’s nothing too interesting about the data retrieval—I’ve essentially just called StatsBombR::FreeCompetitions(), StatsBombR::FreeMatches(),StatsBombR::FreeEvents(), and StatsBombR::allclean() in succession for competition_id = 43.↩︎\r\nminimally converted from the original JSON format↩︎\r\ncompared to dict and lists or python users↩︎\r\nA potential solution would be to round the floating point numbers before joining and “restore” them after the join, but that’s just kluge-y and inelegant.↩︎\r\nI believe the number of components is analogous to the number of components that one would define in performing principal components analysis (PCA).↩︎\r\nThere is nothing stopping us from plotting all 30 components—and, in fact, Devin does in his notebook—but I think it’s easier to digest a fraction of the components (for pedagogical purposes).↩︎\r\nStatsBomb data treats the origin as the top-left corner of the pitch, which I find inconvenient for plotting since I prefer the origin to be the bottom left. Thus, this grid also flip the y-axis of the grid, hence the _rev part of the variable name.↩︎\r\n",
    "preview": "posts/2020-10-14-decomposition-smoothing-soccer/viz_nnmf_dimensions_1to9_r_smooth.png",
    "last_modified": "2021-01-11T09:18:57-06:00",
    "input_file": {},
    "preview_width": 3000,
    "preview_height": 2000
  },
  {
    "path": "posts/2020-09-23-soccer-pitch-control-r/",
    "title": "S3 Classes and {vctrs} to Create a Soccer Pitch Control Model",
    "description": "S3 Classes and {vctrs} to Create a Soccer Pitch Control Model",
    "author": [
      {
        "name": "Tony ElHabr",
        "url": "https://twitter.com/TonyElHabr"
      }
    ],
    "date": "2020-09-23",
    "categories": [
      "r",
      "soccer"
    ],
    "contents": "\r\n\r\nContents\r\nIntro\r\nContructor\r\nValidator\r\nHelper\r\nAside\r\nPrinting\r\nBasic Usage\r\nPseudo-Encapsulation\r\nAdvanced Usage\r\nConclusion\r\n\r\nNote: This post was update on 2020-09-24 to correct field dimension translations that were previously distorting the pitch control contours. The R analogues now match up much more closely with the python versions after the updates.\r\nIntro\r\nThere’s never been a better time to be involved in sports analytics. There is a wealth of open-sourced data and code (not to mention well-researched and public analysis) to digest and use. Both people working for teams and people just doing at as a hobby are publishing new and interesting analyses every day.\r\nIn particular, the FriendsOfTracking (FOT) group, co-led by Professor and author David Sumpter1 have put together an awesome series of videos on YouTube discussing modern soccer analytics, along with a collection of repositories on GitHub sharing the code shown in videos.\r\nLaurie Shaw has shared code that implements the pitch control model described in William Spearman’s paper “Beyond Expected Goals” is interesting to me. The model is different than the one that I used to create some animations on Twitter. Those were based on the pitch control model described by Javier Fernandez and Luke Bornn in their paper “Wide Open Spaces” (code courtesy of Rob Hickman). (Apologies for the onslaught of links!)\r\nNow, I am not one for language wars—and, in fact, I use python often—but I thought it would be awesome to be able to plot Spearman’s pitch control model directly with {ggplot2} and friends. Thus, I set out to convert Laurie’s code to R, attempting to give it a “native” R feel while I was at it.\r\nMost of the process of translating python to R was relatively straightforward (slicing and dicing data frames and arrays/vectors is just part of data cleaning), so I won’t detail them here. However, there was one part that was particularly interesting—the conversion of a python class object. This was actually the key (and most challenging part) of the conversion process.\r\nThere are some great resources for describing how to implement object-orientated programming (OOP) in R, including a couple of chapter’s from Hadley Wickham’s Advanced R book and a very practical write-up from Earo Wang. Every object-oriented task has its unique aspects, so hopefully my discussion here has something to add to what has already been written on the subject matter.\r\nFor demonstration purposes, I’m going to walk through my steps for converting the python class object as if I were doing it for the first time.\r\nContructor\r\nBelow is a stripped down version of Laurie’s code, showing the “essence” of what we need to replicate.2\r\n\r\nclass player(object):\r\n    def __init__(self,player_id,frame):\r\n        self.id = player_id\r\n        self.get_position(frame)\r\n        self.get_velocity(frame)\r\n        \r\n    def get_position(self,frame):\r\n        self.position = np.array(frame[self.player_id + 'x', self.player_id + 'y'])\r\n        \r\n    def get_velocity(self,frame):\r\n        self.velocity = np.array(frame[self.player_id + 'x_v', self.player_id + 'y_v'])\r\n    \r\n    def tti(self,final_position):\r\n        reaction_time = 0.7 # in s\r\n        vmax = 5 # in m/s\r\n        reaction_position = self.position + self.velocity * reaction_time\r\n        self.tti = reaction_time + np.linalg.norm(final_positon - reaction_position)/vmax\r\n\r\n    def p_intercept(self,t):\r\n        tti_sigma = 0.45\r\n        den = 1 + np.exp(-np.pi/np.sqrt(3.0)/tti_sigma * (t-self.tti)))\r\n        return 1 / den\r\n\r\nLet’s make some notes and come back to these as we develop our R class.\r\nWe need a unique identifier: player_id. This is really just a “best practice” thing for object-oriented programming and makes sense given our context. For a sport like soccer, a unique identifier could just be the player’s name, a combination of the team name and the player jersey number, a league unique identifier, etc.\r\nA single-row data frame frame is passed to several of the methods, including the constructor __init__. This single row data frame is sourced from a much larger tracking data frame, with rows for every 0.04 second time interval (25 frames per second, or one frame per 0.04 seconds) in the game.\r\nThe python code stores both the player’s position and velocity as 2x1 arrays. This works well with the unpacking that is done in other places in Laurie’s code.\r\ntti, short for “time to intercept (a target location)”, uses the player’s position and velocity to define the attribute tti (not to be confused with the method itself). This implies that position and velocity should be defined before tti() is ever called, as they are in __init__. tti needs the position_final 2x1 array to calculate tti which is not known upon instantiation; rather, tti can only be properly defined when called to do a specific calculation relating the player’s position and velocity (both defined implicitly in the class, without needing user-specification) with a user-supplied position_final pair of x and y values.\r\np_intercept, short for “probability to intercept (a target location)” depends on tti and an additional parameter t, a user-specified value representing how much time is allotted to reach the ball. Like tti, p_intercept is only “properly” defined when actually doing a calculation on the player’s attributes. Unlike tti, there is no attribute in the player instance that stores this probability; it’s value must be saved in a variable external to the player class if the user wants to use it for something other than an ephemeral calculation.3\r\nTime to intercept a “target” location (tti) may not be intuitive to comprehend immediately. The plot4 below annotates the tti of a “target” location on the pitch (which does not have to be where the ball actually is). tti assumes that the player continues moving at their current speed (annotated by the arrows) for reaction_time seconds before running at vmax (full speed) to the target position. tti for each player is independent of the tti of all other players, which is a relatively reasonable assumption. 5\r\n\r\nThe probability of reaching the “target” location (p_intercept) is directly related to the player’s tti. Uncertainty about how long it will take the player to reach the target location is quantified by the constant tti_sigma in the calculation. (tti is the mean and tti_sigma is the standard deviation of the distribution for a player’s time to arrive at the target location.)\r\n\r\nNotably, this probability is independent of all other players’ probabilities (which explains how it is possible that both players are shown to have probabilities greater than 50% when t = 6 above). When adjusting for all players’ probabilities (by dividing by the sum of all probabilities), the numbers change. This probability adjustment is key when we calculate pitch control.\r\n\r\nOk, on to the R code. We’ll be using S3 and the {vctrs} package to help create our player class. (As with the python class, I’ve simplified the actual implementation for demonstration purposes.)\r\nFirst, we start with the constructor new_player(). Note that there is no direct __init__ equivalent in R. Here we will make a function that is prefixed with new_ and ends with the name of our class (player).\r\n\r\n\r\nnew_player <-\r\n  function(player_id = integer(),\r\n           x = double(),\r\n           y = double(),\r\n           x_v = double(),\r\n           y_v = double()) {\r\n    vctrs::new_rcrd(\r\n      list(\r\n        player_id = player_id,\r\n        x = x,\r\n        y = y,\r\n        x_v = x_v,\r\n        y_v = y_v,\r\n        tti = -1 # dummy value\r\n      ),\r\n      class = 'player'\r\n    )\r\n  }\r\n\r\n\r\n\r\nNow let’s reflect upon our prior notes.\r\nWe have the player_id in this constructor.\r\nWe don’t pass the data frame tracking here. We’ll do it in our helper function. We might say that our constructor is “low-level”, not intended for the user to call directly.\r\nWe split the position and velocity vectors into their individual x and y components, resulting in four total variables instead of two. I don’t think a vector (unnamed or named), list, or matrix are particularly compelling data types to use for an x-y pair of values in R. None natively support unpacking (although R vectors do have some form of “broadcasting” with their recycling behavior).\r\nWe assign a “dummy” value (-1) to tti when initializing the class instance. We will have a method to update tti based on x and y components.\r\nLike tti, we will need a separate p_intercept method to be used to calculate the probabililty of intercepting a ball given a player’s position, speed, and the final position of the ball (all fed as inputs to tti), as well as the additional user-specified t, representing how much time is allotted to reach the ball.\r\nValidator\r\nLet’s proceed by creating a validator function to, you guessed it, validate fields in the player class. It is good practice to check the values used to construct the class. The python code did not have any validation like this, but I don’t think it was ever expected to be extremely robust to any user input.\r\n\r\n\r\nvalidate_player <- function(player) {\r\n  vctrs::vec_assert(vctrs::field(player, 'player_id'), integer())\r\n  vctrs::vec_assert(vctrs::field(player, 'x'), double())\r\n  vctrs::vec_assert(vctrs::field(player, 'y'), double())\r\n  vctrs::vec_assert(vctrs::field(player, 'tti'), double())\r\n  player\r\n}\r\n\r\n\r\n\r\nNote that we could have simply done this validation in the constructor function, but I think it makes sense to put the validation in its own function so that the constructor is more direct (especially if the validation checks are complex).\r\nHelper\r\nFinally, we’ll create a helper player() function, which is our “user-facing” function that we expect/want users to use to instantiate objects.\r\n\r\n\r\nplayer <- \r\n  function(player_id, frame, tracking) {\r\n    \r\n    player_id <- as.integer(player_id)\r\n    frame <- as.integer(frame)\r\n\r\n    assertthat::assert_that(is.data.frame(tracking))\r\n    nms_req <- c('player_id', 'frame', 'x', 'y', 'x_v', 'y_v')\r\n    assertthat::assert_that(all(nms_req %in% names(tracking)))\r\n    \r\n    # `!!` to make sure that we filter using the integer values, not the column itself.\r\n    tracking_filt <- tracking %>% filter(player_id == !!player_id, frame == !!frame)\r\n    assertthat::assert_that(nrow(tracking_filt) == 1L)\r\n    \r\n    player <-\r\n      new_player(\r\n        player_id = player_id,\r\n        x = tracking_filt[['x']],\r\n        y = tracking_filt[['y']],\r\n        x_v = tracking_filt[['x_v']],\r\n        y_v = tracking_filt[['y_v']]\r\n      )\r\n    validate_player(player)\r\n  }\r\n\r\n\r\n\r\nNote the following:\r\nWe coerce player_id and frame to integers instead of doubles (particularly since they are expected to be integers in the constructor). This ensures that the new player is instantiated properly by the constructor and passes our validation.\r\nWe pass in our entire tracking data frame (that has rows for every 0.04 second interval in the game), as well as the frame to slice out of it. (player_id is also used to filter tracking.) This makes it convenient for user to instantiate new player objects when operating on the tracking data frame. There is no need to extract the singular initial position and velocity components “manually”; instead, the helper function does it for the user.\r\nAside\r\nR’s S3 framework is not a formal OOP framework (not even close really). Note that it does not have a reserved keyword to represent the instance of the class like self in python. Also, it is not actually necessary to much of what is done above (with the constructor, validator, and helper).\r\nFor example, we don’t actually have to create a formal-ish constructor prefixed with new_. We don’t even need a constructor function at all in S3. We could do something like class(var) <- 'player' to create a a player object. Of course, this is prone to errors down the line, so we don’t do that. Likewise with the validator and helper functions. The point of these constructs is to add clarity to our class code. They aren’t strictly necessary.\r\nPrinting\r\nLet’s do one more thing for our player class—create a custom print method. (Writing a custom print method is not required whatsoever, but it can be very helpful for debugging.) If we weren’t using {vctrs} and just S3, we would do this by writing a print.player function. However, {vctrs} provides a “pretty” header for us auto-magically (that looks like <player[1]>) if we use it to write our print method.\r\nTo take advantage of the pretty-printing functionality offered by {vctrs}, we write a format.player() method that will be called by a subclass of the generic vctrs::obj_print_data method6, which itself is called whenever we print out an object (whether explicitly with print or just by typing the name of the variable representing our player instance). We’ll add the player’s position and velocity components to the print out.\r\n\r\n\r\nformat.player <- function(player, ...) {\r\n  if(vctrs::field(player, 'in_frame')) {\r\n    suffix <- \r\n      sprintf(\r\n        'with `position = (%.2f, %.2f)` and `velocity = <%.1f, %.1f>`', \r\n        vctrs::field(player, 'player_id'), \r\n        vctrs::field(player, 'y'), \r\n        vctrs::field(player, 'x_v'),\r\n        vctrs::field(player, 'y_v')\r\n      )\r\n  } else {\r\n    suffix <- 'is not on the pitch'\r\n  }\r\n  prefix <- sprintf('`player_id = %s` ', vctrs::field(player, 'player_id'))\r\n  msg <- sprintf('%s%s', prefix, suffix)\r\n  paste(msg, sep = '\\n')\r\n}\r\n\r\nobj_print_data.player <- function(player) {\r\n  cat(format(player), sep = '\\n')\r\n}\r\n\r\n\r\n\r\nBasic Usage\r\nOk, so that is all fine and dandy, but how would we go about instantiating players in a normal workflow?\r\nLet’s say that we want to calculate the pitch control for a single frame in the tracking data (called tracking_start below).7\r\n\r\n\r\ntracking_start\r\n\r\n\r\n\r\nLet’s convert players with id’s 10 through 12 (on the home team) to player instances and see how they look when printed out.\r\n\r\n\r\n10L:12L %>% map(~player(player_id = .x, frame = 53027L, tracking = tracking_start))\r\n\r\n\r\n\r\nPseudo-Encapsulation\r\nWe still need to implement analogues for the tti and p_intercept methods in the python player class. Starting with tti, let’s use some pseudo-encapsulation (with getters and setters) for a player’s tti value.\r\n\r\n\r\n# Frobenious norm\r\neuclidean_norm <- function(x1, x2, y1, y2) {\r\n  m <- matrix(c(x1, y1)) - matrix(c(x2, y2))\r\n  sqrt(sum(m^2))\r\n}\r\n\r\n.get_tti.player <- function(player, x2, y2) {\r\n  ri <- 0.7 # in s\r\n  vmax <- 5 # in m/s\r\n  x1 <- vctrs::field(player, 'x') + vctrs::field(player, 'x_v') * ri\r\n  y1 <- vctrs::field(player, 'y') + vctrs::field(player, 'y_v') * ri\r\n  ri + euclidean_norm(x1, x2, y1, y2) / vmax\r\n}\r\n\r\n.msg_cls_err <- function(player, f) {\r\n  cls <- class(player)[1]\r\n  sprintf('`%s()` doesn\\'t know how to handle class `%s`!', f, cls) \r\n}\r\n\r\n.get_tti.default <- function(player, ...) {\r\n  stop(.msg_cls_err(player, '.get_tti'), call. = FALSE)\r\n}\r\n\r\n.get_tti <- function(player, ...) {\r\n  UseMethod('.get_tti')\r\n}\r\n\r\n`.set_tti<-.player` <- function(player, value) {\r\n  vctrs::field(player, 'tti') <- value\r\n  player\r\n}\r\n\r\n`.set_tti<-.default` <- function(player, ...) {\r\n  stop(.msg_cls_err(player, '.set_tti'), call. = FALSE)\r\n}\r\n\r\n`.set_tti<-` <- function(player, ...) {\r\n  UseMethod('.set_tti<-')\r\n}\r\n\r\n\r\n\r\nThere’s a couple of things going on here:\r\nThe .get_tti and .set_tti functions that call UseMethod are true S3 generics that perform method dispatch, i.e. find the correct method for the object passed to the generic (based on the class of the object). The .get_tti.player and .set_tti.player with the .player “suffix” so that they only work in their defined manners when passed in a player instance. (They won’t be called with an object that is not of the player class.)\r\nThe ellipses (...) in the S3 generic function signatures may be a bit mysterious since they aren’t passed explicitly to UseMethod. Any non-player arguments are captured in these ellipses and passed to whatever method that is called from the generic (e.g. .get_tti.player method called from the .get_tti generic). For .get_tti, the ellipses is intended to capture x2 and y2, and for .set_tti, it captures value.\r\nWe must use the “strange” syntax .set_tti<-.player (instead of just .set_tti.player, which may seem more “natural”) in order to update an attribute in an already instantiated class. 8\r\nWe define the function euclidean_norm() outside of .get_tti.player simply because it is not something that is specific to the time to intercept calculation for a player; it can work with any two pairs of x and y coordinates.9\r\nri and vmax, representing a player’s reaction time and a player’s maximum velocity respectively, are constants defined in the Spearman paper. We could change these if we wanted to, or even make them dynamic (i.e. configurable via other function parameters, or even at instantiation time).\r\nTo really complete our getter and setter methods for tti, we should write methods to handle the case when a non-player object is passed to them. The generic .get_tti and .set_tti methods will dispatch to these functions if the object passed to them (the first argument named player) doesn’t actually inherit from the player class.\r\n\r\n\r\n.get_tti.default <- function(player, ...) {\r\n  stop(.msg_cls_err(player, '.get_tti'), call. = FALSE)\r\n}\r\n\r\n.set_tti.default <- function(player, ...) {\r\n  stop(.msg_cls_err(player, '.get_tti'), call. = FALSE)\r\n}\r\n\r\n\r\n\r\nLet’s see how our pseudo-encapsulation looks in action.\r\n\r\n\r\nplayers <- 8L:10L %>% map(~player(player_id = .x, frame = 53027L, tracking = tracking_start))\r\nmap(players, ~vctrs::field(.x, 'tti'))\r\n\r\n\r\n\r\n\r\n\r\ntarget_x <- 94\r\ntarget_y <- 63\r\nfor(i in seq_along(players)) {\r\n  value <- .get_tti(players[[i]], x2 = target_x, y2 = target_y)\r\n  .set_tti(players[[i]]) <- value\r\n}\r\nmap(players, ~vctrs::field(.x, 'tti'))\r\n\r\n\r\n\r\nNote how the player tti values changed after we defined them for a specified target_x and target_y.\r\nOur approach to p_intercept is very similar to that for tti, so I don’t show most of it here. As before, we define getters and setters, as well as generics for the class (the intended target of method dispatch), as well as a default class to handle unexpected inputs. Probably the only interesting part is the calculation itself, as shown below. If you compare it to the p_intercept method in the python object definition, you’ll see it’s basically identical.\r\n\r\n\r\n.get_p_intercept.player <- function(player, t) {\r\n  tti_sigma <- 0.45\r\n  den <- 1 + exp((-base::pi / sqrt(3) / tti_sigma) * (t - vctrs::field(player, 'tti')))\r\n  1 / den\r\n}\r\n\r\n\r\n\r\nThere is certainly more to show, especially for what is needed to calculate pitch control. (We need to integrate probabilities across all players over time, and do it for the entire pitch.) Nonetheless, the player class and the pseudo-encapsulation that we’ve implemented with S3 and {vctrs} is really the key component underlying the whole pitch control calculation.\r\nAdvanced Usage\r\nTo really motivate the reader, let’s see what this implementation allows us to do.\r\nFirst, let’s emulate the pitch control plot of event 823, which is a pass by the away (blue) team in the home (red) team’s penalty area preceding a successful shot.\r\n\r\nCompare this to the python version.\r\n\r\nIt’s not a perfect replication, but I think it’s very close overall.\r\nSecond, let’s replicate the expected possession value (EPV) plot of the same event, including the EPV added by the pass.\r\n\r\nAgain, we can compare this plot to the python equivalent.\r\n\r\nCool, my R version seems to very close to the python original. We do have a small discrepancy in the EPV added calculation. (This EPV is actually an “expected” EPV calculation that uses pitch control to weight the pre-learned EPV grid). I believe this is probably due to discrepancies in the integration done in the pitch control calculation and not due to a significant a code issue.\r\nThe code to prepare the data for these plots gets more complex, which is why I have excluded it here.10 However, none of it is unreasonably difficult to understand or implement once we have a properly defined player object.\r\nConclusion\r\nThus, we see that there is a huge payoff to creating a sound and robust player object—we can calculate pitch control and EPV, and feed them into pretty visualizations that can provide insight. I believe that the code here could be easily adapted to fit whatever one would like to study. For example, the valuation grid used here could be easily swapped out with expected threat (xT), which is a more modern and probably a better valuation framework than the one used here.11 Furthermore, one could calculate EPV across the entire game. The possibilities for analyses really open up.\r\nauthor of one of my favorite books Soccermatics↩︎\r\nIf you actually browse Laurie’s code, you’ll notice that I’ve changed some of the names of these functions, e.g. tti() here instead of simple_time_to_intercept() there, tracking_df instead of team there. Don’t worry about that. I just wanted to make things as comparable as possible for the diligent reader, and I tried to make variable names that were either (or both) more succinct or more clear.↩︎\r\nOne might argue that we should be consistent with tti and p_intercept and store them in the same way—either both as attributes or neither as attributes—given that both are dependent on some user-specified values (final_position for tti and t for p_intercept). I’m just showing how it is done in Laurie’s code. I think it is simple enough as is and there is no compelling functional reason why we should change the implementation.↩︎\r\nData for this plot and all that follow from post-processed Metrica Sports sample game 2 data.↩︎\r\nauthor of one of my favorite books Soccermatics↩︎\r\nvctrs::obj_print_data that can also handle Unicode easily, although we are not using any Unicode characters here. Also, it is able to handle extra NULLs and [1] that may be printed out if we just use cat or print directly.↩︎\r\nThis is the same data used to generate the first handful of plots.↩︎\r\nR6 is probably a better OOP system to use for this whole use case. The capability to update instance attributes is more native to that framework.↩︎\r\nIt’s best to separate out logic in functions like this where it makes sense to do so. It ultimately makes re-factoring and debugging a lot easier.↩︎\r\nFeel free to check out the source the code used in the full implementation, as well as the code to generate the plots.↩︎\r\nHere is a CSV with the grid for xT.\r\n\r\n↩︎\r\n",
    "preview": "posts/2020-09-23-soccer-pitch-control-r/viz_pc_823_combined.png",
    "last_modified": "2021-01-11T09:19:46-06:00",
    "input_file": {},
    "preview_width": 1536,
    "preview_height": 642
  },
  {
    "path": "posts/2020-07-13-variable-importance-compare/",
    "title": "Comparing Variable Importance Functions (For Modeling)",
    "description": "Comparing Variable Importance Functions (For Modeling)",
    "author": [
      {
        "name": "Tony ElHabr",
        "url": "https://twitter.com/TonyElHabr"
      }
    ],
    "date": "2020-07-13",
    "categories": [
      "r",
      "python",
      "variable importance",
      "machine learning",
      "interpretable",
      "tidymodels"
    ],
    "contents": "\r\n\r\nContents\r\nSetup\r\nResults\r\nConclusion\r\nAppendix\r\n\r\nI’ve been doing some machine learning recently, and one thing that keeps popping up is the need to explain the models and their components. There are a variety of ways to go about explaining model features, but probably the most common approach is to use variable (or feature) importance scores. Unfortunately, computing variable importance scores isn’t as straightforward as one might hope—there are a variety of methodologies! Upon implementation, I came to the question “How similar are the variable importance scores calculated using different methodologies?” 1 I think it’s important to know if the different methods will lead to drastically different results. If so, then the choice of method is a source of bias in model interpretation, which is not ideal.\r\nThis post isn’t intended to be a deep-dive into model interpretability or variable importance, but some concepts should be highlighted before attempting to answer this question. Generally, variable importance can be categorized as either being “model-specific” or “model-agnostic”. Both depend upon some kind of loss function, e.g. root mean squared error (RMSE), classification error, etc. The loss function for a model-specific approach will generally be “fixed” by the software and package that are used2, while model-agnostic approaches tend to give the user flexibility in choosing a loss function. Finally, within model-agnostic approaches, there are different methods, e.g. permutation and SHAP (Shapley Additive Explanations).\r\nSo, to summarize, variable importance “methodologies” can be broken down in several ways:\r\nmodel-specific vs. model-agnostic approach\r\nloss function 3 . model agnostic method (given a model agnostic approach)\r\nI’m going to attempt to address (1) and (3) above. I’m leaving (2) out because (a) I think the results won’t differ too much when using different loss functions (although I haven’t verified this assumption) and (b) for the sake of simplicity, I don’t want to be too exhaustive in this analysis. 3\r\nI also want to evaluate how variable importance scores differ across more than one of each of the following:\r\nmodel type (e.g. linear regression, decision trees, etc.)\r\ntype of target variables (continuous or discrete )\r\ndata set\r\nWhile evaluating the sensitivity of variable importance score to different methodologies is the focus of this analysis, I think it’s important to test how the findings hold up when (1) varying model types, (2) varying target variables, and (3) varying the data itself. This should help us highlight any kind of bias in the results due to choice of model type and type of target variable. Put another way, it should help us quantify the robustness the conclusions that are drawn. If we find that the scores are similar under variation, then we can be more confident that the findings can be generalized.\r\nAdditionally, I’m going to use more than one package for computing variable importance scores. As with varying model types, outcome variables, and data, the purpose is to highlight and quantify possible bias due to choices in this analysis—in this case, the choice of package. Are the results of a permutation-based variable importance calculation the same when using different packages (holding all else equal)?\r\nSpecifically, I’ll be using the {vip} and {DALEX} packages. The {vip} package is my favorite package to compute variable importance scores using Ris because it is capable of doing both types of calculations (model-specific and model-agnostic) for a variety of model types. But other packages are also great. {DALEX} package specializes in model-agnostic model interpretability and can do a lot more than just variable importance calculations.\r\nSetup\r\nFor data, I’m going to be using two data sets from {ggplot2}. 4\r\nincrease computation time. (b) I’ve excluded two of the categorical features—clarity and color, both of which are categorical with a handful of levels. I’ve done this in order to reduce the number of variables involved and, consequently, to speed up computation. (This is just an example after all!) (c) To test how variable importance scores differ for a continuous target variable, I’ll be defining models that predict price as a function of all other variables. (d) For discrete predictions, the target is a binary variable grp that I’ve added. It is equal to '1. Good' when cut %in% c('Idea', 'Premium') and 2. Bad' otherwise. It just so happens that grp is relatively evenly balanced between the two levels, so there should not be any bias in the results due to class imbalance.\r\nI made modifications to both, so see the footnotes and/or code if you’re interested in the detailI made modifications to both, so see the footnotes and/or code if you’re interested in the details.\r\n\r\nFor model types, I’m going to trial the following:\r\ngeneralized linear model (linear and logistic regression) with stats::lm() and stats::glm() respective ly\r\ngeneralized linear model with regularization using the {glmnet} package\r\nbagged tree (random forest) using the {ranger} package\r\nboosted tree (extreme gradient boosting) using the {xgboost} package\r\nWith glmnet::glmnet(), I’m actually not going to use a penalty, so (I think) it should return the same results as lm()/glm(). 5 For {ranger} and {xgboost}, I’m going to be using defaults for all parameters. 6\r\n{vip}’s model-specific scores with (vip::vip(method = 'mod el'))\r\n{vip}’s permutation-based scores (with vip::vip(method = 'perm ute'))\r\n{vip}’s SHAP-based values (with vip::vip(method = 'shap'))\r\n{DALEX}’s permutation-based scores (with DALEX::variable_importance())\r\nNote that the model-specific vs. model-agnostic concern is addressed in comparing method (1) vs. methods (2)-(4). I’ll be consistent with the loss function in variable importance computations for the model-agnostic methods–minimization of RMSE for a continuous target variable and sum of squared errors (SSE) for a discrete target variable. 7\r\nResults\r\nThe following handful of plots illustrate normalized variable importance scores and ranks derived from the scores by data set and type of target variable.\r\nFirst up is the results for the diamonds data set with a continuous target variable.\r\nme: the model-specific scores differ relatively strongly from the rest of the scores given a specific model type. (See the numbers in the parentheses in the first column in each facet labeled vip_model compared to those in the other columns of each facet. 8 For example, the model-specific variable importance score for the carat feature for the {glm} model type is 49%, while the same score for the SHAP variable importance method (vip_shap) is 35%. To be honest, this is not too surprising. The model-specific methods are exactly that—specific to the model type—which suggests that they may strongly dissimilar to the model-agnostic approaches. Nonetheless, despite the scores themselves having some notable variance, the rankings derived from the scores are relatively similar across a given model type (and, arguably, across all model types).\r\nAs a second observation, there is some disagreement between the {glm} and {glmnet} model types and the {ranger} and {xgboost} model types about which feature is the most important: the former two identify carat has being the most important, while the latter two prioritize y.\r\nThirdly–and lastly for this plot—it’s nice to see that the vip_permute and dalex methods produce nearly identical results for each model type, with the exception of {glmnet}. (Hypothetically, these should have nearly identical results since they are both permutation based methods.) Notably, I implemented the explain() function for {glmnet} myself since the {DALEX} package does not export one, so that is probably the reason for the discrepancy 😄.\r\nNow let’s look at the the results when predicting a discrete target variable with the same data set.\r\n\r\nCompared to the results for a continuous target variable, we see greater variation across the model types—the rankings from {glm} and {glmnet} are nearly identical, but they are different from those of {xgboost}, and all are different from those of {ranger}. {ranger} has an additional level of variation—lack of agreement among the methodologies.\r\nAdditionally, we observe that the scores for our two permutation implementations— vip_permute and dalex—are very different. I think this might have to do with how I’ve chosen to normalize scores (i.e. using absolute value to convert negative scores to positive ones prior to 0-1 normalization) or something I’ve over-looked that is specific to classification settings. If something that can be attributed to me (and not the underlying methods) is really the source of discrepancies, then we should be less concerned with the variation in scores and ranks since it seems most strongly associated with the vip_permute-dalex differences.\r\nBefore we can begin to generalize any deductions (possibly biased by our single data set), let’s take a look at the results for the second data set, mpg. First is the results for the continuous target variable.\r\n\r\nThere is consensus on what the most important variable is—cyl—but beyond that, the results are somewhat varied across the board. One might argue that there is going to be lack of agreement among methods (and model types), it’s preferable that the discrepancies occur among lower ranks, as seen here. On the other hand, we’d surely like to see more consensus among variables ranked among the top half or so.\r\nAnd now for the results when ranking with models targeting a discrete variable.\r\n\r\nThere is some pretty strong variation in the {ranger} results. Also, there are discrepancies between the two permutation methods (vip_permute and dalex), which we also noted in the discrete results for diamonds as well. This makes me think again that the issue is due to something I’ve done and not something that could be attributed to the underlying methods. Aside from these, I would say that the results within each model type are pretty coherent (more so than those with the continuous outcome.)\r\nEven without performing any kind of similarity evaluation, we can argue that, in general, the rankings computed by the different methods are relatively similar across the two data sets (diamonds and mpg) and the two types of target variables (continuous and discrete). But why stop there? After all, we can quantify the similarities between ranks.\r\n\r\nThe plot above shows the pairwise correlations among the variable importance ranks computed for each package-function combo, averaged over the two data sets and over the models for the two types of target variables—continuous and discrete. 9 While nothing immediately jumps out from this plot, I think the most notable thing is that the {ranger} scores seem to vary the most across the different variable importance methodologies, bottoming out at 74% for the correlation between the SHAP (vip_shap) and model-specific (vip_model) methodologies. On the other hand, {xgboost} seems to have the most “agreement” and least variance in its scores.\r\nConclusion\r\nOverall, we might say that rankings of variable importance based on normalized variable importance scores in this analysis showed that differences will arise when evaluating different methodologies, but the differences may not be strong enough to change any deductions that one might draw. Of course, this will depend on the context. A small differences could make a huge difference in a field like medicine!\r\nI wouldn’t go so far as to say that these insights can be generalized—among other things, I think I would need to evaluate a much larger variety of data sets—but I think it’s good to be conscious how much the results can vary. It’s ultimately up to the user whether the differences are significant.\r\nAppendix\r\nSee all relevant R code below.\r\n\r\n\r\nlibrary(tidyverse)\r\n.seed <- 42L # Also using this immediately before data set splitting with `{rsample}`.\r\nset.seed(.seed)\r\ndiamonds_modified <- \r\n  ggplot2::diamonds %>% \r\n  sample_frac(0.05) %>% \r\n  mutate(\r\n    color = \r\n      case_when(\r\n        color %in% c('D', 'E') ~ 'DE', \r\n        color %in% c('F', 'G') ~ 'FG',\r\n        TRUE ~ 'HIJ'\r\n      ) %>% as.factor()\r\n  ) %>% \r\n  mutate(\r\n    grp = \r\n      case_when(\r\n        cut %in% c('Idea', 'Premium') ~ '1. Best', \r\n        TRUE ~ '2. Worst'\r\n      ) %>% as.factor()\r\n  ) %>% \r\n  select(-cut, -clarity)\r\ndiamonds_modified\r\n\r\nmpg_modified <- \r\n  ggplot2::mpg %>%\r\n  mutate(\r\n    grp = \r\n      case_when(\r\n        class %in% c('2seater', 'compact', 'subcompact', 'midsize') ~ '1. Small',\r\n        TRUE ~ '2. Big')\r\n  ) %>% \r\n  select(-class, -model, -manufacturer, -trans, -fl)\r\nmpg_modified\r\n\r\nexplain.glmnet <-\r\n  function (object,\r\n            feature_names = NULL,\r\n            X,\r\n            nsim = 1,\r\n            pred_wrapper,\r\n            newdata = NULL,\r\n            exact = FALSE,\r\n            ...) {\r\n    \r\n    if (isTRUE(exact)) {\r\n      if (is.null(X) && is.null(newdata)) {\r\n        stop('Must supply `X` or `newdata` argument (but not both).', call. = FALSE)\r\n      }\r\n      X <- if (is.null(X)) \r\n        newdata\r\n      else X\r\n      res_init <- stats::predict(object, newx = X, s = 0, type = 'coefficients', ...)\r\n      \r\n      # https://stackoverflow.com/questions/37963904/what-does-predict-glm-type-terms-actually-do\r\n      beta <- object %>% coef(s = 0) %>% as.matrix() %>% t()\r\n      avx <- colMeans(X)\r\n      X1 <- sweep(X, 2L, avx)\r\n      res <- t(beta[-1] * t(X1)) %>% as_tibble() %>% mutate_all(~coalesce(., 0))\r\n      attr(res, which = 'baseline') <- beta[[1]]\r\n      class(res) <- c(class(res), 'explain')\r\n      res\r\n    } else {\r\n      fastshap:::explain.default(\r\n        object,\r\n        feature_names = feature_names,\r\n        X = X,\r\n        nsim = nsim,\r\n        pred_wrapper = pred_wrapper,\r\n        newdata = newdata,\r\n        ...\r\n      )\r\n   }\r\n  }\r\n\r\nvip_wrapper <- function(method, ...) {\r\n  res <-\r\n    vip::vip(\r\n      method = method,\r\n      ...\r\n    ) %>% \r\n    pluck('data') %>% \r\n    # Will get a \"Sign\" solumn when using the default `method = 'model'`.\r\n    rename(var = Variable, imp = Importance)\r\n  \r\n  if(any(names(res) == 'Sign')) {\r\n    res <-\r\n      res %>% \r\n      mutate(dir = ifelse(Sign == 'POS', +1L, -1L)) %>% \r\n      mutate(imp = dir * imp)\r\n  }\r\n  res\r\n}\r\n\r\n# 'glm' gets converted to 'lm' for regression in my code\r\n.engines_valid <- c('glm', 'glmnet', 'xgboost', 'ranger')\r\nengines_named <- .engines_valid %>% setNames(., .)\r\n.modes_valid <- c('regression', 'classification')\r\nchoose_f_fit <- function(engine = .engines_valid, mode = .modes_valid) {\r\n  engine <- match.arg(engine)\r\n  mode <- match.arg(mode)\r\n  f_glm <- list(parsnip::linear_reg, parsnip::logistic_reg) %>% set_names(.modes_valid)\r\n  fs <-\r\n    list(\r\n      'xgboost' = rep(list(parsnip::boost_tree), 2) %>% set_names(.modes_valid),\r\n      'ranger' = rep(list(parsnip::rand_forest), 2) %>% set_names(.modes_valid),\r\n      'glm' = f_glm,\r\n      'glmnet' = f_glm\r\n    )\r\n  res <- fs[[engine]][[mode]]\r\n  res\r\n}\r\n\r\nchoose_f_predict <- function(engine = .engines_valid) {\r\n  engine <- match.arg(engine)\r\n  f_generic <- function(object, newdata) predict(object, newdata = newdata)\r\n  fs <-\r\n    list(\r\n      'xgboost' = f_generic,\r\n      'ranger' = function(object, newdata) predict(object, data = newdata)$predictions,\r\n      'glm' = f_generic,\r\n      # Choosing no penalty.\r\n      'glmnet' = function(object, newdata) predict(object, newx = newdata, s = 0)\r\n    )\r\n  fs[[engine]]\r\n}\r\n\r\nis_binary <- function(x) {\r\n  n <- unique(x)\r\n  length(n) - sum(is.na(n)) == 2L\r\n}\r\n\r\nis_discrete <- function(x) {\r\n  is.factor(x) | is.character(x)\r\n}\r\n\r\n# I would certainly not recommend a big function like this in a normal type of project or analysis. But, in this case, it makes things more straightforward.\r\ncompare_and_rank_vip <-\r\n  function(data,\r\n           col_y,\r\n           engine = .engines_valid,\r\n           mode = NULL,\r\n           ...) {\r\n    message(engine)\r\n    engine <- match.arg(engine)\r\n\r\n    if(!is.null(mode)) {\r\n      mode <- match.arg(mode, .modes_valid)\r\n    } else {\r\n      y <- data[[col_y]]\r\n      y_is_discrete <- is_discrete(y)\r\n      y_is_binary <- is_binary(y)\r\n      \r\n      mode <-\r\n        case_when(\r\n          y_is_discrete | y_is_binary ~ 'classification',\r\n          TRUE ~ 'regression'\r\n        )\r\n    }\r\n    \r\n    mode_is_class <- mode == 'classification'\r\n    parsnip_engine <- \r\n      case_when(\r\n        engine == 'glm' & !mode_is_class ~ 'lm', \r\n        TRUE ~ engine\r\n      )\r\n\r\n    f_fit <- choose_f_fit(engine = engine, mode = mode)\r\n    fmla <- formula(sprintf('%s ~ .', col_y))\r\n    set.seed(.seed)\r\n    splits <- data %>% rsample::initial_split(strata = col_y)\r\n    \r\n    data_trn <- splits %>% rsample::training()\r\n    data_tst <- splits %>% rsample::testing()\r\n    \r\n    rec <- \r\n      recipes::recipe(fmla, data = data_trn) %>% \r\n      # Note that one-hot encoding caused rank deficiencies with `glm()` and `{DALEX}`.\r\n      recipes::step_dummy(recipes::all_nominal(), -recipes::all_outcomes(), one_hot = FALSE)\r\n    \r\n    is_ranger <- engine == 'ranger'\r\n    f_engine <- if(is_ranger) {\r\n      partial(parsnip::set_engine, engine = parsnip_engine, importance = 'permutation')\r\n    } else {\r\n      partial(parsnip::set_engine, engine = parsnip_engine)\r\n    }\r\n    \r\n    spec <- \r\n      f_fit() %>%\r\n      f_engine() %>% \r\n      parsnip::set_mode(mode)\r\n    \r\n    wf <-\r\n      workflows::workflow() %>%\r\n      workflows::add_recipe(rec) %>%\r\n      workflows::add_model(spec)\r\n    \r\n    fit <- wf %>% parsnip::fit(data_trn)\r\n    fit_wf <- fit %>% workflows::pull_workflow_fit()\r\n    \r\n    data_trn_jui <-\r\n      rec %>% \r\n      recipes::prep(training = data_trn) %>% \r\n      recipes::juice()\r\n    \r\n    x_trn_jui <-  data_trn_jui[, setdiff(names(data_trn_jui), col_y)] %>% as.matrix()\r\n    y_trn_jui <- data_trn_jui[[col_y]]\r\n\r\n    y_trn_jui <- \r\n      if(mode_is_class) {\r\n        as.integer(y_trn_jui) - 1L\r\n      } else {\r\n        y_trn_jui\r\n      }\r\n    \r\n    vip_wrapper_partial <-\r\n      partial(\r\n        vip_wrapper, \r\n        object = fit_wf$fit, \r\n        num_features = x_trn_jui %>% ncol(), \r\n        ... = \r\n      )\r\n\r\n    # Returns POS/NEG for glm/glmnet disc\r\n    vi_vip_model <- vip_wrapper_partial(method = 'model')\r\n    \r\n    # I believe these are the defaults chosen by `{vip}` (although its actual default is `metric = 'auto'`).\r\n    metric <- ifelse(mode_is_class, 'sse', 'rmse')\r\n    f_predict <- choose_f_predict(engine = engine)\r\n    \r\n    vip_wrapper_partial_permute <-\r\n      partial(\r\n        vip_wrapper_partial,\r\n        method = 'permute',\r\n        metric = metric,\r\n        pred_wrapper = f_predict,\r\n        ... = \r\n      )\r\n\r\n    # # lm method for regression won't work with the general case.\r\n    # vi_vip_permute <-\r\n    #   if(engine == 'glm') {\r\n    #     vip_wrapper_partial_permute(\r\n    #       train = data_trn_jui,\r\n    #       target = col_y\r\n    #     )\r\n    #   } else {\r\n    #     vip_wrapper_partial_permute(\r\n    #       train = x_trn_jui %>% as.data.frame(),\r\n    #       target = y_trn_jui\r\n    #     )\r\n    #   }\r\n    \r\n    f_coerce_permute <- ifelse(engine != 'glm', function(x) { x }, as.data.frame)\r\n    set.seed(.seed)\r\n    vi_vip_permute <-\r\n      vip_wrapper_partial_permute(\r\n        train = x_trn_jui %>% f_coerce_permute(),\r\n        target = y_trn_jui\r\n      )\r\n    \r\n    # Note that `vip:::vi_shap.default()` uses `{fastshap}` package.\r\n    set.seed(.seed)\r\n    vip_wrapper_partial_shap <-\r\n      partial(\r\n        vip_wrapper_partial, \r\n        method = 'shap',\r\n        train = x_trn_jui,\r\n        ... = \r\n      )\r\n    \r\n    vi_vip_shap <-\r\n      if(is_ranger) {\r\n        vip_wrapper_partial_shap(pred_wrapper = f_predict)\r\n      } else {\r\n        vip_wrapper_partial_shap(exact = TRUE)\r\n      }\r\n    \r\n    z <-\r\n      vip::vi_shap(\r\n        # method = 'shap',\r\n        object = fit_wf$fit,\r\n        # metric = 'rmse',\r\n        pred_wrapper = f_predict,\r\n        # num_features = x_trn_jui %>% ncol(),\r\n        train = x_trn_jui\r\n      )\r\n    z\r\n\r\n    # # Removed this part since it's basically redundant with the `{vip}` SHAP method (which I checked).\r\n    # fastshap_partial <-\r\n    #   partial(\r\n    #     fastshap::explain,\r\n    #     object = fit_wf$fit,\r\n    #     X = x_trn_jui,\r\n    #     ... = \r\n    #   )\r\n    # \r\n    # expl_fastshap <-\r\n    #   if(is_ranger) {\r\n    #     fastshap_partial(pred_wrapper = f_predict)\r\n    #   } else {\r\n    #     fastshap_partial(exact = TRUE)\r\n    #   }\r\n    # \r\n    # # Need to remove the non-diamonds_modified class in order to use {dplyr} functions.\r\n    # class(expl_fastshap) <- c('tbl_df', 'tbl', 'data.frame')\r\n    # \r\n    # vi_fastshap <-\r\n    #   expl_fastshap %>%\r\n    #   summarize_all(~mean(abs(.))) %>% \r\n    #   # This is actually already `imp_abs`, but it won't matter in the end.\r\n    #   pivot_longer(matches('.'), names_to = 'var', values_to = 'imp')\r\n\r\n    # idk why, but I can use `ifelse()` here and return a function that won't have unexpected output (i.e. a list instead of a dataframe).\r\n    # This is not true for the other `if...else` statements\r\n    f_coerce_dalex <- ifelse(engine == 'xgboost', function(x) { x }, as.data.frame)\r\n    expl_dalex <- \r\n      DALEX::explain(\r\n        fit_wf$fit, \r\n        data = x_trn_jui %>% f_coerce_dalex(),\r\n        y = y_trn_jui, \r\n        verbose = FALSE\r\n      )\r\n    \r\n    # DALEX::loss_root_mean_square == vip::metric_rmse\r\n    # DALEX::DALEX::loss_sum_of_squares == vip::metric_sse\r\n\r\n    f_loss <- if(mode_is_class) {\r\n      DALEX::loss_sum_of_squares\r\n    } else {\r\n      DALEX::loss_root_mean_square\r\n    }\r\n    set.seed(.seed)\r\n    vi_dalex_init <- \r\n      expl_dalex %>% \r\n      DALEX::variable_importance(\r\n        type = 'difference',\r\n        loss_function = f_loss, \r\n        n_sample = NULL\r\n      )\r\n    vi_dalex_init\r\n\r\n    # Regarding why `permutation == 0`, see `ingredients:::feature_importance.default()`, which is called by `ingredients:::feature_importance.explainer()`, which is called by `DALEX::variable_importance`\r\n    # Specifically, this line: `res <- data.frame(variable = c(\"_full_model_\", names(res),  \"_baseline_\"), permutation = 0, dropout_loss = c(res_full, res, res_baseline), label = label, row.names = NULL)`\r\n    vi_dalex <-\r\n      vi_dalex_init %>% \r\n      as_tibble() %>% \r\n      filter(permutation == 0) %>% \r\n      mutate(\r\n        imp = abs(dropout_loss) / max(abs(dropout_loss))\r\n      ) %>% \r\n      select(var = variable, imp) %>%\r\n      filter(!(var %in% c('_baseline_', '_full_model_'))) %>% \r\n      arrange(desc(imp))\r\n\r\n    vi_rnks <-\r\n      list(\r\n        vip_model = vi_vip_model,\r\n        vip_permute = vi_vip_permute,\r\n        vip_shap = vi_vip_shap,\r\n        # fastshap = vi_fastshap,\r\n        dalex = vi_dalex\r\n      ) %>% \r\n      map_dfr(bind_rows, .id = 'src') %>% \r\n      group_by(src) %>% \r\n      mutate(imp_abs = abs(imp)) %>% \r\n      mutate(imp_abs_norm = imp_abs / sum(imp_abs)) %>% \r\n      select(var, imp, imp_abs, imp_abs_norm) %>% \r\n      mutate(rnk = row_number(desc(imp_abs))) %>% \r\n      ungroup()\r\n    vi_rnks\r\n  }\r\n\r\ncompare_and_rank_vip_q <- quietly(compare_and_rank_vip)\r\n# sysfonts::font_add_google('')\r\n# font_add_google('Roboto Condensed', 'rc')\r\n# sysfonts::font_add_google('IBM Plex Sans', 'ips')\r\n\r\nprettify_engine_col <- function(data) {\r\n  res <- data %>% mutate_at(vars(engine), ~sprintf('{%s}', engine))\r\n}\r\n\r\nfactor_src <- function(x) {\r\n  ordered(x, levels = c('vip_model', 'vip_shap', 'vip_permute', 'dalex'))\r\n}\r\n\r\nplot_rnks <- function(df_rnks, option = 'D') {\r\n  viz <-\r\n    df_rnks %>% \r\n    group_by(var) %>% \r\n    mutate(rnk_mean = rnk %>% mean(na.rm = TRUE)) %>% \r\n    ungroup() %>% \r\n    mutate_at(vars(var), ~forcats::fct_reorder(., -rnk_mean)) %>% \r\n    ungroup() %>% \r\n    prettify_engine_col() %>% \r\n    mutate_at(vars(src), ~ordered(., levels = c('vip_model', 'vip_shap', 'vip_permute', 'dalex'))) %>% \r\n    mutate(lab = sprintf('%2d (%s)', rnk, scales::percent(imp_abs_norm, accuracy = 1, width = 2, justify = 'right'))) %>% \r\n    ggplot() +\r\n    aes(x = src, y = var) +\r\n    geom_tile(aes(fill = rnk), alpha = 0.5, show.legend = F) +\r\n    geom_text(aes(label = lab)) +\r\n    scale_fill_viridis_c(direction = -1, option = option, na.value = 'white') +\r\n    theme_minimal(base_family = '') +\r\n    facet_wrap(~engine) +\r\n    theme(\r\n      plot.title.position = 'plot',\r\n      panel.grid.major = element_blank(),\r\n      panel.grid.minor = element_blank(),\r\n      plot.title = element_text(face = 'bold'),\r\n      plot.subtitle = ggtext::element_markdown(),\r\n    ) +\r\n    labs(x = NULL, y = NULL)\r\n  viz\r\n}\r\n\r\n# .dir_png <- here::here()\r\n# .dir_png <- .dir_proj\r\nexport_png <- function(x, dir = here::here(), file = deparse(substitute(x)), width = 8, height = 8, ...) {\r\n  return()\r\n  path <- file.path(dir, sprintf('%s.png', file))\r\n  res <- ggsave(plot = x, filename = path, width = width, height = height, ...)\r\n}\r\n\r\ndiamonds_c_rnks <-\r\n  engines_named %>%\r\n  map_dfr( \r\n    ~compare_and_rank_vip_q(\r\n      diamonds_modified %>% select(-grp),\r\n      col_y = 'price', \r\n      engine = .x\r\n    ) %>% \r\n      pluck('result'),\r\n    .id = 'engine'\r\n)\r\ndiamonds_c_rnks\r\n\r\nlab_title <- 'Variable Importance Ranking'\r\nlab_subtitle_diamonds_c <- '<span style = \"color:#4E79A7\"><b>Continuous<\/b><\/span> Target Variable for Model Prediction of <span style = \"color:#E15759\"><b>diamonds<\/b><\/span> Data'\r\n\r\n# require(ggtext)\r\nviz_diamonds_c_rnks <- \r\n  diamonds_c_rnks %>% \r\n  plot_rnks(option = 'A') +\r\n  labs(\r\n    title = lab_title,\r\n    subtitle = lab_subtitle_diamonds_c\r\n  )\r\nviz_diamonds_c_rnks\r\n\r\ndiamonds_d_rnks <-\r\n  engines_named %>% \r\n  map_dfr(\r\n    ~compare_and_rank_vip_q(\r\n      diamonds_modified %>% select(-price),\r\n      col_y = 'grp', \r\n      engine = .x,\r\n    ) %>% \r\n      pluck('result'),\r\n    .id = 'engine'\r\n  )\r\ndiamonds_d_rnks\r\n\r\nlab_subtitle_diamonds_d <- lab_subtitle_diamonds_c %>% str_replace('^.*\\\\sTarget', '<span style = \"color:#F28E2B;\"><b>Discrete<\/b><\/span> Target')\r\nviz_diamonds_d_rnks <- \r\n  diamonds_d_rnks %>% \r\n  plot_rnks(option = 'C') +\r\n  labs(\r\n    title = lab_title,\r\n    subtitle = lab_subtitle_diamonds_d\r\n  )\r\nviz_diamonds_d_rnks\r\n\r\nmpg_c_rnks <-\r\n  engines_named %>%\r\n  map_dfr( \r\n    ~compare_and_rank_vip_q(\r\n      mpg_modified %>% select(-grp),\r\n      col_y = 'displ', \r\n      engine = .x\r\n    ) %>% \r\n      pluck('result'),\r\n    .id = 'engine'\r\n)\r\nmpg_c_rnks\r\n\r\nlab_subtitle_mpg_c <- lab_subtitle_diamonds_c %>% str_replace('of.*Data', 'of <span style = \"color:#B07AA1\"><b>mpg<\/b><\/span> Data')\r\nviz_mpg_c_rnks <- \r\n  mpg_c_rnks %>% \r\n  plot_rnks(option = 'B') +\r\n  labs(\r\n    title = lab_title,\r\n    subtitle = lab_subtitle_mpg_c\r\n  )\r\nviz_mpg_c_rnks\r\n\r\nmpg_d_rnks <-\r\n  engines_named %>% \r\n  map_dfr(\r\n    ~compare_and_rank_vip_q(\r\n      mpg_modified,\r\n      col_y = 'grp', \r\n      engine = .x,\r\n    ) %>% \r\n      pluck('result'),\r\n    .id = 'engine'\r\n  )\r\nmpg_d_rnks\r\n\r\nlab_subtitle_mpg_d <- lab_subtitle_mpg_c %>% str_replace('^.*\\\\sTarget', '<span style = \"color:#F28E2B;\"><b>Discrete<\/b><\/span> Target')\r\nviz_mpg_d_rnks <- \r\n  mpg_d_rnks %>% \r\n  plot_rnks(option = 'D') +\r\n  labs(\r\n    title = lab_title,\r\n    subtitle = lab_subtitle_mpg_d\r\n  )\r\nviz_mpg_d_rnks\r\n\r\ncor_by_set_engine <-\r\n  list(\r\n    diamonds_c = diamonds_c_rnks,\r\n    diamonds_d = diamonds_d_rnks,\r\n    mpg_c = mpg_c_rnks,\r\n    mpg_d = mpg_d_rnks\r\n  ) %>% \r\n  map_dfr(bind_rows, .id = 'set') %>% \r\n  group_by(set, engine) %>% \r\n  nest() %>% \r\n  ungroup() %>% \r\n  mutate(\r\n    data = \r\n      map(data, ~widyr::pairwise_cor(.x, item = src, feature = var, value = rnk))\r\n  ) %>% \r\n  unnest(data) %>% \r\n  rename(cor = correlation)\r\ncor_by_set_engine\r\n\r\ncor_by_engine <-\r\n  cor_by_set_engine %>% \r\n  group_by(engine, item1, item2) %>% \r\n  summarize_at(vars(cor), mean) %>% \r\n  ungroup()\r\ncor_by_engine\r\n\r\nviz_cor_by_engine <-\r\n  cor_by_engine %>% \r\n  prettify_engine_col() %>% \r\n  mutate_at(vars(item1, item2), factor_src) %>% \r\n  mutate(lab = scales::percent(cor, accuracy = 1, width = 3, justify = 'right')) %>% \r\n  filter(item1 < item2) %>% \r\n  ggplot() +\r\n  aes(x = item1, y = item2) +\r\n  geom_tile(aes(fill = cor), alpha = 0.5, show.legend = FALSE) +\r\n  geom_text(aes(label = lab)) +\r\n  scale_fill_viridis_c(option = 'E', na.value = 'white') +\r\n  theme_minimal(base_family = '') +\r\n  facet_wrap(~engine) +\r\n  theme(\r\n    plot.title.position = 'plot',\r\n    panel.grid.major = element_blank(),\r\n    panel.grid.minor = element_blank(),\r\n    plot.title = element_text(face = 'bold'),\r\n    plot.subtitle = ggtext::element_markdown(),\r\n  ) +\r\n  labs(\r\n    title = 'Variable Importance Rank Pairwise Correlations',\r\n    subtitle = 'Averaged Over <span style = \"color:#E15759\"><b>diamonds<\/b><\/span> and <span style = \"color:#B07AA1\"><b>mpg<\/b><\/span> Data and Over <span style = \"color:#4E79A7\"><b>Continuous<\/b><\/span> and <span style = \"color:#F28E2B;\"><b>Discrete<\/b><\/span> Target Variables',\r\n    x = NULL, \r\n    y = NULL\r\n  )\r\nviz_cor_by_engine\r\n\r\n\r\n\r\n\r\nAfter all, I want to make sure my results aren’t sensitive to some kind of bias (unintentional in this case).↩︎\r\nThis isn’t an academic paper after all!↩︎\r\nThis isn’t an academic paper after all!↩︎\r\nModifications include the following: (a) I’ve excluded manufacturer, model, trans, and class. (b) For continuous predictions, I’ll predict displ as a function of all other variables. (c) For discrete predictions, I’ve created a binary variable grp based on class.↩︎\r\n(I haven’t actually checked the source for {glmnet} and compared it to that of lm()/glm(). Differences may arise due to underlying differences in the algorithm for least squares.)↩︎\r\nI should say that I’m using the {tidymodels} package to assist with all of this. It really shows off its flexibility here, allowing me to switch between models only having to change-out one line of code!Finally, for variable importance scores (which is really the focus), I’m going to use the following packages and functi ons.↩︎\r\nYes, SSE is certainly not the best measure of loss for classification. Nonetheless, when dealing with a binary outcome variable, as is done here, it can arguably be cceptable.↩︎\r\nDon’t be deceived by the fill contours, which are based on the rankings–the number in front of the parentheses.↩︎\r\nI could have split (or “facetted”) in a different way–e.g. by type of target variable instead of by package-function combo—but I think splitting in this way makes the most sense because the type of model—{glm}, {ranger}, etc.—is likely the biggest source of variation.↩︎\r\n",
    "preview": "posts/2020-07-13-variable-importance-compare/viz_diamonds_c_rnks.png",
    "last_modified": "2021-01-11T09:24:39-06:00",
    "input_file": {},
    "preview_width": 2400,
    "preview_height": 2400
  },
  {
    "path": "posts/2019-12-29-bayesian-statistics-english-premier-league/",
    "title": "A Bayesian Approach to Ranking English Premier League Teams (using R)",
    "description": "A Bayesian Approach to Ranking English Premier League Teams (using R)",
    "author": [
      {
        "name": "Tony ElHabr",
        "url": "https://twitter.com/TonyElHabr"
      }
    ],
    "date": "2019-12-13",
    "categories": [
      "r",
      "bayes",
      "statistics",
      "poisson",
      "soccer",
      "epl"
    ],
    "contents": "\r\n\r\nContents\r\nIntroduction\r\nData Collection\r\n\r\nModeling\r\nInterpretation & Discussion\r\nPredictions\r\n\r\nConclusion\r\nFuture Work\r\n\r\nAppendix\r\nCode\r\n\r\n\r\nAs I mentioned back in July, I haven’t had as much time (since summer of 2018) to write due to taking classes in pursuit of a degree from Georgia Tech’s Online Master of Science in Analytics (OMSA) program. On the other hand, the classes have given me some ideas for future content. And, in the case of the Bayesian Statistics class that I took this past fall, there’s content that translates well to a blog post directly. What follows is a lightly edited version of the report that I submitted at the end of the semester for this class.\r\nIntroduction\r\nI model and predict English Premier League (EPL) game outcomes using Bayesian methods. Specifically, I estimated goals scored by each team in a given game as independent Poisson processes, taking the difference of the estimated points scored on each side to determine game winners. More broadly, one may call this a hierarchical Bayesian Poisson model.\r\nWhy model goals scored using a Poisson distribution? By definition, it “is a discrete probability distribution that expresses the probability of a given number of events occurring in a fixed interval of time with a known constant rate.” In the context of soccer, the fixed interval of time is the 90 minutes of a game (disregarding injury time and over time), and the known constant rate is the expected number of goals scored per minute. Importantly, I must make the assumption that the rate of scored goals is the same across all minutes of a game. 1 Additionally, when computing the difference between Poisson distributions, I must assume that the two distributions are independent of one another. 2\r\nUsing Poisson distributions to model soccer scores is certainly not a novel concept. 3 4 In particular, I would like to acknowledge the work of Rasmus Baath’s, whose series of blog posts exemplifying the use of R and JAGS to model scores in La Liga games between the 2008-09 to 2012-13 season served as a guide for the analysis that I conduct here. 5 6\r\nData Collection\r\nFor this project I retrieved game scores and outcomes for the previous three seasons of EPL games (i.e. from the 2016-17 season through the 2018-2019 season).\r\n\r\n\r\n# Reference: https://github.com/jalapic/engsoccerdata/blob/master/R/england_current.R\r\nscrape_epl_data <- function(season = lubridate::year(Sys.Date()) - 1L) {\r\n  s1 <- season %>% str_sub(3, 4) %>% as.integer()\r\n  s2 <- s1 + 1L\r\n  path <- sprintf('http://www.football-data.co.uk/mmz4281/%2d%2d/E0.csv', s1, s2)\r\n  data_raw <- path %>% read_csv()\r\n  data <-\r\n    data_raw %>% \r\n    janitor::clean_names() %>% \r\n    mutate_at(vars(date), ~as.Date(., '%d/%m/%y')) %>% \r\n    select(\r\n      date, \r\n      tm_h = home_team, \r\n      tm_a = away_team,\r\n      g_h = fthg,\r\n      g_a = ftag\r\n    ) %>% \r\n    mutate(\r\n      g_total = g_h + g_a,\r\n      g_diff = g_h - g_a,\r\n      result = \r\n        case_when(\r\n          g_h > g_a ~ 'h', \r\n          g_h < g_a ~ 'a', \r\n          TRUE ~ 't'\r\n        ),\r\n      tm_winner = \r\n        case_when(\r\n          g_h > g_a ~ tm_h, \r\n          g_h < g_a ~ tm_a, \r\n          TRUE ~ NA_character_\r\n        )\r\n    ) %>% \r\n    mutate_at(vars(matches('season|^g_')), as.integer)\r\n}\r\n\r\ndata <-\r\n  tibble(season = seasons) %>% \r\n  mutate(data = map(season, scrape_epl_data)) %>% \r\n  unnest(data)\r\ndata\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nModeling\r\nMy model is formally defined as follows.\r\n\\[\r\n\\begin{array}{c}\r\ng_h \\sim \\mathcal{Pois}(\\lambda_{h,i,j}) \\\\\r\ng_a \\sim \\mathcal{Pois}(\\lambda_{a,i,j}) \\\\\r\n\\log(\\lambda_{h,i,j}) = \\text{baseline}_h + (z_i - z_j) \\\\\r\n\\log(\\lambda_{a,i,j}) = \\text{baseline}_a + (z_j - z_i). \\\\\r\n\\end{array}\r\n\\]\r\nThis model estimates the goals scored by the home team, \\(g_h\\), and the goals scored by the away team, \\(g_a\\), in a given game between home team, \\(\\text{tm}_h\\), and away team, \\(\\text{tm}_a\\), as random variables coming from independent Poisson processes, \\(\\mathcal{Pois}(\\lambda_{h,i,j})\\) and \\(\\mathcal{Pois}(\\lambda_{a,i,j})\\). The log of the rate of goals scored by the home team, \\(\\lambda_{h,i,j}\\), in a game between \\(\\text{tm}_i\\) and \\(\\text{tm}_j\\) is modeled as the sum of a “baseline” average of goals scored by any given team playing at home, \\(\\text{baseline}_h\\), and the difference between the team “strength” \\(z\\) of teams \\(i\\) and \\(j\\) in a given game. I define the log of the goal rate by the away team, \\(\\lambda_{a,i,j}\\), in a similar fashion. 7 It is important to distinguish the baseline levels for home and away so as to account for “home field advantage”. (One should expect to find that \\(\\text{baseline}_h > \\text{baseline}_a\\) in the posterior estimates.)\r\nSince I am employing a Bayesian approach, I need to model priors as well. I define them as follows.\r\n\\[\r\n\\begin{array}{c}\r\n\\text{baseline}_h \\sim \\mathcal{N}(0, 2^2) \\\\\r\n\\text{baseline}_a \\sim \\mathcal{N}(0, 2^2) \\\\\r\nz_{i} \\sim \\mathcal{N}(z_{\\text{all}} , \\sigma^2_{\\text{all}}) \\quad \\text{tm}_i > 1 \\\\\r\nz_{\\text{all}} \\sim \\mathcal{N}(0, 2^2) \\\\\r\n\\sigma_{\\text{all}} \\sim \\mathcal{U}(0, 2).\r\n\\end{array}\r\n\\]\r\nThere are a couple of things to note about these priors. First, I must “zero”-anchor the strength estimate \\(z\\) of one team. (This is manifested by \\(\\text{tm}_i > 1\\).) Here, I choose the first team alphabetically—Arsenal. Second, the priors are intentionally defined to be relatively vague (although not too vauge) so as to allow the posterior estimates to be heavily defined by the data rather than the priors. Note that the standard deviation of the overall team strength parameter \\(z_{\\text{all}}\\), defined as \\(2\\) on a log scale, corresponds to an interval of \\(\\left[e^{-2}, e^2\\right] = \\left[0.13, 7.40\\right]\\) on an unstransformed scale, i.e. goals scored per game.\r\nI leverage the {R2OpenBUGs} package to create this model with R on the “frontend” and generate the results using the OpenBUGS engine on the “backend”. Regarding the implementation itself, note that I run 100,000 simulations (n.iter), minus 1,000 “burn-in” runs (n.burn).\r\nThe raw results are as follows. (As a quick “validation” of these results, note that \\(\\text{baseline}_h > \\text{baseline}_a\\), as hypothesized.)\r\nInterpretation & Discussion\r\nNext, I correspond the strength estimates \\(z\\) to teams. Notably, I must “re-add” the zero-anchored team—Arsenal (whose \\(z\\) is assigned a dummy value of 1). To do this, I impute its credible set quantiles using the values of the overall strength term \\(z_{\\text{all}}\\).\r\n\r\nIt’s not surprising to see that the strength (\\(z\\)) corresponding to all but three teams—Liverpool, Man City, and Tottenham—is negative. These three teams, followed closely by Arsenal have been regarded as the best teams for the past two or three EPL seasons. So, relative to Arsenal, all other teams (aside from the top three) are viewed as “worse” by the model.\r\nNote that the \\(z\\) estimates above should not be interpreted as goals scored by the teams because they are relative to the strength of Arsenal. To facilitate such an interpretation, I need to translate \\(z\\) to goals scored per game. To do this, for each \\(z\\), I (1) subtract the average value of all \\(z\\)’s, (2) add the posterior mean of \\(\\text{baseline}_{h}\\), and (3) exponentiate.\r\nThe plot below shows the results of this transformation.\r\n\r\nPredictions\r\nI can make predictions of game results for the historical data, given the model. Specifically, I simulate the score for both teams in each matchup (1,140 in all) 1,000 times, choosing the result inferred by the mode of each side’s simulated score. (For example, if the mode of the 1,000 simulated scores for the away team is 1 and that of the home team is 2, then the predicted outcome is a win for the home team.) A breakdown of the predicted and actual outcomes is shown below.\r\n\r\nI make a couple of observations:\r\nThe most common outcome is an actual win by the home team and a predicted win by the home team.\r\nThe model never predicts a tie. (This may seem “unreasonable”, but BÃ¥Ã¥th also found this to be true for his final model.)\r\nThe model predicts the outcome correctly in 447 + 216 = 663 of 1,140 games (i.e., 58%).\r\nThe next couple of visuals provide more details regarding the simulated outcomes.\r\n\r\nFrom the above graph of the mode of goals scored by both sides, it’s apparent that a 2-1 scores in favor of the home side is the most common outcome.\r\n\r\nThe above histogram illustrating the mean (instead of the mode) of the simulated goals provides a bit more nuance to our understanding of modes shown before.\r\n\r\nFinally, the above visual shows the predicted outcomes (inferred from the prior graph of predicted modes).\r\nTo better understand how the model works on a team-level basis, let’s look at how well it predicts for each team.\r\n\r\n\r\n\r\nTeam\r\n# of Wins\r\nWin %\r\nArsenal\r\n46\r\n80.70%\r\nMan City\r\n45\r\n78.95%\r\nTottenham\r\n43\r\n75.44%\r\nLiverpool\r\n41\r\n71.93%\r\nChelsea\r\n39\r\n68.42%\r\nCardiff\r\n12\r\n63.16%\r\nEverton\r\n36\r\n63.16%\r\nFulham\r\n12\r\n63.16%\r\nMan United\r\n35\r\n61.40%\r\nHuddersfield\r\n23\r\n60.53%\r\nBurnley\r\n34\r\n59.65%\r\nStoke\r\n22\r\n57.89%\r\nBournemouth\r\n30\r\n52.63%\r\nCrystal Palace\r\n30\r\n52.63%\r\nSunderland\r\n10\r\n52.63%\r\nSwansea\r\n20\r\n52.63%\r\nWest Ham\r\n30\r\n52.63%\r\nWatford\r\n29\r\n50.88%\r\nNewcastle\r\n19\r\n50.00%\r\nLeicester\r\n28\r\n49.12%\r\nMiddlesbrough\r\n9\r\n47.37%\r\nWest Brom\r\n18\r\n47.37%\r\nWolves\r\n9\r\n47.37%\r\nBrighton\r\n15\r\n39.47%\r\nSouthampton\r\n22\r\n38.60%\r\nHull\r\n6\r\n31.58%\r\nIn most cases, the model predicts the outcome correctly (see is_correct) with greater than 50% accuracy, although there are also teams for which its accuracy is less than 50%.\r\nConclusion\r\nIn summary, I have created a hierarchical Poisson model to predict scores—and, consequently, game outcomes—for EPL games for the three seasons starting in 2016 and ending in 2018. The model has an training set prediction accuracy of 66.3%. Baath, whose work inspired mine, achieved an accuracy of 56% with his final model.\r\nFuture Work\r\nMy model can certainly be improved. One major flaw of the model is that it does not account for temporal effects, i.e. differences in team strength across seasons. 8 The consequences of this flaw are compounded by the fact that the pool of teams in each EPL season changes. At the end of each season, the three “worst” EPL teams (by win-loss-tie record) are “relegated” to a secondary league, and, in turn, three secondary league teams are “promoted” to the EPL in their place. 9 Consequently, one might say that the estimates of the teams that do not appear in all seasons are exaggerated.\r\nAppendix\r\nCode\r\nSee all relevant R code below.\r\n\r\n\r\nlibrary(tidyverse)\r\n# Data Collection\r\nseasons <- 2016L:2018L\r\n# Reference: https://github.com/jalapic/engsoccerdata/blob/master/R/england_current.R\r\nscrape_epl_data <- function(season = lubridate::year(Sys.Date()) - 1L) {\r\n  s1 <- season %>% str_sub(3, 4) %>% as.integer()\r\n  s2 <- s1 + 1L\r\n  path <- sprintf('http://www.football-data.co.uk/mmz4281/%2d%2d/E0.csv', s1, s2)\r\n  data_raw <- path %>% read_csv()\r\n  data <-\r\n    data_raw %>% \r\n    janitor::clean_names() %>% \r\n    mutate_at(vars(date), ~as.Date(., '%d/%m/%y')) %>% \r\n    select(\r\n      date, \r\n      tm_h = home_team, \r\n      tm_a = away_team,\r\n      g_h = fthg,\r\n      g_a = ftag\r\n    ) %>% \r\n    mutate(\r\n      g_total = g_h + g_a,\r\n      g_diff = g_h - g_a,\r\n      result = \r\n        case_when(\r\n          g_h > g_a ~ 'h', \r\n          g_h < g_a ~ 'a', \r\n          TRUE ~ 't'\r\n        ),\r\n      tm_winner = \r\n        case_when(\r\n          g_h > g_a ~ tm_h, \r\n          g_h < g_a ~ tm_a, \r\n          TRUE ~ NA_character_\r\n        )\r\n    ) %>% \r\n    mutate_at(vars(matches('season|^g_')), as.integer)\r\n}\r\n\r\ndata <-\r\n  tibble(season = seasons) %>% \r\n  mutate(data = map(season, scrape_epl_data)) %>% \r\n  unnest(data)\r\ndata\r\npull2 <- function(data, ...) {\r\n  data %>%\r\n    pull(...) %>% \r\n    as.factor() %>% \r\n    as.integer()\r\n}\r\n\r\ntms <- data %>% distinct(tm_h) %>% arrange(tm_h) %>% pull(tm_h)\r\nn_tm <- tms %>% length()\r\nn_gm <- data %>% nrow()\r\nn_season <- seasons %>% length()\r\n\r\ndata_list <-\r\n  list(\r\n    g_h = data %>% pull(g_h),\r\n    g_a = data %>% pull(g_a),\r\n    tm_h = data %>% pull2(tm_h),\r\n    tm_a = data %>% pull2(tm_a),\r\n    season = data %>% pull2(season),\r\n    n_tm = n_tm,\r\n    n_gm = n_gm,\r\n    n_season = n_season\r\n  )\r\nstr(data_list)\r\nmodel_1 <- glue::glue_collapse('model {\r\n  for(g in 1:n_gm) {\r\n    g_h[g] ~ dpois(lambda_h[tm_h[g], tm_a[g]])\r\n    g_a[g] ~ dpois(lambda_a[tm_h[g], tm_a[g]])\r\n  }\r\n\r\n  for(h in 1:n_tm) {\r\n    for(a in 1:n_tm) {\r\n      lambda_h[h, a] <- exp(baseline_h + (z[h] - z[a]))\r\n      lambda_a[h, a] <- exp(baseline_a + (z[a] - z[h]))\r\n    }\r\n  }\r\n    \r\n  z[1] <- 0 \r\n  for(t in 2:n_tm) {\r\n    z[t] ~ dnorm(z_all, tau_all)\r\n  }\r\n    \r\n  z_all ~ dnorm(0, 0.25)\r\n  tau_all <- 1 / pow(sigma_all, 2)\r\n  sigma_all ~ dunif(0, 2)\r\n  baseline_h ~ dnorm(0, 0.25)\r\n  baseline_a ~ dnorm(0, 0.25)\r\n}')\r\n\r\npath_model_1 <- 'model_1.txt'\r\nwrite_lines(model_1, path_model_1)\r\nif(eval_model_1) {\r\n  # inits_1 <- list(n_tm = data_list$n_tm)\r\n  inits_1 <- NULL\r\n  params_1 <-\r\n    c(\r\n      paste0('baseline', c('_a', '_h')),\r\n      paste0('sigma_all'),\r\n      paste0('z', c('', '_all'))\r\n    )\r\n  \r\n  res_sim_1 <-\r\n    R2OpenBUGS::bugs(\r\n      # debug = TRUE,\r\n      data = data_list,\r\n      inits = inits_1,\r\n      model.file = path_model_1,\r\n      parameters.to.save = params_1,\r\n      DIC = FALSE,\r\n      n.chains = 1,\r\n      n.iter = 10000,\r\n      n.burnin = 1000\r\n    )\r\n}\r\n# Model 1 Interpretation\r\nz_var_lvls <- sprintf('z[%d]', 2:n_tm)\r\nvar_lvls <- c(paste0('baseline', c('_a', '_h')), 'sigma_all', z_var_lvls, 'z_all')\r\nres_sim_summ_1 <-\r\n  res_sim_1$summary %>% \r\n  as_tibble(rownames = 'var') %>% \r\n  # Re-order these.\r\n  mutate_at(vars(var), ~factor(., levels = var_lvls)) %>% \r\n  arrange(var) %>% \r\n  # Then re-coerce var back to its original data type.\r\n  mutate_at(vars(var), as.character)\r\nres_sim_summ_1\r\n\r\ntms_info <-\r\n  tibble(tm = tms) %>% \r\n  mutate(tm_idx = row_number())\r\ntms_info\r\n\r\nres_sim_summ_1_z <-\r\n  bind_rows(\r\n    res_sim_summ_1 %>% \r\n      filter(var == 'z_all') %>% \r\n      mutate(var = 'z[1]') %>% \r\n      mutate(tm_idx = 1L) %>% \r\n      mutate_at(vars(matches('%$')), ~{. - mean}) %>% \r\n      mutate(mean = 0),\r\n    res_sim_summ_1 %>% \r\n      filter(var %>% str_detect('^z\\\\[')) %>% \r\n      mutate(\r\n        tm_idx = \r\n          var %>% \r\n          str_replace_all('(^z\\\\[)([0-9]+)(\\\\]$)', '\\\\2') %>% \r\n          as.integer()\r\n      )\r\n  ) %>% \r\n  left_join(tms_info, by = 'tm_idx') %>% \r\n  select(-tm_idx) %>% \r\n  select(tm, everything()) %>% \r\n  arrange(tm)\r\nres_sim_summ_1_z\r\ntheme_custom <- function(...) {\r\n  theme_light(base_size = 12) +\r\n    theme(\r\n      legend.position = 'bottom',\r\n      legend.title = element_blank(),\r\n      axis.title.x = element_text(hjust = 1),\r\n      axis.title.y = element_text(hjust = 1),\r\n      ...\r\n    )\r\n}\r\n\r\n.lab_subtitle <- 'Seasons 2016-17 - 2018-19'\r\n.visualize_res_sim_summ <- function(data, ...) {\r\n  data %>% \r\n    arrange(-mean) %>% \r\n    mutate_at(vars(tm), ~forcats::fct_reorder(., mean)) %>% \r\n    ggplot() +\r\n    aes(x = tm) +\r\n    geom_pointrange(aes(y = mean, ymin = `2.5%`, ymax = `97.5%`)) +\r\n    theme_custom() +\r\n    coord_flip() +\r\n    labs(\r\n      subtitle = .lab_subtitle ,\r\n      caption = glue::glue(\r\n        'Posterior mean and 95% equitailed credible set depicted.\r\n        {tms[1]} used as \"zero\"-anchor team.'\r\n      ),\r\n      y = NULL\r\n    )\r\n}\r\n\r\nvisualize_res_sim_summ_z <- function(data, ...) {\r\n  data %>%\r\n    .visualize_res_sim_summ() +\r\n    geom_hline(aes(yintercept = 0)) +\r\n    labs(\r\n      title = glue::glue('Model\\'s estimated strength (z)'),\r\n      x = 'Posterior mean of z'\r\n    )\r\n}\r\n\r\nvisualize_res_sim_summ_z_adj <- function(data, ...) {\r\n  data %>%\r\n    .visualize_res_sim_summ() +\r\n    labs(\r\n      title = glue::glue('Model\\'s estimated goals scored per game'),\r\n      x = 'Posterior mean of z transformed to goals'\r\n    )\r\n}\r\n\r\nexport_png <-\r\n  function(x,\r\n           path,\r\n           ...,\r\n           units = 'in',\r\n           width = 7,\r\n           height = 5) {\r\n    ggsave(\r\n      plot = x,\r\n      filename = path,\r\n      units = units,\r\n      width = width,\r\n      height = height,\r\n      ...\r\n    )\r\n  }\r\nn_sim <- 1000\r\npath_preds <- file_path_out('preds_1.rds')\r\neval_preds <- FALSE # !fs::file_exists(path_preds)\r\nif(eval_preds) {\r\n  .baseline_h <- res_sim_summ_1 %>% filter(var == 'baseline_h') %>% pull(mean)\r\n  .baseline_a <- res_sim_summ_1 %>% filter(var == 'baseline_a') %>% pull(mean)\r\n  .extract_tab_max <- function(tab) {\r\n    tab[ which.max(tab)] %>% names() %>% as.integer()\r\n  }\r\n  do_predict <- function(i) {\r\n    data_filt <- data %>% slice(i)\r\n    .tm_h <- data_filt %>% pull(tm_h)\r\n    .tm_a <- data_filt %>% pull(tm_a)\r\n    z_h <- res_sim_summ_1_z %>% filter(tm == .tm_h) %>% pull(mean)\r\n    z_a <- res_sim_summ_1_z %>% filter(tm == .tm_a) %>% pull(mean)\r\n    g_h <- rpois(n_sim, exp(.baseline_h + (z_h - z_a)))\r\n    g_a <- rpois(n_sim, exp(.baseline_a + (z_a - z_h)))\r\n    tab_h <- table(g_h)\r\n    tab_a <- table(g_a)\r\n    result_sign <- sign(g_h - g_a)\r\n    tab_result <- table(result_sign)\r\n    result_mode <- .extract_tab_max(tab_result)\r\n    tibble(\r\n      g_h_mode = .extract_tab_max(tab_h),\r\n      g_a_mode = .extract_tab_max(tab_a),\r\n      result_mode = result_mode,\r\n      g_h_mean = mean(g_h),\r\n      g_a_mean = mean(g_a)\r\n    )\r\n  }\r\n  \r\n  set.seed(42)\r\n  preds <- \r\n    tibble(idx = 1:n_gm) %>% \r\n    mutate(res = map(idx, do_predict)) %>% \r\n    unnest(res)\r\n  preds\r\n}\r\npreds_tidy <- \r\n  preds %>% \r\n  gather(key = 'key', value = 'value', -idx) %>% \r\n  select(idx, key, value)\r\npreds_tidy\r\n\r\n.key_lab_g_stem <- 'Team Goals'\r\n.key_lab_g_h_prefix <- sprintf('Home %s, %%s', .key_lab_g_stem)\r\n.key_lab_g_a_prefix <- sprintf('Away %s, %%s', .key_lab_g_stem)\r\nkeys_info <-\r\n  tribble(\r\n    ~key, ~key_lab,\r\n    'g_h_mode', sprintf(.key_lab_g_h_prefix, 'Mode'),\r\n    'g_a_mode', sprintf(.key_lab_g_a_prefix, 'Mode'),\r\n    'g_h_mean', sprintf(.key_lab_g_h_prefix, 'Mean'),\r\n    'g_a_mean', sprintf(.key_lab_g_a_prefix, 'Mean'),\r\n    'result_mode', 'Result, Mode'\r\n  ) %>% \r\n  mutate(idx = row_number()) %>% \r\n  mutate_at(vars(key_lab), ~forcats::fct_reorder(., idx)) %>% \r\n  select(-idx)\r\nkeys_info\r\n\r\npreds_tidy_aug <-\r\n  preds_tidy %>% \r\n  inner_join(keys_info)\r\npreds_tidy_aug\r\n\r\npreds_aug <-\r\n  preds %>% \r\n  inner_join(data %>% mutate(idx = row_number())) %>% \r\n  mutate_at(\r\n    vars(result_mode),\r\n    ~case_when(\r\n      . == 1 ~ 'h', \r\n      . == -1 ~ 'a', \r\n      . == 0 ~ 't'\r\n    )\r\n  )\r\nconf_mat_tidy <-\r\n  preds_aug %>% \r\n  count(result_mode, result)\r\n\r\nconf_mat_correct <-\r\n  conf_mat_tidy %>% \r\n  group_by(is_correct = result_mode == result) \r\n\r\nconf_mat_correct_summ <-\r\n  conf_mat_correct %>% \r\n  summarise_at(vars(n), ~sum(.)) %>% \r\n  ungroup() %>% \r\n  mutate(frac = n / sum(n))\r\nconf_mat_correct\r\n\r\nconf_mat_correct_h <- conf_mat_correct %>% filter(is_correct, result == 'h')\r\n# conf_mat_correct_t <- conf_mat_correct %>% filter(is_correct, result == 't')\r\nconf_mat_correct_a <- conf_mat_correct %>% filter(is_correct, result == 'a')\r\nconf_mat_correct_summ_yes <- conf_mat_correct_summ %>% filter(is_correct)\r\n\r\nviz_conf_mat <-\r\n  conf_mat_tidy %>%\r\n  mutate(frac = n / sum(n)) %>% \r\n  mutate(n_lab = sprintf('%s (%s)', scales::comma(n), scales::percent(frac))) %>% \r\n  mutate_at(\r\n    vars(matches('result')), \r\n    ~forcats::fct_relevel(., c('h', 'a')) # c('h', 't', 'a'))\r\n  ) %>% \r\n  mutate_at(\r\n    vars(matches('result')), \r\n    ~forcats::fct_recode(., Home = 'h', Away = 'a') # , Tie = 't')\r\n  ) %>% \r\n  ggplot() +\r\n  aes(x = result_mode, y = result) +\r\n  geom_tile(aes(fill = n)) +\r\n  geom_text(aes(label = n_lab), size = 5, fontface = 'bold', color = 'black') +\r\n  # scale_fill_manual(limits = c(0, 0.5)) +\r\n  scale_fill_viridis_c(alpha = 0.5, begin = 0, end = 1, option = 'E') +\r\n  theme_custom() +\r\n  theme(\r\n    legend.position = 'none',\r\n    panel.grid.major = element_blank(),\r\n    panel.grid.minor = element_blank()\r\n  ) +\r\n  labs(\r\n    title = 'Comparison of Predicted and Actual Game Outcomes',\r\n    subtitle = .lab_subtitle,\r\n    x = 'Predicted Result',\r\n    y = 'Actual Result'\r\n  )\r\nviz_conf_mat\r\nviz_g_mode <-\r\n  preds_tidy_aug %>% \r\n  filter(key %>% str_detect('^g.*mode$')) %>% \r\n  ggplot() +\r\n  aes(x = value, fill = key_lab) +\r\n  scale_fill_brewer(palette = 'Set1') +\r\n  geom_bar(position = 'dodge', alpha = 0.8) +\r\n  theme_custom() +\r\n  theme(\r\n    panel.grid.major.x = element_blank()\r\n  ) +\r\n  labs(\r\n    title = 'Simulated Mode of Goals Scored By Home and Away Teams',\r\n    subtitle = .lab_subtitle,\r\n    caption = .lab_caption_n_gm,\r\n    x = 'Goals Scored',\r\n    y = 'Count of Games'\r\n  )\r\nviz_g_mode\r\nviz_g_mean <-\r\n  preds_tidy_aug %>% \r\n  # This is done so that the `aes()` can be defined before data is actually passed into the whole ggplot pipeline.\r\n  filter(row_number() == 0) %>% \r\n  ggplot() +\r\n  aes(x = value, fill = key_lab) +\r\n  scale_fill_brewer(palette = 'Set1') +\r\n  geom_histogram(data = filter(preds_tidy_aug, key == 'g_h_mean'), alpha = 1, binwidth = 0.2) +\r\n  geom_histogram(data = filter(preds_tidy_aug, key == 'g_a_mean'), alpha = 0.5, binwidth = 0.2) +\r\n  theme(\r\n    panel.grid.major.x = element_blank()\r\n  ) +\r\n  theme_custom() +\r\n  labs(\r\n    title = 'Simulated Mean of Goals Scored By Home and Away Teams',\r\n    subtitle = .lab_subtitle ,\r\n    caption = .lab_caption_n_gm,\r\n    x = 'Goals Scored',\r\n    y = 'Count of Games'\r\n  )\r\nviz_g_mean\r\npreds_tidy_res <-\r\n  preds_tidy %>% \r\n  filter(key == 'res_mode') %>% \r\n  mutate_at(\r\n    vars(value),\r\n    list(value_lab = ~case_when(\r\n      . == 1 ~ 'Home Team Wins',\r\n      . == 0 ~ 'Draw',\r\n      . == -1 ~ 'Away Team Wins'\r\n    ))\r\n  ) %>% \r\n  mutate_at(vars(value_lab), ~forcats::fct_reorder(., value))\r\npreds_tidy_res %>% count(value_lab)\r\n\r\nviz_result_mode <-\r\n  preds_tidy %>% \r\n  filter(key == 'result_mode') %>% \r\n  mutate_at(\r\n    vars(value),\r\n    list(value_lab = ~case_when(\r\n      . == 1 ~ 'Home Team Wins',\r\n      . == 0 ~ 'Draw',\r\n      . == -1 ~ 'Away Team Wins'\r\n    ))\r\n  ) %>% \r\n  mutate_at(vars(value_lab), ~forcats::fct_reorder(., value)) %>% \r\n  ggplot() +\r\n  aes(x = value_lab) +\r\n  geom_bar(position = 'dodge') +\r\n  theme_custom() +\r\n  theme(\r\n    panel.grid.major.x = element_blank()\r\n  ) +\r\n  labs(\r\n    title = 'Simulated Result of Games',\r\n    subtitle = .lab_subtitle ,\r\n    caption = .lab_caption_n_gm,\r\n    x = NULL,\r\n    y = 'Count of Games'\r\n  )\r\nviz_result_mode\r\npreds_by_tm <-\r\n  preds_aug %>% \r\n  group_by(tm_h) %>% \r\n  count(is_correct = result_mode == result) %>%\r\n  mutate(frac = n / sum(n)) %>% \r\n  ungroup() %>% \r\n  filter(is_correct) %>% \r\n  arrange(-frac) %>% \r\n  mutate(pct = scales::percent(frac)) %>% \r\n  select(-frac)\r\n\r\n\r\n\r\n\r\nThis is arguably a “bad” assumption. Research has shown that goal rate per minute increases in the last 15 minutes of a game.↩︎\r\nThis may also be perceived to be a questionable assumption. One may argue that a matchup of “styles”—e.g. an aggressive team against another aggressive team—may distort the results from what would otherwise be expected.↩︎\r\nThis approach is arguably too “simplistic”, but it is certainly a valid approach.↩︎\r\nSee this Pinnacle blog post for a discussion of the topic. (Undoubtedly there are many more articles and papers that explore a similar notion.)↩︎\r\nThere are several notable differences with my work compared to that of BÃ¥Ã¥th: (1) I use the OpenBUGS software (and the {R2OpenBUGS} package) instead of JAGS; (2) I evaluate EPL teams instead of La Liga teams, and over a different time period; (3) I use a “tidy” approach (in terms of packages, plotting, coding style, etc.) instead of a more traditional “base R” approach; (4) I implement a modified version of the second of Baath’s three proposed models (notably, using different priors).↩︎\r\nBaath’s work is licensed under the Creative Commons license, which allows for others to adapt the work of another.↩︎\r\nNote that I substitute the baseline home average goal rate with a baseline for away teams, \\(\\text{baseline}_a\\), and I swap the order of the \\(z_j\\) and \\(z_i\\) teams since the relationship is not bi-directional. Also, note that I am careful to distinguish between subscript pair \\(_h\\) and \\(_a\\) for home and away and pair \\(_i\\) and \\(_j\\) for team \\(i\\) and team \\(j\\). The latter pair is independent of the notion of home or away.↩︎\r\nThere are certainly also changes in team strength within seasons, which are even more difficult to model.↩︎\r\nThis explains why there are more than 20 teams in thee data set even though there are only 20 teams in the EPL in a given season.↩︎\r\n",
    "preview": "posts/2019-12-29-bayesian-statistics-english-premier-league/viz_summ_1_z_adj.png",
    "last_modified": "2021-01-11T09:46:41-06:00",
    "input_file": {},
    "preview_width": 2100,
    "preview_height": 1500
  },
  {
    "path": "posts/2019-07-07-cheat-sheet-rmarkdown/",
    "title": "Making a Cheat Sheet with Rmarkdown",
    "description": "Making a Cheat Sheet with Rmarkdown",
    "author": [
      {
        "name": "Tony ElHabr",
        "url": "https://twitter.com/TonyElHabr"
      }
    ],
    "date": "2019-07-07",
    "categories": [
      "r",
      "rmarkdown",
      "latex"
    ],
    "contents": "\r\n\r\nContents\r\nThe Template\r\nUsage\r\nWhy This Way?\r\nWhat Works for Me May Not Work For You\r\n\r\nUnfortunately, I haven’t had as much time to make blog posts in the past year or so. I started taking classes as part of Georgia Tech’s Online Master of Science in Analytics (OMSA) program last summer (2018) while continuing to work full-time, so extra time to code and write hasn’t been abundant for me.\r\nAnyways, I figured I would share one neat thing I learned as a consequence of taking classes—writing compact “cheat sheets” with {rmarkdown}. 1\r\nWriting with {rmarkdown} is fairly straightforward—mostly thanks to an abundance of freely available learning resources, like the R Markdown: The Definitive Guide—and using CSS to customize your Rmarkdown output to your liking is not too difficult either. (By the way, huge shout-out to Yihui Xie and everyone else who has contributed to the development of the {rmarkdown} package.) My objective was to make an extremely compact PDF that minimizes all white space 2. Despite my knowledge of CSS, I had a hard time getting an output that I liked purely from CSS, so I looked online to see if I could find some good LaTex templates. (After all, I would be knitting the Rmarkdown document to PDF, and LaTex would be incorporated via the equations on the cheat sheet.) Some templates I found worked fine but weren’t completely to my liking. 3\r\nIn my search for an “ideal” template, I stumbled upon a small tidbit in the very last portion of the PDF chapter of the R Markdown book stating “You can also replace the underlying pandoc template using the template option”.\r\nAt first, I was a bit intimidated by the idea of writing my own template. (“I have to write my own template from scratch using a framework (LaTeX) that I’ve hardly even touched before now!”) But alas, the task became less intimidating when I realized that I could use the tried-and-true method of copying-pasting-modifying from Stack Overflow!\r\nThe Template\r\nUsing the template from this Stack Overflow post 4 as a basis, I ended up creating a relatively minimal template. For the curious reader, see this GitHub repo, for the latest version of my template. It also includes an example cheat sheet.\r\n\r\nThe “gist” of my template is shown below.\r\n\r\n% Packages and preamble\r\n% ...\r\n\r\n\\begin{document}\r\n\r\n\\begin{multicols*}{4}\r\n\r\n$body$\r\n\r\n\\end{multicols*}\r\n\r\n\\end{document}\r\n\r\nThe key for me was to understand how pandoc variables like $body$ are used as placeholders for user-supplied content. (I know I haven’t mentioned pandoc up to this point, but suffice it to say that it—along with the R package {knitr}—are what power the {rmarkdown} package.)\r\nThe multicols command shown in the snippet above is also noteworthy. This LaTex command provides the functionality for I wanted most for my cheat sheet—multiple columns of content! I should point out that there are in_header, before_body, and after_body YAML options for customizing PDF output with {rmarkdown}. 5\r\nThese options are probably sufficient for most people’s customization needs (so using a custom template would not be necessary). But for me personally, the appeal of having “complete” control of my output by using a template convinced me to forego these options. 6\r\nUsage\r\nSo, exactly how do you use a custom template with {rmarkdown}? It’s as simple as specifying the path to your template file with the template option in the YAML header of your Rmarkdown document. 7\r\nWhy This Way?\r\nBefore I was using Rstudio and {rmarkdown} to write my cheat sheets, I tried out a couple of LaTex editors 8. First, I tried the very popular Overleaf. It is well known and commonly used because it is web-based, allows the user to collaborate in real-time, and provides real-time previewing 9. However, there was just something that felt “clunky” about the editor, and the ambiguity over package versions and usage was bothersome to me. 10 The other editor I tried for some time was TeXworks (with the pdftex distribution) Using the “Typset” command to generate my PDF output on an ad-hoc basis seemed to me to be a satisfactory workflow, but, among other things, I felt limited by the customization offered by TeXworks. 11\r\nAnd so I turned to Rstudio and {rmarkdown} and didn’t look back. While learning how to create a custom template was a (minor) inconvenience, it has paid off in a number of ways:\r\nI can use a familiar editor—Rstudio.\r\nI can use a familiar workflow—writing in an Rmarkdown document and knitting to create my desired output.\r\nBecause I’m using {rmarkdown}, I can use {rmarkdown} functionality that is not available when solely writing in LaTex.\r\nThis last point is huge. The whole world of markdown syntax is valid! For example, I can add emphasis to text with markdown’s ** and __ tokens (instead of LaTex’s more “verbose” syntax); I can use # to define section headers (which I just think is super “elegant”); and I can use HTML comments to comments out multiple lines of text. (Note that native LaTex only has a single-line comment token—%. 12) Additionally, beyond just the markdown functionality, I can include R code thanks to added layer of functionality offered by {rmarkdown}.\r\nThe one big thing that I feel like I “sacrificed” by moving to Rstudio and {rmarkdown} is the live preview feature that comes with Overleaf (and can be emulated with some configuration in other LaTex editors). Nonetheless, I feel like I get a reasonable facsimile of this feature with Rstudio’s functionality for inline previews of equations. 13 Below are examples of the preview capabilities for both single- and multi-line equations.\r\nA single-line equation previewA multi-line equation previewWhat Works for Me May Not Work For You\r\nAlthough what I’ve described in this post has been working well for me—and I’d encourage others to try it out—I don’t claim it to be the “best” solution for all of your cheat sheet needs. 14 If you’ve got a workflow that works for you, that’s great! Keep using it! Be pragmatic.\r\nFor those unfamiliar with the concept of a cheat sheet, there’s no malice in it, despite what the moniker implies. From my experience, it is relatively common for teachers to let students use self-created note sheets (i.e. cheat sheets) for aid with taking exams.↩︎\r\nin order to maximize the amount of space used for content, of course↩︎\r\nOne of the ones that I really liked was this one. However, it’s a bit more complex than I wanted. (This one implements a “structure” in which one “main” tex file references several others with the \\input Latex command.)↩︎\r\nwhich was super helpful for a LaTex noob like me because it has comments explaining what specific lines/sections are doing↩︎\r\nSee the PDF chapter of the R Markdown book for some guidance with these.↩︎\r\nI’m sure I could create a perfectly fine cheat sheet using just these options, or, even re-create the output that I have achieved with my template.↩︎\r\nYou can specify other options as well, such as keep_latex: true for an alternative LaTex engine with latex_engine.↩︎\r\nand there are lots of them out there↩︎\r\nThe live preview feature is probably my favorite of all.↩︎\r\nOthers may view the hands-off approach to package management as an advantage of using Overleaf.↩︎\r\nPerhaps this is the fault of my own. Perhaps all the customization that I would like exists and I just have not discovered how to enable it.↩︎\r\nI realize that you can define custom commands or use a package to create multi-line comments in LaTex, but that ruins the point that I’m trying to make.↩︎\r\nSee the “Show equation and image previews” option in Tools > Global Options… > R Markdown.↩︎\r\nI wouldn’t be surprised if I find a better workflow for myself in the future.\r\n\r\n↩︎\r\n",
    "preview": "posts/2019-07-07-cheat-sheet-rmarkdown/cheat-sheet-example.png",
    "last_modified": "2021-01-11T11:34:43-06:00",
    "input_file": "cheat-sheet-rmarkdown.utf8.md",
    "preview_width": 654,
    "preview_height": 925
  },
  {
    "path": "posts/2019-06-29-text-parsing-analysis-periodic-report/",
    "title": "Text Parsing and Text Analysis of a Periodic Report (with R)",
    "description": "Text Parsing and Text Analysis of a Periodic Report (with R)",
    "author": [
      {
        "name": "Tony ElHabr",
        "url": "https://twitter.com/TonyElHabr"
      }
    ],
    "date": "2019-06-29",
    "categories": [
      "r",
      "tidytext",
      "ggplot"
    ],
    "contents": "\r\n\r\nContents\r\nSome Context\r\nA Brief Outline of the “Process”\r\nThe Analysis\r\nTable of Contents (TOC)\r\nSentences\r\nWords\r\n\r\nThe End\r\n\r\nSome Context\r\nThose of you non-academia folk who work in industry (like me) are probably conscious of any/all periodic reports that an independent entity publishes for your company’s industry. For example, in the insurance industry in the United States, the Federal Insurance Office of the U.S. Department of the Treasury publishes several reports on an annual basis discussing the industry at large, like this past year’s Annual Report on the Insurance Industry. (Admittedly, these kinds of reports are not always the most interesting things to read, but they are (usually) very informative.)\r\nThe same goes for the electricity grid and markets operated by the Electric Reliability Council of Texas (ERCOT) in Texas (which just so happens to be particularly relevant to me). Potomac Economics publishes an annual report “providing an independent assessment of the competitive performance and operational efficiency of the market” operated by ERCOT. This report tends to be pretty long—over 160 pages in every reports since 2016. A relatively large amount of the content is replication of language, figures, and tables from the prior years’ report, substituting and updating numbers from the past year. 1 As an annual reader of said report, I wish it were easier to “parse out” the most important things from a given year’s report. 2\r\nWith that in mind, I thought I would take a shot at using text analysis to compare Potomac Economics’ annual reports on ERCOT for three years—2016, 2017, and 2018—to, among other things, identify the most “unique” things in each report. This kind of analysis can enhance one’s understanding of current grid and market trends, as well as make one aware of things to look out for in the future.\r\nA Brief Outline of the “Process”\r\nWhile I initially planned on doing some kind of code tutorial with this project (primarily to demonstrate techniques for parsing and cleaning PDF text with R), I found that the code became more complex than I would have liked 3. (Let’s just say that regular expressions were my best friend.) Instead, I decided to focus this post the visuals I created, providing some brief commentary where needed.\r\nNonetheless, I think a high-level description of my “process” may be useful to the reader, as I think it is probably generalizable to any project of this likeness (i.e. text analysis of similarly structured documents). (For those who are interested in the code, it can all be found in this GitHub repo.) My approach (using R, of course can be simplified to the following set of steps.\r\nDownload the reports to a local directory and create a data frame with the year and file location of the report.\r\nImport the raw text for each report to create a singular data frame with nested data frames storing the text for each year’s report.\r\n“Unnest” the singular data frame to create a “long” data frame where each row represents a page in the reports.\r\nSplit this long data frame (with pages as observations) into two data frames, one for the table of contents (TOC) for each report and another for the body of each report.\r\nClean the two data frames (for TOC and body content) separately.\r\nCreate “child” data frames as needed for analysis, and make plots for key insights from this analysis.\r\nFrom this breakdown of the steps, it is evident that the effort that goes into the data pre-processing (i.e. steps 1 through 5) makes up most of the work! What most people perceive to be “data analysis” is all in step 6. In this case, the saying about “80% of data science is really data cleaning” could not be any truer.\r\nThe Analysis\r\nSo, what exactly does this report look like? Well, you could always open up one of the reports yourself and peruse the 160+ pages 4, but maybe the following screenshot of the 2018 report can provide some visual context. (If for nothing else, I thought this would be fun to look at.) I borrowed some code that data visualization phenom Nathan Yau demonstrated in a short write-up at his awesome website FlowingData.\r\n\r\nYou can really get an idea of the vast amount of charts and tables that make up each one of these reports just from this one figure!\r\nTable of Contents (TOC)\r\nNext, let’s begin to shape out this initial holistic perspective of the reports with some analysis of the table of contents (TOC). This may seem trivial, but I assure you that it’s not! With a large document like this, we really ought to have a solid understanding of the content that the document discusses.\r\nEach document’s TOC is broken down into a couple of sections, including:\r\nAn outline for the executive summary (on the first page of the TOC);\r\nAn outline of the first- and second-level sections of the body of the document (also starting on the first page of the TOC);\r\nA list of figures (starting on the second page of the TOC);\r\nA list of tables (on the fourth page).\r\nScreenshots of parts of the TOC of the 2018 report are shown below.\r\n\r\n\r\n\r\nA first question we might ask is “How do (counts of) the lists of figures and tables correspond to the sections of the text?” (For the sake of readability, I’ve truncated some of the section labels, e.g. “Review of Real-Time Market Outcomes” was truncated to just “RTM”, which is an abbreviation for Real-Time Market.)\r\n\r\nSo we see that the Real-Time Market (RTM) and Day-Ahead Market (DAM) sections seem to make a larger-than-equal share of the reports in terms of simple counts of figures and tables. We might hypothesize that these things are arguably the “easiest” things to track in a graphical or quantitative manner among the many aspects of electricity markets and grid operations. Conversely, we see that the Analysis section (truncated from “Analysis of Competitive Performance”) leverages plots and tables the least. We might say that this supports our hypothesis that, in a few words, may be stated as “easy-to-quantify topics have more figures and tables”. The section labels “Analysis” (shortend from “Analysis of Competitive Performance” for visualization purposes) suggests that its content is “deeper” in nature, and that its may not be quite as easy to illustrate via figures and tables.\r\nOur initial hypothesis—that easy-to-quantify topics have more figures and tables—seems reasonable enough, but is it just a direct consequence of the sections having more pages? We can plot the number of pages per section against the count of sections to help us answer this question.\r\n\r\nSo it seems that those sections having more pages do NOT necessarily have more figures and tables. So our hypothesis still seems reasonable.\r\nYou might have noticed that the first plot (the “treemap”) only showed data for the 2018 report. I didn’t deem it necessary/helpful to make the same plot for each of the three reports from 2016 through 2018 because, as it turns out, the TOC of the three reports are nearly identical in composition! (Really, this is probably unsurprising.) That is, they have identical—or near identical—names and indexes for sections, figures, and tables. From an analysis point of view, this is good–the structure of the three reports facilitates direct comparison.\r\nBut note that I say that the TOCs as nearly identical, not exactly identical. What exactly are the differences between the three? More specifically, we might be curious to know which figures and tables were only in one of the three reports.\r\n\r\nAha! We see that the 2016 and 2018 reports had more than a handful of figures and tables that were unique to those reports. The table below lists exactly which figures and tables those are.\r\nYear\r\nSection\r\nType\r\nLabel\r\n2016\r\nRTM\r\nfigure\r\nimplied heat rate duration curve top 2 percent of hours\r\n2016\r\nRTM\r\nfigure\r\naggregated peak hour generation offer stack\r\n2016\r\nRTM\r\nfigure\r\nload, reserves and prices in august\r\n2016\r\nSupply/Demand\r\nfigure\r\nload duration curve top five percent of hours\r\n2016\r\nSupply/Demand\r\nfigure\r\nhistoric coal generation and capacity factor\r\n2016\r\nSupply/Demand\r\nfigure\r\ntop and bottom ten percent of net load\r\n2016\r\nReliability\r\nfigure\r\nfrequency of reliability unit commitments\r\n2016\r\nReliability\r\nfigure\r\naverage on-line summer reserves\r\n2016\r\nReliability\r\nfigure\r\npotential for combined cycle capacity available to ruc in houston\r\n2016\r\nAnalysis\r\nfigure\r\nsurplus capacity\r\n2016\r\nRTM\r\ntable\r\n15-minute price changes as a percentage of annual average prices\r\n2016\r\nCongestion\r\ntable\r\nirresolvable elements\r\n2017\r\nSupply/Demand\r\nfigure\r\nload duration curve top five percent of hours with highest load\r\n2017\r\nSupply/Demand\r\nfigure\r\nenergy transacted across dc ties in august\r\n2018\r\nRTM\r\nfigure\r\nercot rena analysis\r\n2018\r\nRTM\r\nfigure\r\naverage real-time energy price spikes\r\n2018\r\nRTM\r\nfigure\r\nmonthly load exposure\r\n2018\r\nDAM\r\nfigure\r\ndaily collateral\r\n2018\r\nDAM\r\nfigure\r\naverage costs of procured sasm ancillary services\r\n2018\r\nDAM\r\nfigure\r\nercot-wide net ancillary service shortages\r\n2018\r\nDAM\r\nfigure\r\nqse-portfolio net ancillary service shortages\r\n2018\r\nCongestion\r\nfigure\r\n[year] crr auction revenue\r\n2018\r\nSupply/Demand\r\nfigure\r\nload duration curve top 5% of hours with highest load\r\n2018\r\nSupply/Demand\r\nfigure\r\nannual energy transacted across dc ties\r\n2018\r\nReliability\r\nfigure\r\ncapacity commitment timing july and august hour ending 17\r\n2018\r\nReliability\r\nfigure\r\nreal-time to cop comparisons for renewable capacity\r\n2018\r\nReliability\r\nfigure\r\nreal-time to cop comparisons for thermal capacity\r\n2018\r\nReliability\r\nfigure\r\nstandard deviations of real-time to cop capacity differences\r\n2018\r\nResource Adequacy\r\nfigure\r\nwest zone net revenues\r\n2018\r\nResource Adequacy\r\nfigure\r\nnet revenues by generation resource type\r\n2018\r\nAnalysis\r\nfigure\r\nderating, planned outages and forced outages\r\n2018\r\nReliability\r\ntable\r\nruc settlement\r\nOk, enough about the TOC. Let’s see what kind of things we can learn about the text.\r\nSentences\r\nWe saw that some sections have many more figures and tables than others and that this does not necessarily correlate with the number of pages in the section. Is there some kind of correlation with the number of sentences of text in each section?\r\n\r\nIt may (or may not) be surprising to find a lack of a relationship here. Given our previous finding that the number of figures and tables and the number of pages in a given section are not really related. 5\r\nNext, I think it is interesting to look at how the counts of sentences per section has changed over time.\r\n\r\nThe first thing we might notice from the plot is that the number of sentences has increased across all sections from their totals in 2016. Ok, so maybe that’s not so interesting—I think it’s reasonable to assume that an annual report like this incrementally adds on its “foundation” from the prior year(s).\r\nPerhaps the most interesting that we might observe from this graph is the “leaps” in the sentence counts from 2017 to 2018 for the Reliability and Resource Adequacy sections. One might draw a connection between this and what we observed earlier when looking at the figures and tables that were unique to a single report. There were more than a handful of observations for Resource Adequacy and Reliability (2 and 5 respectively) exclusive to the 2018 report.\r\nA final takeaway that I have from this chart is the “evenness” of the counts across the sections (which wasn’t quite as obvious in the previous plot depicting sentence counts). The difference between the maximum and the minimum number of sentences per section in a given year is always below 50. Personally, I might have expected greater variation. Either way, it doesn’t really say anything about the “goodness” of the content; this is just something—the count of sentences in a section of a long document—for which I don’t really have a strong prior knowledge. 6\r\nOk, so the prior plot wasn’t so complex, so let’s now look at something more complicated and which deserves some explanation.\r\nOne of the things that I really wanted to investigate when I started this analysis was “text similarity”—just how much of each report is “boiler-plate, copy-paste” text? There are lots of ways of going about quantifying this. (Just do an Internet search for Natural Language Processing (NLP) and word embeddings and see what kind of rabbit hole that takes you down.) I decided to use cosine similarity 7 of sentences. 8\r\nTo provide a kind of “baseline” expectation of what these cosine similarity values might be, see the table below. It provides a handful of simple examples of the cosine similarity for singular strings of characters. 9\r\nCase\r\nDescription\r\nString 1\r\nString 2\r\nCosine Similarity\r\n1\r\nIdentical strings.\r\nabcde\r\nabcde\r\n1.00\r\n2\r\nOne different character (“z” in String 2 instead of “a”).\r\nabcde\r\nzbcde\r\n0.80\r\n3\r\nTwo different characters (“z” and “y” in String 2 instead of “a” and “b”).\r\nabcde\r\nzycde\r\n0.60\r\n4\r\nAll different characters.\r\nabcde\r\nfghij\r\n0.00\r\n5\r\nDifferent ordering of characters, but identical characters.\r\nabcde\r\nbaecd\r\n1.00\r\n6\r\nRepeated characters (“a” in String 2), one-character difference in string lengths.\r\nabcde\r\naabcde\r\n0.95\r\n7\r\nRepeated characters (“a” twice in String 2), two-character difference in string lengths.\r\nabcde\r\naaabcde\r\n0.87\r\n8\r\nSame characters, one additional character (“z” in String 2) in one string.\r\nabcde\r\nabcdef\r\n0.91\r\n9\r\nSame characters, one additional character (“e” in String 1) in one string.\r\nabcde\r\nabcd\r\n0.89\r\nCases 2 and 3 in the table above are probably the most illustrative of the cosine similarity calculation. In case 2, a one-character difference in two strings having five characters total results in a value of 0.8. (i.e. Four of five characters matched.) In case 3, a two-character difference (given the same setup) results in a value of 0.6. (i.e. Three of five characters matched.)\r\nNote that the cosine similarity calculation is identical for different types of text tokens (i.e. sentences, paragraphs, etc.). In general, the calculated values are likely to be smaller for longer tokens.\r\nOk, so given the above examples and explanation, we now have some context for understanding (and appreciating) the high degree of sentence similarity demonstrated across the reports, as illustrated in the figure below.\r\n\r\nIf you have read the reports, you’ll realize that there are lots of “repeated” sentences across the documents. For example, take the description of the first figure in 2018: “Figure 1 summarizes changes in energy prices and other market costs by showing the all-in price of electricity, which is a measure of the total cost of serving load in ERCOT for 2016 through 2018.” The “same” sentence in the 2017 report is “Figure 1 summarizes changes in energy prices and other market costs by showing the all-in price of electricity, which is a measure of the total cost of serving load in ERCOT for 2015 through 2017.” Just by inspection, you can tell that these two sentences would have a cosine similarity almost equal to 1. In fact, I did some extra text-processing—most notably, replacing year and months with generic labels, e.g. “[year]” and “[month]”—that would make these two sentences appear exactly identical (and, consequently, have a cosine similarity of exactly 1). This whole effort to quantify of sentence similarity was probably the most interesting thing to me out of this entire analysis! 10\r\nI think that’s enough about sentences. Let’s next explore what we might learn from just the words.\r\nWords\r\nOne of the best ways to gauge “importance” of words (or any kind of text token) across multiple documents is term-frequency, inverse-document-frequency (TF-IDF). 11\r\nFirst, let’s use TFIDF to identify which sections have the most “unique” words (aggregating across the three reports).\r\n\r\nSo we see that the Analysis section appears to be the most unique from this perspective. This deduction can be interpreted as an extension of the hypothesis developed earlier—that easy-to-quantify topics have more figures and tables. The extension of this notion can be stated explicitly as “easy-to-quantify topics” have less unique words.\r\nWhat exactly are some of the words that were identified as the most unique?\r\n\r\nThe “chatter” plot 12 above depicts the most unique words identified by TFIDF (after applying common text processing techniques such as “stemming” and dropping “stop words”). Several of the words shown happen to be words associated with sources of high electric transmission congestion 13 in the Texas grid during the year for the which the report was made. This set of words could be potentially leveraged as a starting point for an ambitious reader who is curious to learn more about the Texas electricity grid.\r\nThe End\r\nI had a really fun time exploring this topic. I encourage any readers to do something similar with periodic or standardized reports that are relevant to you in some way. If they are boring to you (yet you must read them for whatever reason), then a text analysis like that demonstrated here can really spark some life into your consumption of the report!\r\n\r\nThis is not a knock on the report whatsoever—annual reports will inevitably have redundancy like this! In fact, I really do enjoy the report. The explanations of the various (and sometimes complex) aspects of the electric reliability and market operation are fantastic.↩︎\r\nThe executive summary section at the beginning of each report actually does a very good job of this already, but I was curious if we could identify “highlights” from a given year in a more quantitative/rigorous manner.↩︎\r\nNot to say that it is extremely complex, but it’s not exactly trivial.↩︎\r\nThe 2016 report has 160 pages total, and the 2017 and 2018 reports are even longer, so we can say 160 pages is a lower bound for our purposes. These totals include the title page, blank pages, and the table of contents, so its an overestimation of the actual content presented in the report.↩︎\r\nA similar plot could have been made for the counts of figures and tables, but, as I hinted at before, doing so was would have been trivial since those totals weren’t much different across the three reports. (That’s why it was more interesting to look at the differences in the figures and tables included in the reports.)↩︎\r\nThat’s the cool thing about plotting this kind of data—you gain an understanding of something that you wouldn’t have known otherwise, which often invites further questions and insight. This is true of data visualization in general↩︎\r\nalso employing normalization and penalization↩︎\r\nI might have instead tried using Jaccard Similarity, word mover’s distance, or one of the several others described eloquently in this blog post; and, furthermore, I could have used other forms of text tokens, such as words (more granular) or paragraphs (less granular).↩︎\r\nThese calculations employ the {tidystringdist} package, written by the one-and-only Colin Fay.↩︎\r\nIf nothing else, this part of the analysis was a great opportunity to experiment with the wonderful {text2vec} package.↩︎\r\nIf you’re looking to do text analysis using R, then I highly recommend reading through the wonderful Tidy Text Mining with R book by David Robinson and Julia Silge↩︎\r\nwhich, in my opinion, is a better format for illustrating word importance compared to a word cloud↩︎\r\nThis concept is analogous to traffic congestion, but for electricity.↩︎\r\n",
    "preview": "posts/2019-06-29-text-parsing-analysis-periodic-report/viz_words_section_tfidf.PNG",
    "last_modified": "2021-01-11T11:15:11-06:00",
    "input_file": {},
    "preview_width": 3600,
    "preview_height": 2400
  },
  {
    "path": "posts/2019-01-27-rstudio-conf-2019-summary/",
    "title": "Summarizing rstudio::conf 2019 Summaries with Tidy Text Techniques",
    "description": "Summarizing rstudio::conf 2019 Summaries with Tidy Text Techniques",
    "author": [
      {
        "name": "Tony ElHabr",
        "url": "https://twitter.com/TonyElHabr"
      }
    ],
    "date": "2019-01-27",
    "categories": [
      "r",
      "rstudioconf",
      "tidytext"
    ],
    "contents": "\r\nTo be honest, I planned on writing a review of this past weekend’s rstudio::conf 2019, but several other people have already done a great job of doing that—just check out Karl Broman’s aggregation of reviews at the bottom of the page here! (More on this in a second.) In short, my thoughts on the whole experience are captured perfectly by Nick Strayer’s tweet the day after the conference ended.\r\n\r\nThing I learned at #Rstudioconf that sticks out to me the most: it turns out that this group of people who are so kind and welcoming online are also kind and welcoming in real life. More than any library or api that’s what makes #rstats great.— Nick Strayer (@NicholasStrayer) January 19, 2019\r\n\r\n\r\nAnyways, I figured that this was the perfect opportunity to do some “tidy text analysis”! Why not extract the text from the reviews of others—linked in Karl’s repo—and make “my own” summary of the event? Plotting word frequencies and sentiments, while not exactly “cutting edge” compared to robust natural language processing techniques, is perfect for getting a nice, simple overview of the conference. (I have applied some of the techniques described by David Robinson and Julia Silge in their Tidy Text Mining with R book more than once in the past, but not recently, and not on this topic.)\r\nMoreover, after reading Bob Rudis’s recent post and discovering his work-in-progress \" {curl} +{httr} + {rvest}\" package called {reapr}, I realized that the work of cleaning the HTML and text for each person’s blog post would not be so bad. In fact, it turned out to be as easy as reapr::reap_url() %>% reapr::mill() (with only a little bit of extra work :smile:)!\r\nAfter trying a couple of different approaches (e.g. bigrams, topic modeling, etc.) and experimenting with some different visualizations, I ended up making the two plots below. (To the interested reader, I’ve included all of the code at the bottom of this post.) From the second plot—where positive sentiment heavily outweighs negative sentiment—one thing is clear: the R community is super supportive and positive, just as Nick alluded to in his tweet.\r\n\r\n\r\nI’ve said it before and I’ll happily said it again: thanks again to David Robinson and Julia Silge for their great Tidy Text Mining with R book and everything else that they’ve done for the community! The techniques that they’ve documented and shared are super helpful for doing a quick exploration just like this.\r\n\r\n\r\n\r\n",
    "preview": "posts/2019-01-27-rstudio-conf-2019-summary/headliner.jpg",
    "last_modified": "2021-01-11T11:15:24-06:00",
    "input_file": {}
  },
  {
    "path": "posts/2019-01-20-making-first-pull-request/",
    "title": "A Newbie's Guide to Making A Pull Request (for an R package)",
    "description": "A Newbie's Guide to Making A Pull Request (for an R package)",
    "author": [
      {
        "name": "Tony ElHabr",
        "url": "https://twitter.com/TonyElHabr"
      }
    ],
    "date": "2019-01-20",
    "categories": [
      "r",
      "git",
      "tidyverse",
      "rstudioconf"
    ],
    "contents": "\r\n\r\nContents\r\nA “Minimal”, Step-by-Step Breakdown of the Process\r\nAdditional Notes\r\n\r\nMy Experience\r\nParting Thoughts\r\nAdditional Resources\r\n\r\n\r\nUPDATE (2019-07-07): Check out this {usethis} article for a more automated way of doing a pull request.\r\nI had the wonderful opportunity to participate in the {tidyverse} Developer Day the day after rstudio::conf2019 officially wrapped up. 1 One of the objectives of the event was to encourage open-source contributor newbies (like me :smile:) to gain some experience, namely through submitting pull requests to address issues with {tidyverse} packages.\r\n\r\nHaving only ever worked with my own packages/repos before, I found this was to be perfect opportunity to “get my feet wet”!\r\nA “Minimal”, Step-by-Step Breakdown of the Process\r\nTo the reader who is interested in nothing else other than the “minimum” set of “required” steps of making a pull request 2, I’ve outlined the steps that I took below (with additional commentary provided afterwards and/or with footnotes). I use double brackets {{/}} to indicate names/variables that should be filled in by you for your particular use case. More specifically,\r\n{{repo}} refers to the GitHub repository (duh :stuck_out_tongue:);\r\n{{user}} refers to your GitHub username;\r\n{{owner}} refers to the owner of the GitHub repo;\r\n{{branch-name}} refers to the name that you give your branch for your pull request (double duh :stuck_out_tongue: :stuck_out_tongue:); 3 4 and\r\n{{message}} refers to the commit message that you make with your pull request changes (duh x3 :stuck_out_tongue: :stuck_out_tongue: :stuck_out_tongue:).\r\nFork the repo on GitHub.\r\nAt https://github.com/{{owner}}/{{repo}}.git (i.e. the repo’s GitHub page), select the “Fork” button. Wait for GitHub to generate the fork and for your browser to navigate you to https://github.com/{{user}}/{{repo}}.git (i.e. your copy of the repo on GitHub). 5\r\nPrepare your local environment to make the pull request.\r\nUsing the Git Bash terminal,\r\ngit clone https://github.com/{{user}}/{{repo}}.git\r\ncd {{repo}}\r\ngit remote add upstream https://github.com/{{owner}}/{{repo}}.git 6\r\ngit pull upstream master --ff-only 7\r\ngit branch {{branch-name}} 8\r\ngit checkout {{branch-name}}\r\n\r\nMake the changes (locally) for the pull request.\r\nReview the changes (locally) and push.\r\nUsing the Git Bash terminal,\r\ngit status\r\ngit add .\r\ngit commit -m \"{{message}}\"\r\ngit push -u origin {{branch-name}} 9\r\n\r\nFinalize the pull request on GitHub.\r\nAt https://github.com/{{user}}/{{repo}}.git, select the “New pull request” button, then “Create pull request” on the subsequent page, and then “Create pull request” again (on the page that allows you to add comments). 10\r\nNote that if your pull request is not accepted upon the first commit, then you’ll need to repeat steps 3 and 4. And, instead of repeating step 5, you should make a comment on the existing pull request on GitHub. (Assuming that the pull request reviewer left you some comments, then you should just reply to theirs.)\r\nAdditional Notes\r\nThere are a couple of extra/alternative things you should consider doing in this process (although these are completely optional).\r\nAfter cd’ing into the repo, a good “sanity check” to perform is a git remote -v to verify that you are on (master) branch of the forked repo. You should see the following when running this command.\r\n\r\norigin https://github.com/{{user}}/{{repo}}.git (fetch)\r\norigin https://github.com/{{user}}/{{repo}}.git (push)\r\n\r\nThen, you could run this command again after the git remote add upstream https://github.com/{{owner}}/{{repo}}.git command and verify that you see the following.\r\n\r\norigin https://github.com/{{user}}/{{repo}}.git (fetch)\r\norigin https://github.com/{{user}}/{{repo}}.git (push)\r\nupstream https://github.com/{{owner}}/{{repo}}.git (fetch)\r\nupstream https://github.com/{{owner}}/{{repo}}.git (push)\r\n\r\nRegarding the git pull upstream  --ff-only step, it’s actually “safer” to break this step up into two: (1) git fetch upstream, followed by\r\ngit merge upstream/master. Nonetheless, (I believe that) the git pull command shown here should achieve the same result.\r\nFollowing the git pull upstream  --ff-only step, you might also want to do a git push to really ensure that your master branch is “in sync” with the original repo. Nonetheless, this is completely optional, especially if you’re working exclusively on a branch. This is discussed by Jenny Bryan in the “Get upstream changes for a fork” chapter in her [Happy Git and GitHub for the useR book] (https://happygitwithr.com) (which, I should note, I used as a guide throughout this process).\r\nIn the last “Create pull request” page, where you have the option to write a comment, it’s useful to write something like “Fixes #{{#}}”, where {{#}} is the number of the issue. GitHub has a nice feature that can link the pull request to the issue that it attempts to fix (assuming that the pull request is directed towards a specific issue).\r\nMy Experience\r\nThe RStudio staff sort of gave us a head-start by tagging some issues beforehand. (Many of these were supposed to be relatively straightforward to resolve.) Trying to avoid something too difficult and not wanting to be stuck in “indecision purgatory”, I quickly jumped on one that seemed simple enough—{dplyr}’s issue 4071: \"Add examples for cumall(). Note that I say that it “seemed simple enough”; in reality, it would go on to take a little bit more effort than I had originally imagined it would (which seems to be true of anything in software development :grimacing:).\r\nFirst, it took me a minute or so to find out where I would need to add the documentation examples. Normally, assuming one is following the “typical” {devtools}/{Roxygen2} workflow for package documentation, one would add comments in the same file as the functions that are being documented. In this case, however, the documentation for cumall() (and also that for the the cumany() and cummean() functions, which were also without examples), is generated programmatically in {dplyr}’s RcppExports.R file from a cpp (i.e. C++) file—window.cpp.\r\nNext was the actual “heart” of the process—creating the example(s). As a strong advocate of the “copy-and-paste-from-StackOverflow” workflow :smile: (as well as the “changing-things-and-seeing-what-works” workflow), I searched some of the existing examples and found that the “ranking” documentation group (in rank.R) provided a good starting point. I didn’t take too long to come up with some basic examples. (See the first commit on my pull request, or, for all of the details, the whole history of the request.) Then, after running a devtools::check() to regenerate the documentation, rebuild the package (and verify that I didn’t “break” anything), etc., I submitted the pull request on GitHub.\r\n\r\nI assumed (perhaps naively) that my pull request would be accepted without question. However, that was without considering the fact that it was going to be reviewed by none other than Hadley Wickham himself. Hadley is certainly a meticulous person, so the changes would not get approved without some level of well-intentioned, critical examination. And, as it turns out, the request was not approved immediately.\r\nHadley identified some points of improvement and submitted some comments, obligating me to address his feedback. Although failure to gain immediate acceptance for the pull request might be discouraging, this was certainly not the case for me (and I hope that it is not for anyone else, especially first-timers). My mindset was to treat the feedback as an opportunity for improvement, which I’m always up for. Moreover, Hadley’s supportive statements and tone provided additional motivation for me to continue working toward something better. So, even though I’m mostly writing from my own point of view as a first-time pull request submitter, there is a lesson to be learned here for those receiving and reviewing pull requests from other—be supportive! 11\r\nAfter submitting some updates in a second commit to my branch, I received another round of feedback from Hadley. Again, his tone was supportive, so I was more than happy to address his comments in a third commit shortly afterwards.\r\nAs it stands today–a day after I made the initial fork and pull request—my pull request has an “Open” status. Nonetheless, I’m optimistic that it will eventually be merged (perhaps with another round or two of feedback and commits).\r\nParting Thoughts\r\nTo sum up my whole {tidyverse} Developer Day experience, I’m really glad to have gone through the pull request process in a setting with a bunch of experienced people who were ready and willing to help, as well as others who were just as new to the whole thing as me! It really made everything less intimidating. And now, after having gained the experience, I won’t hesitate to continue contributing to open-source projects going forward.\r\nAlso, I’m really happy for the other first-time pull request submitters who were successful in their efforts!\r\n\r\npreserve433a0d071e7e438f\r\n\r\n\r\npreserve1102c4bf351d5ba8\r\n\r\n\r\npreservef1d2f4df6edd8dde\r\n\r\nAdditional Resources\r\nFinally, as a “disclaimer” of sorts, I should say that I’m certainly not the first person to write about how to make a pull request (and I’m by no means an expert on the matter). For those looking for good reference material authored by people in the R community, I’d recommend the following resources.\r\nThe “Making a pull request” section in the “Git and GitHub” chapter in Hadley Wickham’s R Packages book. 12\r\nThe “Get upstream changes for a fork” chapter in Jenny Bryan’s in [Happy Git and GitHub for the useR book] (https://happygitwithr.com).\r\n\r\nCheck out this public Google photos album to see a ton of awesome pictures taken byJ.D. Long.↩︎\r\nI know I can’t be the only one who loves reading other people’s blogs, but (admittedly) tends to skim through them to find parts that are most relevant to what I’m doing at the time.↩︎\r\nNote that these steps assumes that the project is on GitHub.↩︎\r\nYou can technically make your pull request on the master branch of your forked repo (and avoid using branches whatsoever), but it’s not a “best practice”.↩︎\r\nI apologize for the lack of screenshot here. (I didn’t want to obfuscate the text.) If you’re a visual kind of person, then a YouTube video such as this one might be helpful.↩︎\r\nEven though I’ve read through most of this book before, I only found this part of the book after I went through the pull request process, and I wish I had seen it earlier!↩︎\r\nThis step is necessary in order to ensure that your fork is truly “in sync” with the original rep, which could certainly be the case if you forked the repo a while ago and there have been updates to the original repo since then.↩︎\r\nThe --ff-only part of the command is actually optional here, but is highly recommended by Jenny Bryan↩︎\r\nNote that the -u flag mean “upstream”, but this is NOT the same as the upstream remote created earlier. u IS necessary here, but naming the remote upstream in a previous step was NOT.↩︎\r\nThere may be some additional steps here if your request is “behind” the master branch of the source repository. Since each kind of case like this is unique, and because I’ve tried to describe the process as succinctly as possible, I don’t discuss this situation.↩︎\r\nThis reminds me of one of my favorite blog posts—Yihui Xie’s rant on the over-eagerness of the Stack Overflow community to close “bad” questions.↩︎\r\nNote that {{branch-name}} can be anything, but something like issue-{{#}} is a good practice.↩︎\r\n",
    "preview": "posts/2019-01-20-making-first-pull-request/git.png",
    "last_modified": "2021-01-11T11:27:27-06:00",
    "input_file": "making-first-pull-request.utf8.md",
    "preview_width": 330,
    "preview_height": 478
  },
  {
    "path": "posts/2018-12-22-recreate-voronoi-map-r/",
    "title": "Re-creating a Voronoi-Style Map with R",
    "description": "Re-creating a Voronoi-Style Map with R",
    "author": [
      {
        "name": "Tony ElHabr",
        "url": "https://twitter.com/TonyElHabr"
      }
    ],
    "date": "2018-12-22",
    "categories": [
      "r",
      "ggplot2",
      "voronoi",
      "kml"
    ],
    "contents": "\r\n\r\nContents\r\nIntroduction\r\nRe-creation Process\r\nThe Maps\r\nFinal Thoughts\r\n\r\n\r\nIntroduction\r\nI’ve written some “tutorial”-like content recently—see here, here, and here—but I’ve been lacking on ideas for “original” content since then. With that said, I thought it would to try to re-create something with R. (Not too long ago I saw that Andrew Heiss did something akin to this with Charles Minard’s well-known visualization of Napoleon’s 1812.)\r\nThe focus of my re-creation here is the price contour map shown on the front page of the website for the Electric Reliability Council of Texas, the independent system operator of electric power flow for about 90 percent of Texas residents, as well as the employer of yours truly).\r\n\r\nWithout going too much into the details of what kind of information and insight the map is supposed to provide 1, it’s sufficient for the reader to simply understand the following:\r\n“cooler” colors (i.e. blue and green) generally indicate regions of electric energy stability—where electric power generation is sufficiently meeting electric demand at a given point in time;\r\nand “warmer” colors (i.e. orange and red) generally represent the opposite—regions where there is some “stress” at a given point in time due to either the existence or threat of power imbalance.\r\nAnyways, aside from my familiarity with the map (just from visiting the website so often), I thought that it would be interesting to try to re-create it because it presents some “challenges” that I had not really tackled before (even in my previous endeavors with {ggplot2} and maps)—namely, (1) manipulating KML data and (2) creating Voronoi shapes. 2\r\nRe-creation Process\r\nUnfortunately, the code needed to re-produce the map is not exactly trivial, so I’m going to leave details-hungry readers a link to the repository to explore the techniques that I used on their own time. 3 To summarize the process, here’s what I did:\r\nI downloaded the price data CSVs for a specific settlement interval—7:15 AM interval on November 15, 2018—from public links on ERCOT’s website. 4\r\nThe “Settlement Point Prices at Resource Nodes, Hubs and Load Zones” link in the “Real-Time Prices Reports” section at http://www.ercot.com/mktinfo.\r\nThe “DAM Settlement Point Prices” link in the “DAM Results Reports” section at http://www.ercot.com/mktinfo.\r\nAdditionally, I downloaded the “static” KML data upon which the map is built.\r\nhttp://www.ercot.com/content/cdr/static/texas_counties.kml\r\nhttp://www.ercot.com/content/cdr/static/ercot_boundary.kml\r\nFinally, I downloaded “dynamic” KML data representing the price points themselves (for both the Real-Time Market (RTM) and the Day-Ahead Market (DAM).\r\nhttp://www.ercot.com/content/cdr/contours/rtmSppPoints.kml\r\nhttp://www.ercot.com/content/cdr/contours/damSpp7Points.kml\r\nI should Note that with this step and the others that follow, I repeated the actions for both data sets—those representing the RTM and DAM prices and points.\r\nWith the KML files for the price points, I extracted the longitude and latitude value pairs from the points defined in the KML using the {tidykml} package. Additionally, I converted the legend (embedded in the KML) into a vector to be used for the final recreated plot(s) themselves. 5\r\nWith the CSVs with the price data, I did a bit of “data munging” to convert the data for the two markets into an equivalent, easy-to-work-with format, and I joined this with the coordinate data from the previous step.\r\nWith the KML files representing the map’s static data, I created a SpatialPolygonsDataFrame encompassing both the Texas state and county boundaries, as well as the ERCOT region boundaries (which is separate).\r\nThis was probably the most difficult part for me to figure out. Nonetheless, with the help of the R community’s packages geared towards working with spatial data—most notably, the {sp} and {sf} packages—as well as some great documentation and tutorials—I found this one particularly helpful, although one may consider its techniques “outdated” since it doesn’t utilize {sf} for interpolation. 6\r\nNext was the “heart” of the process—the interpolation to create the Voronoi shapes. 7 This may be the part that is most interesting to the reader, since a similar process could be applied to one’s own project. 8\r\nFinally, I used {ggplot2} to create the visualizations themselves. Notably, one must be careful with the order of calls to geom_polygon(), geom_sf(), and coord_sf() in order to get the ordering of layers correct.\r\nAs for other details about the implementation, this process provided a perfect example of how/why functions can be so useful—it was really nice to just call a custom function twice to repeat each step for the two data sets, which certainly saved me some time and effort.\r\nThe Maps\r\nSo what does the final product look like? Below, I’ve placed my re-creations and the actual image side by side (with the help of the {magick} package).\r\n\r\n\r\nNot bad, right? OK, so the sizing isn’t perfect, but I would say it’s close enough.\r\nTo take things one step further, I tried “subtracting” the values between the two re-created maps. There is some value to doing this—to visualize the discrepancies between prices in the two markets (which, hypothetically, should be equal).\r\n\r\nBecause this map displays information that is inherently different than those of the stand-alone RTM and DAM maps, I used a different color palette—specifically, the “E” palette that comes with the awesome {viridis} package, which is conveniently made available in {ggplot2} ever since the v3 release.\r\nFinal Thoughts\r\nI really enjoyed this challenge to myself. I can certainly see myself doing something similar in the future, perhaps with a focus with which I’m less familiar (to give myself an even greater challenge). 9\r\nCheck out the pop-up help menu for a bit more information about the map itself and this link for more information about Locational Marginal Prices (LMPs).↩︎\r\nIf you’ve never heard of Voronoi diagrams, I would highly suggest reading a bit about them—the math behind them is fairly straightforward, and the results are quite elegant.↩︎\r\nI wouldn’t normally use the if ([... exists]) then [do ...] else [...] technique heavily like I do in the “main” script in the repository (because I don’t think it’s exactly a “best practice” and I’d rather use functions to achieve the same thing), but this idiom fit what I was trying to achieve at the time.↩︎\r\nNote that the map updates every 5 minutes for Real-Time Market (RTM) Locational Marginal Prices (LMPs) and every 15 minutes for RTM Settlement Point Prices (SPPs). Additionally, the Day-Ahead Market (DAM) LMP and SPP maps are update once per day, with filters allowing user to browse prices at a specified hour.↩︎\r\nThere was some serous “hard-coding” needed to do this.↩︎\r\nThe {tidyverse} set of packages, as well as {rvest} and {xml2} were also instrumental in this process.↩︎\r\nAs with the previous step, R’s spatial packages were extremely helpful here.↩︎\r\nThe rest of the steps may be too project-specific to be “generalizable”.↩︎\r\nJust brainstorming, I really enjoyed Kirk Goldsberry’s piece post-2018-midterm elections (mostly for the infomrative and “clean” visuals). The maps are practically begging to be re-created!\r\n\r\n↩︎\r\n",
    "preview": "posts/2018-12-22-recreate-voronoi-map-r/featured.jpg",
    "last_modified": "2021-01-11T11:19:27-06:00",
    "input_file": {}
  },
  {
    "path": "posts/2018-10-20-nested-json-to-tidy-data-frame-r/",
    "title": "Converting nested JSON to a tidy data frame with R",
    "description": "Converting nested JSON to a tidy data frame with R",
    "author": [
      {
        "name": "Tony ElHabr",
        "url": "https://twitter.com/TonyElHabr"
      }
    ],
    "date": "2018-10-20",
    "categories": [
      "r",
      "json",
      "dplyr",
      "tidyr",
      "nfl"
    ],
    "contents": "\r\n\r\nContents\r\nGetting the data\r\nParsing the data\r\nPost-processing the data\r\nSign-off\r\n\r\nUPDATE: The data retrieval demonstrated in this post no longer seems to work due to a change in the ESPN’S “secret” API. In any matter, the techniques for working with JSON data are still valid.\r\nIn this “how-to” post, I want to detail an approach that others may find useful for converting nested (nasty!) json to a tidy (nice!) data.frame/tibble that is should be much easier to work with. 1\r\nFor this demonstration, I’ll start out by scraping National Football League (NFL) 2018 regular season week 1 score data from ESPN, which involves lots of nested data in its raw form. 2\r\nThen, I’ll work towards getting the data in a workable format (a data.frame!). (This is the crux of what I want to show.) Finally, I’ll filter and wrangle the data to generate a final, presentable format.\r\nEven if one does not care for sports and knows nothing about the NFL, I believe that the techniques that I demonstrate are generalizable to a broad set of JSON-related “problems”.\r\nGetting the data\r\nLet’s being with importing the package(s) that we’ll need.\r\nNext, we’ll create a variable for the url from which we will get the data. The url here will request the scores for week 1 of the 2018 NFL season from ESPN’s “secret” API. 3\r\n\r\n\r\nurl <- \"http://site.api.espn.com/apis/site/v2/sports/football/nfl/scoreboard?&dates=2018&seasontype=2&week=1\"\r\n\r\n\r\n\r\nAnd now, the actual HTTP GET request for the data (using the {httr} package’s appropriately named GET() function).\r\n\r\n\r\nresp <- httr::GET(url)\r\nresp\r\n\r\n\r\n\r\n\r\n\r\n## Response [http://site.api.espn.com/apis/site/v2/sports/football/nfl/scoreboard?&dates=2018&seasontype=2&week=1]\r\n##   Date: 2018-10-24 18:41\r\n##   Status: 200\r\n##   Content-Type: application/json;charset=UTF-8\r\n##   Size: 189 kB\r\n\r\n\r\n\r\nEverything seems to be going well. However, after using another handy {httr} function—content()—to extract the data, we see that the data is an nasty nested format! (I only print out some of the top-level elements to avoid cluttering the page.)\r\n\r\n\r\ncont_raw <- httr::content(resp)\r\nstr(cont_raw, max.level = 3, list.len = 4)\r\n\r\n\r\n\r\n\r\n\r\n## List of 4\r\n##  $ leagues:List of 1\r\n##   ..$ :List of 11\r\n##   .. ..$ id                 : chr \"28\"\r\n##   .. ..$ uid                : chr \"s:20~l:28\"\r\n##   .. ..$ name               : chr \"National Football League\"\r\n##   .. ..$ abbreviation       : chr \"NFL\"\r\n##   .. .. [list output truncated]\r\n##  $ season :List of 2\r\n##   ..$ type: int 2\r\n##   ..$ year: int 2018\r\n##  $ week   :List of 1\r\n##   ..$ number: int 1\r\n##  $ events :List of 16\r\n##   ..$ :List of 9\r\n##   .. ..$ id          : chr \"401030710\"\r\n##   .. ..$ uid         : chr \"s:20~l:28~e:401030710\"\r\n##   .. ..$ date        : chr \"2018-09-07T00:55Z\"\r\n##   .. ..$ name        : chr \"Atlanta Falcons at Philadelphia Eagles\"\r\n##   .. .. [list output truncated]\r\n##   ..$ :List of 9\r\n##   .. ..$ id          : chr \"401030718\"\r\n##   .. ..$ uid         : chr \"s:20~l:28~e:401030718\"\r\n##   .. ..$ date        : chr \"2018-09-09T17:00Z\"\r\n##   .. ..$ name        : chr \"Pittsburgh Steelers at Cleveland Browns\"\r\n##   .. .. [list output truncated]\r\n##   ..$ :List of 9\r\n##   .. ..$ id          : chr \"401030717\"\r\n##   .. ..$ uid         : chr \"s:20~l:28~e:401030717\"\r\n##   .. ..$ date        : chr \"2018-09-09T17:00Z\"\r\n##   .. ..$ name        : chr \"Cincinnati Bengals at Indianapolis Colts\"\r\n##   .. .. [list output truncated]\r\n##   ..$ :List of 9\r\n##   .. ..$ id          : chr \"401030716\"\r\n##   .. ..$ uid         : chr \"s:20~l:28~e:401030716\"\r\n##   .. ..$ date        : chr \"2018-09-09T17:00Z\"\r\n##   .. ..$ name        : chr \"Tennessee Titans at Miami Dolphins\"\r\n##   .. .. [list output truncated]\r\n##   .. [list output truncated]\r\n\r\n\r\n\r\nParsing the data\r\nGiven the nature of the data, we might hope that the {jsonlite} package will save us here. However, straightforward usage of it’s fromJSON() package only reduces the mess a bit.\r\n\r\n\r\ndf_raw_ugly <- jsonlite::fromJSON(rawToChar(resp$content))\r\nglimpse(df_raw_ugly, max.level = 3, list.len = 4)\r\n\r\n\r\n\r\n\r\n\r\n## List of 4\r\n##  $ leagues:'data.frame': 1 obs. of  11 variables:\r\n##   ..$ id                 : chr \"28\"\r\n##   ..$ uid                : chr \"s:20~l:28\"\r\n##   ..$ name               : chr \"National Football League\"\r\n##   ..$ abbreviation       : chr \"NFL\"\r\n##   .. [list output truncated]\r\n##  $ season :List of 2\r\n##   ..$ type: int 2\r\n##   ..$ year: int 2018\r\n##  $ week   :List of 1\r\n##   ..$ number: int 1\r\n##  $ events :'data.frame': 16 obs. of  9 variables:\r\n##   ..$ id          : chr [1:16] \"401030710\" \"401030718\" \"401030717\" \"401030716\" ...\r\n##   ..$ uid         : chr [1:16] \"s:20~l:28~e:401030710\" \"s:20~l:28~e:401030718\" \"s:20~l:28~e:401030717\" \"s:20~l:28~e:401030716\" ...\r\n##   ..$ date        : chr [1:16] \"2018-09-07T00:55Z\" \"2018-09-09T17:00Z\" \"2018-09-09T17:00Z\" \"2018-09-09T17:00Z\" ...\r\n##   ..$ name        : chr [1:16] \"Atlanta Falcons at Philadelphia Eagles\" \"Pittsburgh Steelers at Cleveland Browns\" \"Cincinnati Bengals at Indianapolis Colts\" \"Tennessee Titans at Miami Dolphins\" ...\r\n##   .. [list output truncated]\r\n\r\n\r\n\r\nOne could go on and try some other functions from the {jsonlite} package (or another JSON-related package), but, in my own attempts, I was unable to figure out a nice way of getting a data.frame(). (This is not to say that there is something wrong with the package—I simply could not figure out how to use it to get the result that I wanted.)\r\nSo, what to do now? Well, after some struggling, I stumbled upon the following solution to put me on the right path.\r\n\r\n\r\ndf_raw <- enframe(unlist(cont_raw))\r\ndf_raw\r\n\r\n\r\n\r\n\r\n\r\n## # A tibble: 6,629 x 2\r\n##    name                     value                   \r\n##    <chr>                    <chr>                   \r\n##  1 leagues.id               28                      \r\n##  2 leagues.uid              s:20~l:28               \r\n##  3 leagues.name             National Football League\r\n##  4 leagues.abbreviation     NFL                     \r\n##  5 leagues.slug             nfl                     \r\n##  6 leagues.season.year      2018                    \r\n##  7 leagues.season.startDate 2018-08-02T07:00Z       \r\n##  8 leagues.season.endDate   2019-02-06T07:59Z       \r\n##  9 leagues.season.type.id   2                       \r\n## 10 leagues.season.type.type 2                       \r\n## # ... with 6,619 more rows\r\n\r\n\r\n\r\nCombining unlist() and tibble::enframe(), we are able to get a (very) long data.frame without any nested elements! Note that the would-have-been-nested elements are joined by “.” in the “name” column, and the values associated with these elements are in the “value” column. (These are the default column names that tibble::enframe() assigns to the tibble that it creates from a list.)\r\nWhile this tibble is still not in a tidy format—there are variables implicitly stored in the “name” column rather than in their own columns—–it’s in a much more user-friendly format (in my opinion). (e.g The variable \"leagues.season.startDate\" implicitly encodes three variables—\"leagues\", \"season\", and \"startDate\"—each deserving of their own column.)\r\nGiven the format of the implicit variable sin the “name” column, We can use tidyr::separate() to create columns for each.\r\n\r\n\r\ndf_raw %>% separate(name, into = c(paste0(\"x\", 1:10)))\r\n\r\n\r\n\r\n\r\n\r\n## Warning: Expected 10 pieces. Missing pieces filled with `NA` in 6629\r\n## rows [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\r\n## 20, ...].\r\n\r\n## # A tibble: 6,629 x 11\r\n##    x1     x2      x3    x4    x5    x6    x7    x8    x9    x10   value   \r\n##    <chr>  <chr>   <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr>   \r\n##  1 leagu~ id      <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  28      \r\n##  2 leagu~ uid     <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  s:20~l:~\r\n##  3 leagu~ name    <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  Nationa~\r\n##  4 leagu~ abbrev~ <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  NFL     \r\n##  5 leagu~ slug    <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  nfl     \r\n##  6 leagu~ season  year  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  2018    \r\n##  7 leagu~ season  star~ <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  2018-08~\r\n##  8 leagu~ season  endD~ <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  2019-02~\r\n##  9 leagu~ season  type  id    <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  2       \r\n## 10 leagu~ season  type  type  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  2       \r\n## # ... with 6,619 more rows\r\n\r\n\r\n\r\nWe get a warning indicating when using separate() because we have “over-estimated” how many columns we will need to create. Note that, with my specification of (dummy) column names with the into argument, I guessed that there we would need 10 columns. Why 10? Because I expected that 10 would be more than I needed, and it’s better to over-estimate and remove the extra columns in a subsequent step than to under-estimate and lose data because there are not enough columns to put the “separated” data in.\r\nWe can get rid of the warning by providing an appropriate value for separate()’s fill argument. (Note that \"warn\" is the default value of the fill argument.)\r\n\r\n\r\ndf_raw %>% separate(name, into = c(paste0(\"x\", 1:10)), fill = \"right\")\r\n\r\n\r\n\r\n\r\n\r\n## # A tibble: 6,629 x 11\r\n##    x1     x2      x3    x4    x5    x6    x7    x8    x9    x10   value   \r\n##    <chr>  <chr>   <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr> <chr>   \r\n##  1 leagu~ id      <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  28      \r\n##  2 leagu~ uid     <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  s:20~l:~\r\n##  3 leagu~ name    <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  Nationa~\r\n##  4 leagu~ abbrev~ <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  NFL     \r\n##  5 leagu~ slug    <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  nfl     \r\n##  6 leagu~ season  year  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  2018    \r\n##  7 leagu~ season  star~ <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  2018-08~\r\n##  8 leagu~ season  endD~ <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  2019-02~\r\n##  9 leagu~ season  type  id    <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  2       \r\n## 10 leagu~ season  type  type  <NA>  <NA>  <NA>  <NA>  <NA>  <NA>  2       \r\n## # ... with 6,619 more rows\r\n\r\n\r\n\r\nHowever, while this action gets rid of the warning, it does not actually resolve the underlying issue—specifying the correct number of columns to create with separate(). We can do that by identifying the name with the most number of “dots” (i.e. .s).\r\n\r\n\r\nrgx_split <- \"\\\\.\"\r\nn_cols_max <-\r\n  df_raw %>%\r\n  pull(name) %>% \r\n  str_split(rgx_split) %>% \r\n  map_dbl(~length(.)) %>% \r\n  max()\r\nn_cols_max\r\n\r\n\r\n\r\n\r\n\r\n## [1] 7\r\n\r\n\r\n\r\nWith this number (7) identified, we can now choose the “correct” number of columns to create with separate(). Note that we’ll still be left with lots of NA values (corresponding to rows that don’t have the maximum number of variables). This is expected.\r\n\r\n\r\nnms_sep <- paste0(\"name\", 1:n_cols_max)\r\ndf_sep <-\r\n  df_raw %>% \r\n  separate(name, into = nms_sep, sep = rgx_split, fill = \"right\")\r\ndf_sep\r\n\r\n\r\n\r\n\r\n\r\n## # A tibble: 6,629 x 8\r\n##    name1   name2      name3    name4 name5 name6 name7 value              \r\n##    <chr>   <chr>      <chr>    <chr> <chr> <chr> <chr> <chr>              \r\n##  1 leagues id         <NA>     <NA>  <NA>  <NA>  <NA>  28                 \r\n##  2 leagues uid        <NA>     <NA>  <NA>  <NA>  <NA>  s:20~l:28          \r\n##  3 leagues name       <NA>     <NA>  <NA>  <NA>  <NA>  National Football ~\r\n##  4 leagues abbreviat~ <NA>     <NA>  <NA>  <NA>  <NA>  NFL                \r\n##  5 leagues slug       <NA>     <NA>  <NA>  <NA>  <NA>  nfl                \r\n##  6 leagues season     year     <NA>  <NA>  <NA>  <NA>  2018               \r\n##  7 leagues season     startDa~ <NA>  <NA>  <NA>  <NA>  2018-08-02T07:00Z  \r\n##  8 leagues season     endDate  <NA>  <NA>  <NA>  <NA>  2019-02-06T07:59Z  \r\n##  9 leagues season     type     id    <NA>  <NA>  <NA>  2                  \r\n## 10 leagues season     type     type  <NA>  <NA>  <NA>  2                  \r\n## # ... with 6,619 more rows\r\n\r\n\r\n\r\nBy my interpretation, this df_sep variable is in tidy format. (Of course, there is still lots of cleaning to be done before it can actually be useful!)\r\nPost-processing the data\r\nGetting the raw data in the format that df_sep is what I primarily wanted to show. Nonetheless, there’s more to the story! (Reminder: We’re seeking to get the scores from the 16 games in week 1 of the NFL’s 2018 regular season.) How can we work with the NAs to get a final format that is actually presentable?\r\nWe continue by filter the tibble for only the rows that we will need.\r\n\r\n\r\ndf_filt <-\r\n  df_sep %>%\r\n  filter(\r\n    (\r\n      name1 == \"events\" &\r\n        name2 == \"shortName\"\r\n    ) |\r\n      (\r\n        name1 == \"events\" &\r\n          name2 == \"competitions\" &\r\n          name3 == \"date\"\r\n      ) | (\r\n        name1 == \"events\" &\r\n          name2 == \"competitions\" &\r\n          name3 == \"status\" &\r\n          name4 == \"type\" &\r\n          name5 == \"name\"\r\n      ) |\r\n      (\r\n        name1 == \"events\" &\r\n          name2 == \"competitions\" &\r\n          name3 == \"competitors\" &\r\n          name4 == \"score\"\r\n      )\r\n  )\r\ndf_filt\r\n\r\n\r\n\r\n\r\n\r\n## # A tibble: 80 x 8\r\n##    name1  name2        name3      name4 name5 name6 name7 value           \r\n##    <chr>  <chr>        <chr>      <chr> <chr> <chr> <chr> <chr>           \r\n##  1 events shortName    <NA>       <NA>  <NA>  <NA>  <NA>  ATL @ PHI       \r\n##  2 events competitions date       <NA>  <NA>  <NA>  <NA>  2018-09-07T00:5~\r\n##  3 events competitions competito~ score <NA>  <NA>  <NA>  18              \r\n##  4 events competitions competito~ score <NA>  <NA>  <NA>  12              \r\n##  5 events competitions status     type  name  <NA>  <NA>  STATUS_FINAL    \r\n##  6 events shortName    <NA>       <NA>  <NA>  <NA>  <NA>  PIT @ CLE       \r\n##  7 events competitions date       <NA>  <NA>  <NA>  <NA>  2018-09-09T17:0~\r\n##  8 events competitions competito~ score <NA>  <NA>  <NA>  21              \r\n##  9 events competitions competito~ score <NA>  <NA>  <NA>  21              \r\n## 10 events competitions status     type  name  <NA>  <NA>  STATUS_FINAL    \r\n## # ... with 70 more rows\r\n\r\n\r\n\r\nNext, we’ll create appropriately named columns for the values that we filtered for in the step above. 4\r\n\r\n\r\ndf_clean1 <-\r\n  df_filt %>%\r\n  select(name3, name4, name5, value) %>%\r\n  mutate(status = if_else(name5 == \"name\", value, NA_character_)) %>%\r\n  mutate(isscore = if_else(name4 == \"score\", TRUE, FALSE)) %>%\r\n  mutate(datetime = if_else(\r\n    name3 == \"date\",\r\n    str_replace_all(value, \"\\\\s?T\\\\s?\", \" \") %>% str_replace(\"Z$\", \"\"),\r\n    NA_character_\r\n  )) %>%\r\n  mutate(gm = if_else(\r\n    is.na(isscore) &\r\n      is.na(datetime) & is.na(status),\r\n    value,\r\n    NA_character_\r\n  ))\r\ndf_clean1\r\n\r\n\r\n\r\n\r\n\r\n## # A tibble: 80 x 8\r\n##    name3    name4 name5 value       status    isscore datetime     gm     \r\n##    <chr>    <chr> <chr> <chr>       <chr>     <lgl>   <chr>        <chr>  \r\n##  1 <NA>     <NA>  <NA>  ATL @ PHI   <NA>      NA      <NA>         ATL @ ~\r\n##  2 date     <NA>  <NA>  2018-09-07~ <NA>      NA      2018-09-07 ~ <NA>   \r\n##  3 competi~ score <NA>  18          <NA>      TRUE    <NA>         <NA>   \r\n##  4 competi~ score <NA>  12          <NA>      TRUE    <NA>         <NA>   \r\n##  5 status   type  name  STATUS_FIN~ STATUS_F~ FALSE   <NA>         <NA>   \r\n##  6 <NA>     <NA>  <NA>  PIT @ CLE   <NA>      NA      <NA>         PIT @ ~\r\n##  7 date     <NA>  <NA>  2018-09-09~ <NA>      NA      2018-09-09 ~ <NA>   \r\n##  8 competi~ score <NA>  21          <NA>      TRUE    <NA>         <NA>   \r\n##  9 competi~ score <NA>  21          <NA>      TRUE    <NA>         <NA>   \r\n## 10 status   type  name  STATUS_FIN~ STATUS_F~ FALSE   <NA>         <NA>   \r\n## # ... with 70 more rows\r\n\r\n\r\n\r\nWith these columns created, we can use tidyr::fill() and dplyr::filter() in a strategic manner to get rid of all the NAs cluttering our tibble. Additionally, we can drop the dummy name columns that we created with the tidyr::separate() call before.\r\n\r\n\r\ndf_clean2 <-\r\n  df_clean1 %>% \r\n  fill(status, .direction = \"up\") %>%\r\n  filter(status == \"STATUS_FINAL\") %>%\r\n  fill(gm, .direction = \"down\") %>%\r\n  fill(datetime, .direction = \"down\") %>%\r\n  filter(name3 == \"competitors\") %>% \r\n  select(-matches(\"name[0-9]\"))\r\ndf_clean2\r\n\r\n\r\n\r\n\r\n\r\n## # A tibble: 32 x 5\r\n##    value status       isscore datetime         gm       \r\n##    <chr> <chr>        <lgl>   <chr>            <chr>    \r\n##  1 18    STATUS_FINAL TRUE    2018-09-07 00:55 ATL @ PHI\r\n##  2 12    STATUS_FINAL TRUE    2018-09-07 00:55 ATL @ PHI\r\n##  3 21    STATUS_FINAL TRUE    2018-09-09 17:00 PIT @ CLE\r\n##  4 21    STATUS_FINAL TRUE    2018-09-09 17:00 PIT @ CLE\r\n##  5 23    STATUS_FINAL TRUE    2018-09-09 17:00 CIN @ IND\r\n##  6 34    STATUS_FINAL TRUE    2018-09-09 17:00 CIN @ IND\r\n##  7 27    STATUS_FINAL TRUE    2018-09-09 17:00 TEN @ MIA\r\n##  8 20    STATUS_FINAL TRUE    2018-09-09 17:00 TEN @ MIA\r\n##  9 24    STATUS_FINAL TRUE    2018-09-09 17:00 SF @ MIN \r\n## 10 16    STATUS_FINAL TRUE    2018-09-09 17:00 SF @ MIN \r\n## # ... with 22 more rows\r\n\r\n\r\n\r\nFinally, we can use a chain of {dplyr} actions to get a pretty output. I should note that it is likely that everything up to this point would have an analogous action no matter what the data set is that you are working with. However, these final actions are unique to this specific data.\r\n\r\n\r\ndf_clean3 <-\r\n  df_clean2 %>% \r\n  group_by(gm) %>%\r\n  mutate(rn = row_number()) %>%\r\n  ungroup() %>%\r\n  mutate(tm_dir = if_else(rn == 1, \"pts_home\", \"pts_away\")) %>%\r\n  select(datetime, gm, tm_dir, value) %>%\r\n  spread(tm_dir, value) %>%\r\n  separate(gm, into = c(\"tm_away\", \"tm_home\"), sep = \"(\\\\s+\\\\@\\\\s+)|(\\\\s+vs.*\\\\s+)\") %>% \r\n  mutate_at(vars(matches(\"pts\")), funs(as.integer)) %>%\r\n  mutate(date = datetime %>% str_remove(\"\\\\s.*$\") %>% lubridate::ymd()) %>%\r\n  mutate(time = datetime %>% lubridate::ymd_hm()) %>%\r\n  select(date, time, tm_home, tm_away, pts_home, pts_away)\r\ndf_clean3\r\n\r\n\r\n\r\n\r\n\r\n## # A tibble: 16 x 6\r\n##    date       time                tm_home tm_away pts_home pts_away\r\n##    <date>     <dttm>              <chr>   <chr>      <int>    <int>\r\n##  1 2018-09-07 2018-09-07 00:55:00 PHI     ATL           18       12\r\n##  2 2018-09-09 2018-09-09 17:00:00 BAL     BUF           47        3\r\n##  3 2018-09-09 2018-09-09 17:00:00 IND     CIN           23       34\r\n##  4 2018-09-09 2018-09-09 17:00:00 NE      HOU           27       20\r\n##  5 2018-09-09 2018-09-09 17:00:00 NYG     JAX           15       20\r\n##  6 2018-09-09 2018-09-09 17:00:00 CLE     PIT           21       21\r\n##  7 2018-09-09 2018-09-09 17:00:00 MIN     SF            24       16\r\n##  8 2018-09-09 2018-09-09 17:00:00 NO      TB            40       48\r\n##  9 2018-09-09 2018-09-09 17:00:00 MIA     TEN           27       20\r\n## 10 2018-09-09 2018-09-09 20:05:00 LAC     KC            28       38\r\n## 11 2018-09-09 2018-09-09 20:25:00 CAR     DAL           16        8\r\n## 12 2018-09-09 2018-09-09 20:25:00 DEN     SEA           27       24\r\n## 13 2018-09-09 2018-09-09 20:25:00 ARI     WSH            6       24\r\n## 14 2018-09-10 2018-09-10 00:20:00 GB      CHI           24       23\r\n## 15 2018-09-10 2018-09-10 23:10:00 DET     NYJ           17       48\r\n## 16 2018-09-11 2018-09-11 02:20:00 OAK     LAR           13       33\r\n\r\n\r\n\r\nAnd there we have it! A nice, tidy tibble with the scores of the first week of regular season games in the 2018 NFL regular season.\r\nSign-off\r\nHopefully someone out there will find the technique(s) shown in this post to be useful for an endeavor of their own.\r\nPersonally, I find web scraping to be fascinating, so I doubt this will be the last time I write about something of this nature.\r\n\r\nI use data.frame and tibble interchangeably. See this chapter of the R for Data Science for more details about the differences/similarities between the two.↩︎\r\n(See the webpage here: http://www.espn.com/nfl/scoreboard/_/year/2018/seasontype/2/week/1. Note that we won’t be scraping the html, but, instead, the underlying JSON from which the html is generated.)↩︎\r\nI say that it’s a secret because it’s API documentation is out of date.↩︎\r\nAs a note to the reader, I don’t recommend suffixing variable names with numbers as I do in the next couple of step (i.e. variables suffixed with 1, 2, …) (It’s ugly!) In practice, you might do this during your exploratory phase of data scraping/analysis, but you should come up with more informative names and combine actions in a logical manner for your final script/package (in my opinion).↩︎\r\n",
    "preview": "posts/2018-10-20-nested-json-to-tidy-data-frame-r/featured.jpg",
    "last_modified": "2021-01-11T11:32:39-06:00",
    "input_file": "nested-json-to-tidy-data-frame-r.utf8.md"
  },
  {
    "path": "posts/2018-05-20-analysis-texas-high-school-academics-1-intro/",
    "title": "An Analysis of Texas High School Academic Competition Results, Part 1 - Introduction",
    "description": {},
    "author": [],
    "date": "2018-05-20",
    "categories": [
      "r"
    ],
    "contents": "\r\nTable of Contents\r\nIntroduction\r\nAbout the Data\r\n\r\nWhat’s Next\r\n\r\n.toggle {\r\n  height: 1.85em;\r\n  overflow-y: hidden;\r\n}\r\n.toggle.open {\r\n  height: auto;\r\n}\r\n\r\n  $(\".toggle\").click(function() {\r\n    $(this).toggleClass(\"open\");\r\n  });\r\nNOTE:  This is part of a series of write-ups discussing my findings of Texas high school academic University Interscholastic Scholarship (UIL) competitions.\r\nTo keep this and the other write-ups concise and to focus reader attention on the content, I have decided not to show the underlying code (especially that which is used to create the visuals). Nonetheless, the full code can be viewed on my GitHub account. In the future, I may write some some kind of addendum to demonstrate some of the programming implementation that I think is notable in some way.  \r\nIntroduction\r\nAfter I finished high school in 2012, I thought it would be interesting to look back and evaluate my performance in the academic University Interscholastic League (UIL) competitions that I competed in with historical results. (To provide some background, most public high schools in Texas are registered in the University Interscholastic League (UIL), which “exists to provide educational extracurricular academic, athletic, and music contests”. For those familiar with the National Collegiate Athletic Association (NCAA), the UIL serves an analogous role for Texas high school extracurricular activities.)\r\nAside from my own self-interest in the historical results in these competitions, I think that this analysis can provide some insight into which schools (and individual students) are really the most “elite”. School-wide and invidividual average scores on state- and national- standardized tests (e.g. the SAT) certainly are the most common measure of academic strength, but I think rankings by academic competitions may be more indicative.\r\nAbout the Data\r\nTo make some sense of the my analysis, the reader should be aware of the following details about the data.\r\nThe competition data was scraped from https://www.hpscience.net/ for all years from 2008 through 2017. 1 The data is not listed in an extremely user-friendly format (in my opinion). Consequently, the “cleaned” data is imperfect in some ways.\r\nThe UIL categorizes schools into one of six “Conferences”. The conference labels range from 1A, 2A, …, 6A, where the increasing leading digit (i.e. 1, 2, etc.) generally corresponds to increasing school size.\r\nSchools only compete against other schools in their conference.\r\nThe UIL defines 3 levels of competition (in order of “difficulty”): District, Region, and State. These are listed in order of “difficulty”. That is, Winning a District competitions, results in a Region competition appearance, and, subsequently, winning a Region competition results in a State competition appearance. (Keep in mind that schools still only compete against other schools in their same conference, even as they advance.)\r\nThe UIL defines 32 total Districts in Texas, which are aggregated into 4 Regions. (The source of the geo-spatial data is https://nces.ed.gov/opengis/rest/services/K12_School_Locations.)\r\nThe UIL defines 32 total Districts in Texas, which are aggregated into 4 Regions. (The source of the geo-spatial data is https://nces.ed.gov/opengis/rest/services/K12_School_Locations.)\r\n\r\nFor schools, winning is a “winner-take-all” matter: only the school with the most combined points among its top handful individual competitors (3 for most competitions) advances. On the other hand, an individual may advance even if his school does not win if he places among the top “n”. The value of “n” is dependent on the competition type. 2\r\nThere are 5 different academic competitions “types”: Calculator Applications, Computer Science, Mathematics, Number Sense, and Science. 3\r\nWhat’s Next\r\nIn this series, I investigate the following topics:\r\nThe relationships among the competition years, types, levels.\r\nIndividual participation and performance (including myself).\r\nSchool participation and performance (including my high school).\r\nMiscellaneous topics, such as sibling performance .\r\nI checked the site’s “robots.txt” file prior to scraping rate limits.↩︎\r\nSee the UIL rules for more details.↩︎\r\nThere are many more UIL competition types than those analyzed here (including competitions for theater, band, etc.), but these are the ones for academics.↩︎\r\n",
    "preview": {},
    "last_modified": "2021-01-10T18:30:37-06:00",
    "input_file": {}
  }
]
