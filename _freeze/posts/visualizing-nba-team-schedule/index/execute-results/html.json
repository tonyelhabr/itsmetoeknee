{
  "hash": "1df43162136be9aae9db9c20caf6e416",
  "result": {
    "markdown": "---\ntitle: Visualizing an NBA Team's Schedule Using R\ndescription: A Calendar Heatmap with ggplot2\ndate: 2017-11-26\ncategories:\n  - r\n  - nba\nimage: viz_pd_sas_2016.png\nexecute:\n  include: true\n  echo: true\n---\n\n\nIf you're not completely new to the data science community (specifically, the #rstats community), then you've probably seen a version of the \"famous\" data science workflow diagram. [^1]\n\n[^1]: The figure shown here comes from the [introductory chapter of the *R for Data Science* book](http://r4ds.had.co.nz/introduction.html)\n\n![](data-science.png)\n\nIf one is fairly familiar with a certain topic, then one might not spend much time with the initial \"visualize\" step of the workflow. Such is the case with me and NBA data--as a relatively knowledgeable NBA follower, I don't necessarily need to spend much of my time exploring raw NBA data prior to modeling.\n\nAnyways, as a break from experimenting with predictive models, I decided to make a visualization just for the sake of trying something I hadn't done before. [^2] In particular, I was inspired by the calendar heat map visualization that I saw in the [Top 50 ggplot visualizations post](https://r-statistics.co/Top50-Ggplot2-Visualizations-MasterList-R-Code.html) on the <https://r-statistics.co> website.\n\n[^2]: Here, I use the NBA data that I have already scraped and cleaned.\n\n![](ggplot_masterlist_42.png)\n\nTo implement a plot of this nature, I decided to look at how my hometown team, the San Antonio Spurs, fared last season (2016) in terms of point differential. In case it's not immediately obvious, lots of green is good. (This is not surprising to those of us who follow the NBA--the Spurs have been consistently good since the end of the 1990s.)\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"show\"}\nlibrary(dplyr)\nlibrary(ggplot2)\n\nresults_prepared <- 'game_results-prepared.csv' %>% read_csv()\n\ncolnames_base <- c('date', 'season', 'tm')\ncolnames_calc_dates <- c('yyyy', 'mm', 'dd', 'wd', 'mm_yyyy', 'mm_w')\n# Look at a couple of different metrics.\n# Specifically, look at games played to date (g_td) and point differential (pd).\ncolnames_viz <- c('g_td', 'pd')\n\nresults_calendar_tm <- results_prepared %>%\n  filter(tm == 'SAS') %>%\n  mutate(\n    yyyy = year(date),\n    mm = lubridate::month(date),\n    dd = lubridate::day(date),\n    wd = lubridate::wday(date, label = TRUE, abbr = TRUE),\n    mm_yyyy = zoo::as.yearmon(date)\n  ) %>%\n  group_by(mm_yyyy) %>%\n  mutate(mm_w = ceiling(dd / 7)) %>%\n  ungroup() %>%\n  select(one_of(colnames_base, colnames_calc_dates, colnames_viz)) %>%\n  arrange(season, g_td, tm)\n\n# Tidy up because I was experimenting with different metrics, not just point differential.\nresults_calendar_tm_tidy <- results_calendar_tm %>%\n  tidyr::gather(metric, value, colnames_viz)\n\nseason <- 2016\nwd_labels <- levels(results_calendar_tm$wd)\nwd_labels[2:6] <- ''\ntitle <- str_c('San Antonio Spurs Point Differential in ', season, ' NBA Season')\n\nviz_pd_sas_2016 <- results_calendar_tm_tidy %>%\n  filter(season %in% seasons) %>%\n  filter(metric == 'pd') %>%\n  ggplot() +\n  geom_tile(aes(x = wd, y = mm_w, fill = value), colour = 'white') +\n  scale_y_reverse() +\n  scale_x_discrete(labels = wd_labels) +\n  theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) +\n  scale_fill_gradient2(low = 'red', mid = 'grey', high = 'green') +\n  theme(legend.position = 'bottom') +\n  labs(x = '', y = '', title = title) +\n  facet_wrap( ~ mm_yyyy, nrow = 2)\nviz_pd_sas_2016\n```\n:::\n\n\n![](viz_pd_sas_2016.png)\n\nThere are an infinite number of ways to visualize data like this, but I thought this was interesting because of the temporal nature of the data.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}