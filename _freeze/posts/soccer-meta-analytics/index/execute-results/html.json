{
  "hash": "1d91fd0b410fece5851db07431711022",
  "result": {
    "markdown": "---\ntitle: Meta-Analytics for Soccer \ndescription: Analyzing discrimination and stability (Franks et al. 2017) for soccer stats\ndate: 2023-09-10\ndraft: true\ncategories:\n  - r\n  - soccer\nimage: foo.png\nexecute: \n  code-fold: true\n  eval: false\n  include: true\n  echo: true\n---\n\n\n## Introduction\n\nIn the realm of sports, data analysis has grown significantly, introducing numerous metrics to guide coaching, management, and, of course, fans. However, this proliferation has also led to confusion, with overlapping and sometimes conflicting metrics. To address this, the [Franks et al. (2017)](https://www.degruyter.com/document/doi/10.1515/jqas-2016-0098/html)[^1] propose three \"meta-metrics\" to help determine which metrics offer unique and dependable information for decision-makers.\n\n[^1]: If it means anything, the *Meta-analytics* paper has [40 citations](https://scholar.google.com/scholar?cites=13818794209592074425&as_sdt=5,44&sciodt=0,44&hl=en) at time of writing, suggesting it has had non-trivial influence on subsequent sports analytics research.\n\nBy examining sources of variation in sports metrics (e.g. intrinsic player skill), Franks et al. introduce three key meta-metrics to assess player performance metrics:\n\n-   **discrimination**: How good is the metric at telling players apart?\n-   **stability**: How likely is that a player maintains the same performance for the metric in the next season?\n-   **independence**: Does the stat tell us something different about players that other stats don't tell us?\n\nThis blog post demonstrates how to calculate the **discrimination** and **stability** meta-metrics on an array of soccer stats.\n\n### Formulas\n\nBefore we dive into implementation, we should more specifically define the meta-metrics of interest, discrimination and stability. I'll break things down more formally first, but if you want just the gist of things, at least observe the \"Simplified\" formulas.\n\n#### Full Syntax\n\nLet $X$ to be a random variable. Given metric $m$ for player $p$ from season $s$, we can represent a single value of the random variable as $X_{spm}$. Given these representations, we specify the following shorthands.\n\n$$\n\\begin{array}{rcl}\nE_{spm}[X] & = & E[X|S=s,P=p,M=m] \\\\\nV_{spm}[X] & = & Var[X|S=s,P=p,M=m]. \\\\\n\\end{array}\n$$\n\nFranks et al. define discrimination as\n\n$$\n\\begin{array}{cc}\n\\text{(Discrimination)} & D_{sm} = 1 - \\frac{E_{sm}[V_{spm}[X]]}{V_{sm}[X]}.\n\\end{array}\n$$ {#eq-discrimination-full}\n\nThis describes **the fraction of between-player variance due to true differences in player ability**. A value closer to 1 indicates a metric that can differentiate between players more precisely.[^2]\n\n[^2]: Note that we can average $D_{sm}$ across all seasons of interest to arrive at a singular value per metric, $D_m$.\n\nStability is defined as\n\n$$\n\\begin{array}{cc}\n\\text{(Stability)} & S_{m} = 1 - \\frac{E_{m}[V_{spm}[X] - V_{spm}[X]]}{V_{m}[X] - E_{m}[V_{spm}[X]]}.\n\\end{array}\n$$ {#eq-stability-full}\n\nThis represents **the fraction of total variance that is due to within-player changes over time**. A value closer to 1 indicates that the value for a stat for a given player is less likely to change from season to season.\n\n#### Simplified\n\nLet's abstract one level up from metric $m$, since, fundamentally, it should be intuitive that we won't be looking at variance across different stats, i.e. variance across shots taken and passes completed doesn't make sense. Further, removing the notation for seasons, players, expectations, and variances for clarity, we can re-write @eq-discrimination-full more plainly as\n\n$$\n\\text{(Discrimination)} = 1 - \\frac{BV}{SV}.\n$$ {#eq-discrimination-short}\n\n$BV$ is the **b**ootstrapped **v**ariability (of a given metric) for a given player in a given season (1 record per \"player-season\"), averaged over all player-seasons. $SV$ is the player-season **v**ariance for all players for a given **s**eason.\n\nNext, we can re-write @eq-stability-full as\n\n$$\n\\text{(Stability)} = 1 - \\frac{WV - BV}{TV - BV}.\n$$ {#eq-stability-short}\n\n$WV$ represents the **v**ariance across all player-seasons **w**ithin a player. $TV$ is the **t**otal **v**ariance across all player-season totals over all seasons.\n\n## Calculations\n\n### Data\n\nWe'll be using public data from [FBref](https://fbref.com/) for the 2018/19 - 2022/23 seasons of the [the Big 5 European soccer leagues](https://fbref.com/en/comps/Big5/Big-5-European-Leagues-Stats).\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Data retrieval\"}\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(purrr)\nlibrary(tibble)\nlibrary(lubridate)\n\nload_fb_advanced_match_stats <- function(country, gender, tier, stat_type, team_or_player, season_end_year = NA) {\n  \n  url <- sprintf(\n    'https://github.com/JaseZiv/worldfootballR_data/releases/download/fb_advanced_match_stats/%s_%s_%s_%s_%s_advanced_match_stats.rds',\n    country,\n    gender,\n    tier,\n    stat_type,\n    team_or_player\n  )\n  readRDS(url(url))\n}\n\npossibly_load_fb_advanced_match_stats <- purrr::possibly(\n  load_fb_advanced_match_stats, \n  otherwise = tibble::tibble(),\n  quiet = TRUE\n)\n\nparams <- tidyr::expand_grid(\n  country = c('ENG', 'ESP', 'FRA', 'GER', 'ITA'),\n  gender = 'M',\n  tier = '1st',\n  stat_type = 'summary',\n  team_or_player = 'player'\n) |> \n  as.list()\n\nraw_player_match_stats <- purrr::pmap_dfr(\n  params,\n  possibly_load_fb_advanced_match_stats\n) |> \n  dplyr::filter(\n    ## stop at 2022/23 season\n    Season_End_Year < 2024L,\n    ## don't include keepers\n    !grepl('GK', Pos)\n  )\n\nBASE_METRICS <- c(\n  'goals',\n  'assists',\n  'shots',\n  'shots_on_target',\n  'touches',\n  'tackles',\n  'interceptions',\n  'blocks',\n  'xg',\n  'npxg',\n  'xa',\n  'sca',\n  'gca',\n  'passes_completed',\n  'passes_attempted',\n  'progressive_passes',\n  'carries',\n  'progressive_carries',\n  'takeons_attempted',\n  'successful_takeons'\n)\n\nRATE_METRICS <- c(\n  'goal_conversion_rate',\n  'pass_completion_rate',\n  'successful_takeon_rate'\n)\n\nALL_METRICS <- c(\n  BASE_METRICS,\n  RATE_METRICS\n)\n\nplayer_match_stats <- raw_player_match_stats |> \n  dplyr::transmute(\n    league = sprintf('%s-%s-%s', Country, Gender, Tier),\n    season = sprintf('%s/%s', Season_End_Year - 1, substr(Season_End_Year, 3, 4)),\n    date = lubridate::ymd(Match_Date),\n    match_id = basename(dirname(MatchURL)),\n    team = Team,\n    player = Player,\n    minutes_played = Min,\n    \n    goals = Gls, ## includes pks\n    assists = Ast,\n    shots = Sh, ## does not include pk attempts\n    shots_on_target = SoT,\n    touches = Touches,\n    tackles = Tkl,\n    interceptions = Int,\n    blocks = Blocks,\n    \n    xg = xG_Expected,\n    npxg = npxG_Expected,\n    xa = xAG_Expected,\n    \n    sca = SCA_SCA,\n    gca = GCA_SCA,\n    \n    passes_completed = Cmp_Passes,\n    passes_attempted = Att_Passes,\n    \n    progressive_passes = PrgP_Passes,\n    carries = Carries_Carries,\n    progressive_carries = PrgC_Carries,\n    \n    takeons_attempted = Att_Take_Ons,\n    successful_takeons = Succ_Take_Ons\n  )\n\ncoalesce_fraction <- purrr::compose(\n  \\(num, den) ifelse(num > 0 & den == 0, 0, num / den),\n  \\(x) dplyr::coalesce(x, 0),\n  \\(x) ifelse(x > 1, 1, x),\n  \\(x) ifelse(x < 0, 0, x),\n  .dir = 'forward'\n)\n\nsummarize_all_metric_columns <- function(df, ...) {\n  df |> \n    dplyr::group_by(..., league, season, team, player) |> \n    dplyr::summarize(\n      dplyr::across(\n        c(minutes_played, dplyr::all_of(BASE_METRICS)), \n        sum\n      )\n    ) |> \n    dplyr::ungroup() |> \n    dplyr::mutate(\n      ## Mark Noble with the epic 1 goal on 0 shots https://fbref.com/en/matches/b56fd899/Watford-West-Ham-United-December-28-2021-Premier-League\n      goal_conversion_rate = coalesce_fraction(goals, shots),\n      pass_completion_rate = coalesce_fraction(passes_completed, passes_attempted),\n      successful_takeon_rate = coalesce_fraction(successful_takeons, takeons_attempted)\n    )\n}\n\nplayer_team_season_mapping <- player_match_stats |> \n  dplyr::group_by(league, season, team, player) |>\n  dplyr::filter(minutes_played > 0L) |> \n  dplyr::summarize(\n    dplyr::across(minutes_played, sum),\n    matches_played = dplyr::n_distinct(match_id)\n  ) |> \n  dplyr::ungroup()\n\nplayer_season_stats <- summarize_all_metric_columns(player_match_stats)\n\n## Franks et al. used 250 min played for the NBA\n## https://github.com/afranks86/meta-analytics/blob/1871d24762184afa69f29a2b5b348431e70b9b2b/basketballReliability.R#L60\nMIN_MINUTES_PLAYED <- 270\neligible_player_season_stats <- player_season_stats |> \n  dplyr::filter(minutes_played >= MIN_MINUTES_PLAYED)\n\neligible_player_match_stats <- player_match_stats |> \n  dplyr::semi_join(\n    eligible_player_season_stats,\n    by = dplyr::join_by(league, season, team, player)\n  ) |> \n  dplyr::arrange(league, season, team, player)\n```\n:::\n\n\n\n\nAfter some light wrangling, the data we'll be working with looks like this.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\ndplyr::glimpse(eligible_player_match_stats)\n#> Rows: 271,416\n#> Columns: 27\n#> $ league              <chr> \"ENG-M-1st\", \"ENG-M-1st\", \"ENG-M-1st\", \"ENG-M-1…\n#> $ season              <chr> \"2018/19\", \"2018/19\", \"2018/19\", \"2018/19\", \"20…\n#> $ date                <date> 2018-08-12, 2018-08-18, 2018-08-25, 2018-09-02…\n#> $ match_id            <chr> \"478e9dab\", \"9b69882c\", \"0014076a\", \"c1503e09\",…\n#> $ team                <chr> \"Arsenal\", \"Arsenal\", \"Arsenal\", \"Arsenal\", \"Ar…\n#> $ player              <chr> \"Aaron Ramsey\", \"Aaron Ramsey\", \"Aaron Ramsey\",…\n#> $ minutes_played      <dbl> 53, 23, 90, 90, 79, 79, 62, 24, 11, 13, 18, 16,…\n#> $ goals               <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,…\n#> $ assists             <dbl> 0, 0, 0, 0, 0, 2, 0, 1, 0, 0, 0, 1, 0, 2, 0, 0,…\n#> $ shots               <dbl> 1, 2, 2, 2, 0, 1, 0, 1, 0, 0, 0, 1, 0, 3, 1, 0,…\n#> $ shots_on_target     <dbl> 1, 1, 1, 2, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0,…\n#> $ touches             <dbl> 18, 11, 67, 78, 63, 34, 24, 26, 17, 10, 12, 12,…\n#> $ tackles             <dbl> 2, 0, 2, 1, 2, 0, 2, 0, 1, 0, 0, 0, 1, 2, 1, 0,…\n#> $ interceptions       <dbl> 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,…\n#> $ blocks              <dbl> 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0,…\n#> $ xg                  <dbl> 0.0, 0.1, 0.1, 0.1, 0.0, 0.0, 0.0, 0.1, 0.0, 0.…\n#> $ npxg                <dbl> 0.0, 0.1, 0.1, 0.1, 0.0, 0.0, 0.0, 0.1, 0.0, 0.…\n#> $ xa                  <dbl> 0.1, 0.0, 0.2, 0.2, 0.1, 0.4, 0.0, 0.1, 0.0, 0.…\n#> $ sca                 <dbl> 1, 1, 5, 7, 4, 3, 0, 1, 0, 0, 0, 1, 1, 3, 1, 0,…\n#> $ gca                 <dbl> 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 0, 1, 0, 2, 0, 0,…\n#> $ passes_completed    <dbl> 9, 6, 48, 51, 49, 26, 16, 16, 13, 5, 11, 7, 8, …\n#> $ passes_attempted    <dbl> 13, 9, 61, 66, 58, 31, 20, 21, 15, 7, 12, 10, 8…\n#> $ progressive_passes  <dbl> 1, 1, 9, 6, 5, 4, 2, 2, 1, 0, 1, 1, 0, 3, 4, 3,…\n#> $ carries             <dbl> 5, 7, 41, 49, 43, 27, 21, 16, 11, 8, 11, 7, 7, …\n#> $ progressive_carries <dbl> 1, 0, 5, 2, 1, 0, 0, 0, 1, 0, 0, 1, 0, 1, 4, 2,…\n#> $ takeons_attempted   <dbl> 1, 0, 3, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 2,…\n#> $ successful_takeons  <dbl> 1, 0, 3, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,…\n```\n:::\n\n\nEasy enough. Now we can dive right in and calculate the meta-metrics of interest.\n\n### Discrimination\n\nWe'll beging with the discrimination meta-metric, which means we'll need to calculate \"bootstrap variance\", $BV$, and, \"seasonal variance\", $SV$, as shown in @eq-discrimination-short. Starting with the former, we need to first resample player matches within teams, with replacement.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Bootstrapping player-seasons\"}\nresample_stats <- function(player_match_stats) {\n  \n  match_ids <- player_match_stats |>\n    dplyr::distinct(league, season, team, date, match_id) |> \n    dplyr::arrange(league, season, team, date)\n  \n  ## can't just specify to resample 38 matches per team since different leagues \n  ## have different season lengths (Bundesliga)\n  resampled_match_ids <- match_ids |> \n    dplyr::select(league, season, team, match_id) |> \n    dplyr::group_by(league, season, team) |> \n    dplyr::summarize(\n      match_id = list(match_id)\n    ) |> \n    dplyr::ungroup() |> \n    dplyr::mutate(\n      match_id = purrr::map(\n        match_id,\n        \\(.x) {\n          sample(.x, size = length(.x), replace = TRUE)\n        })\n    ) |> \n    tidyr::unnest(match_id)\n  \n  resampled_match_ids |> \n    dplyr::inner_join(\n      player_match_stats,\n      by = dplyr::join_by(league, season, team, match_id),\n      relationship = 'many-to-many'\n    )\n}\n\n## Franks et al. used 20 bootstrap replicates\n## https://github.com/afranks86/meta-analytics/blob/1871d24762184afa69f29a2b5b348431e70b9b2b/basketballReliability.R#L70\nN_BOOSTRAPS <- 20\nset.seed(42)\nresampled_player_match_stats <- purrr::map_dfr(\n  rlang::set_names(1:N_BOOSTRAPS),\n  \\(...) {\n    resample_stats(\n      player_match_stats = eligible_player_match_stats\n    )\n  },\n  .id = 'bootstrap_id'\n) |> \n  dplyr::mutate(bootstrap_id = as.integer(bootstrap_id))\n```\n:::\n\n\nAnd, then, after we aggregate over the bootstraps to create single player-season summaries, we get a data frame that looks like this\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Bootstrap aggregation\"}\nresampled_player_match_stats <- resampled_player_match_stats |> \n  ## Franks et al. did this\n  ## https://github.com/afranks86/meta-analytics/blob/1871d24762184afa69f29a2b5b348431e70b9b2b/basketballReliability.R#L78\n  dplyr::filter(minutes_played < (0.75 * MIN_MINUTES_PLAYED))\n\nresampled_player_season_stats <- resampled_player_match_stats |> \n  summarize_all_metric_columns(bootstrap_id) |> \n  dplyr::arrange(bootstrap_id, league, season, team, player)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\ndplyr::glimpse(resampled_player_season_stats)\n#> Rows: 234,172\n#> Columns: 29\n#> $ bootstrap_id           <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n#> $ league                 <chr> \"ENG-M-1st\", \"ENG-M-1st\", \"ENG-M-1st\", \"ENG-…\n#> $ season                 <chr> \"2018/19\", \"2018/19\", \"2018/19\", \"2018/19\", …\n#> $ team                   <chr> \"Arsenal\", \"Arsenal\", \"Arsenal\", \"Arsenal\", …\n#> $ player                 <chr> \"Aaron Ramsey\", \"Ainsley Maitland-Niles\", \"A…\n#> $ minutes_played         <dbl> 1349, 1053, 1714, 2767, 2213, 1357, 989, 138…\n#> $ goals                  <dbl> 2, 2, 3, 11, 4, 3, 0, 5, 0, 0, 7, 0, 2, 20, …\n#> $ assists                <dbl> 1, 1, 4, 8, 2, 5, 3, 0, 3, 0, 2, 0, 4, 4, 0,…\n#> $ shots                  <dbl> 28, 8, 31, 102, 24, 30, 7, 5, 21, 20, 14, 9,…\n#> $ shots_on_target        <dbl> 9, 6, 15, 28, 11, 11, 4, 5, 1, 4, 9, 0, 6, 2…\n#> $ touches                <dbl> 1058, 706, 1096, 1335, 2279, 927, 680, 1052,…\n#> $ tackles                <dbl> 37, 28, 21, 35, 44, 17, 9, 21, 61, 35, 9, 21…\n#> $ interceptions          <dbl> 10, 17, 14, 19, 34, 9, 13, 36, 55, 23, 3, 0,…\n#> $ blocks                 <dbl> 4, 33, 21, 26, 23, 25, 6, 20, 41, 29, 9, 9, …\n#> $ xg                     <dbl> 2.7, 1.6, 4.2, 11.0, 1.0, 3.9, 0.3, 1.9, 0.6…\n#> $ npxg                   <dbl> 2.7, 1.6, 4.2, 11.0, 1.0, 3.9, 0.3, 1.9, 0.6…\n#> $ xa                     <dbl> 2.4, 0.9, 5.3, 3.6, 2.0, 4.8, 0.9, 0.5, 0.7,…\n#> $ sca                    <dbl> 54, 21, 68, 99, 63, 66, 20, 9, 41, 60, 94, 2…\n#> $ gca                    <dbl> 6, 2, 8, 14, 4, 15, 5, 0, 12, 2, 10, 0, 10, …\n#> $ passes_completed       <dbl> 733, 444, 619, 677, 1656, 552, 470, 832, 126…\n#> $ passes_attempted       <dbl> 906, 561, 847, 933, 2059, 724, 580, 905, 150…\n#> $ progressive_passes     <dbl> 97, 59, 120, 120, 221, 83, 46, 37, 137, 223,…\n#> $ carries                <dbl> 630, 334, 724, 738, 1085, 454, 333, 602, 978…\n#> $ progressive_carries    <dbl> 51, 31, 116, 61, 32, 53, 28, 13, 32, 91, 80,…\n#> $ takeons_attempted      <dbl> 21, 31, 80, 96, 12, 45, 9, 2, 27, 33, 35, 4,…\n#> $ successful_takeons     <dbl> 15, 20, 43, 63, 6, 11, 8, 2, 12, 25, 25, 2, …\n#> $ goal_conversion_rate   <dbl> 0.07142857, 0.25000000, 0.09677419, 0.107843…\n#> $ pass_completion_rate   <dbl> 0.8090508, 0.7914439, 0.7308146, 0.7256163, …\n#> $ successful_takeon_rate <dbl> 0.7142857, 0.6451613, 0.5375000, 0.6562500, …\n```\n:::\n\n\nNext, we calculate the bootstrap variance across the player-season bootstraps. Then we take the average of the bootstrap variance over all player-seasons, grouping by season, to arrive at $BV$. (1 value per season and metric.)\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Calculating bootstrap variance, BV\"}\npivot_metric_columns <- function(df) {\n  df |> \n    dplyr::select(\n      league,\n      season,\n      team,\n      player,\n      dplyr::all_of(ALL_METRICS)\n    ) |> \n    tidyr::pivot_longer(\n      -c(league, season, team, player),\n      names_to = 'metric',\n      values_to = 'value'\n    )\n}\n\nresampled_player_season_variance <- resampled_player_season_stats |> \n  pivot_metric_columns() |> \n  dplyr::group_by(season, team, player, metric) |> \n  dplyr::summarize(\n    bv = var(value, na.rm = TRUE)\n  ) |> \n  dplyr::ungroup()\n\nbv <- resampled_player_season_variance |> \n  dplyr::group_by(season, metric) |> \n  dplyr::summarize(\n    bv = mean(bv, na.rm = TRUE)\n  ) |> \n  dplyr::ungroup() |> \n  dplyr::arrange(season, metric)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nbv\n#> # A tibble: 138 × 3\n#>    season  metric                         bv\n#>    <chr>   <chr>                       <dbl>\n#>  1 2017/18 assists                  1.64    \n#>  2 2017/18 blocks                  26.3     \n#>  3 2017/18 carries               7712.      \n#>  4 2017/18 gca                      4.65    \n#>  5 2017/18 goal_conversion_rate     0.00625 \n#>  6 2017/18 goals                    2.36    \n#>  7 2017/18 interceptions           33.4     \n#>  8 2017/18 npxg                     0.761   \n#>  9 2017/18 pass_completion_rate     0.000639\n#> 10 2017/18 passes_attempted     15725.      \n#> # ℹ 128 more rows\n```\n:::\n\n\nNext, we move on to the \"seasonal variance\", $SV$. This is actually pretty trivial, as it's just a direct call to `stats::var` on the empirical player-season aggregates, grouping by season. We end up with 1 row per season and metric, as we do with $BV$.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Calculating seasonal variance, SV\"}\npivoted_player_season_stats <- pivot_metric_columns(player_season_stats)\n\nsv <- pivoted_player_season_stats |>\n  dplyr::group_by(season, metric) |> \n  dplyr::summarize(\n    sv = var(value, na.rm = TRUE)\n  ) |> \n  dplyr::ungroup() |> \n  dplyr::arrange(season, metric)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nsv\n#> # A tibble: 138 × 3\n#>    season  metric                        sv\n#>    <chr>   <chr>                      <dbl>\n#>  1 2017/18 assists                   4.33  \n#>  2 2017/18 blocks                  186.    \n#>  3 2017/18 carries              153542.    \n#>  4 2017/18 gca                      19.3   \n#>  5 2017/18 goal_conversion_rate      0.0120\n#>  6 2017/18 goals                    12.4   \n#>  7 2017/18 interceptions           319.    \n#>  8 2017/18 npxg                      7.27  \n#>  9 2017/18 pass_completion_rate      0.0112\n#> 10 2017/18 passes_attempted     337383.    \n#> # ℹ 128 more rows\n```\n:::\n\n\n## Conclusion\n\n> Our discrimination meta-metric quantifies how useful a metric is for distinguishing between players within a given season, whereas our stability meta-metric measures how much a metric varies season to season due to changes in context and player skill after removing chance variation\n\n[Repository](https://github.com/afranks86/meta-analytics)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}