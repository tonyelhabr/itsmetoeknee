{
  "hash": "275a59c14ba02848d2926119f799d2d7",
  "result": {
    "markdown": "---\ntitle: Meta-Analytics for Soccer \ndescription: To what extent does a state differentiate between players? How much does the stat's value change over time?\ndate: 2023-09-08\ncategories:\n  - r\n  - soccer\nimage: discrimination-vs-stability.png\ntoc-depth: 4\nexecute: \n  code-fold: true\n  eval: false\n  include: true\n  echo: true\n---\n\n\n## Introduction\n\nThis blog post demonstrates how to calculate the **discrimination** and **stability** \"meta-metrics\" proposed by [Franks et al. (2017)](https://www.degruyter.com/document/doi/10.1515/jqas-2016-0098/html) for an array of soccer stats. Before the computations (*\"Inference\"*), I start by defining these meta-metrics (*\"Methods\"*), although I gloss over a lot of details for the sake of brevity. At the end, in *\"Results and Discussion\"*, I briefly discuss how my results compare to those for Franks et al., who analyzed basketball and hockey stats.\n\n### Background\n\nIn the realm of sports, data analysis has grown significantly, introducing numerous metrics to guide coaching, management, and, of course, fans. However, this proliferation has also led to confusion, with overlapping and sometimes conflicting metrics. To address this, Franks et al.[^1] propose three \"meta-metrics\" to help determine which metrics offer unique and dependable information for decision-makers.\n\n[^1]: If it means anything, the *Meta-analytics* paper has [40 citations](https://scholar.google.com/scholar?cites=13818794209592074425&as_sdt=5,44&sciodt=0,44&hl=en) at the time of writing, suggesting it has had a non-trivial influence on subsequent sports analytics research.\n\nBy examining sources of variation in sports metrics (e.g. intrinsic player skill), Franks et al. introduce three meta-metrics to assess player performance stats:\n\n-   **discrimination**: How good is the metric at telling players apart?\n-   **stability**: How likely is it that a player maintains the same performance for the metric in the next season?\n-   **independence**: Does the stat tell us something different about players that other stats don't tell us?\n\n## Methods\n\n::: callout-warning\nI skip over a lot of details from Frank et al.'s paper here. I'd encourage an interested reader to review the original paper.\n:::\n\n### Discrimination\n\nSimplifying the formulation of Franks et al., let's define discrimination as follows:\n\n$$\n1 - \\frac{BV}{SV}.\n$$ {#eq-discrimination-short}\n\n$BV$ is the average sampling **v**ariance of a metric after **b**ootstrapping matches. (This variance measure is unique in that it involves resampling, while the others are simply calculated on the observed data.) $SV$ is the total **v**ariance of a metric between players in a given **s**eason.\n\nAltogether, this equation describes **the fraction of variance between players due to true differences in player ability**. A value closer to 1 indicates a metric that can differentiate between players more precisely.\n\n### Stability\n\nAgain, simplifying the original equation from Franks et al., we define stability as so:\n\n$$\n1 - \\frac{WV - BV}{TV - BV}.\n$$ {#eq-stability-short}\n\n$WV$ represents the average **v**ariance among seasons \"**w**ithin\" a player, before accounting for sampling variance ($BV$). $TV$ is the **t**otal **v**ariance of a metric over all seasons, before accounting for sampling variance.\n\nOn the whole, this equation represent **the fraction of total variance that is due to within-player changes over time**. A value closer to 1 indicates that the metric value for a given player is less likely to change from season to season.\n\n## Inference\n\n### Data\n\nWe'll be using public data from [FBref](https://fbref.com/) for the 2018/19 - 2022/23 seasons of the [the Big 5 European soccer leagues](https://fbref.com/en/comps/Big5/Big-5-European-Leagues-Stats).\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Retrieve and wrangle data\"}\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(purrr)\nlibrary(tibble)\n\nload_fb_advanced_match_stats <- function(country, gender, tier, stat_type, team_or_player, season_end_year = NA) {\n  \n  url <- sprintf(\n    'https://github.com/JaseZiv/worldfootballR_data/releases/download/fb_advanced_match_stats/%s_%s_%s_%s_%s_advanced_match_stats.rds',\n    country,\n    gender,\n    tier,\n    stat_type,\n    team_or_player\n  )\n  readRDS(url(url))\n}\n\npossibly_load_fb_advanced_match_stats <- purrr::possibly(\n  load_fb_advanced_match_stats, \n  otherwise = tibble::tibble(),\n  quiet = TRUE\n)\n\nparams <- tidyr::expand_grid(\n  country = c('ENG', 'ESP', 'FRA', 'GER', 'ITA'),\n  gender = 'M',\n  tier = '1st',\n  stat_type = 'summary',\n  team_or_player = 'player'\n) |> \n  as.list()\n\nraw_player_match_stats <- purrr::pmap_dfr(\n  params,\n  possibly_load_fb_advanced_match_stats\n) |> \n  dplyr::filter(\n    ## stop at 2022/23 season\n    Season_End_Year < 2024L,\n    ## don't include keepers\n    !grepl('GK', Pos)\n  )\n\nALL_METRICS <- c(\n  'goals' = 'Goals',\n  'assists' = 'Assists',\n  'shots' = 'Shots',\n  'shots_on_target' = 'Shots on Target',\n  'tackles' = 'Tackles',\n  'interceptions' = 'Interceptions',\n  'xg' = 'xG',\n  'xa' = 'xA',\n  'goals_xg_ratio' = 'Goals/xG',\n  'carries' = 'Carries',\n  'shot_conversion_rate' = 'Shots Conversion Rate',\n  'pass_completion_rate' = 'Pass Completion Rate',\n  'goals_p90' = 'Goals/90',\n  'shots_p90' = 'Shots/90',\n  'xg_p90' = 'xG/90'\n)\n\nsafe_divide <- function(num, den) {\n  ifelse(\n    den == 0 | is.na(den),\n    NA_real_,\n    dplyr::coalesce(num / den, 0)\n  )\n}\n\ncoalesce_fraction <- purrr::compose(\n  \\(num, den) safe_divide(num, den),\n  \\(x) ifelse(x > 1, 1, x),\n  \\(x) ifelse(x < 0, 0, x),\n  .dir = 'forward'\n)\n\nadd_rate_and_p90_metric_columns <- function(df) {\n  df |> \n    dplyr::mutate(\n      ## Mark Noble with the epic 1 goal on 0 shots https://fbref.com/en/matches/b56fd899/Watford-West-Ham-United-December-28-2021-Premier-League\n      shot_conversion_rate = coalesce_fraction(goals, shots),\n      pass_completion_rate = coalesce_fraction(passes_completed, passes_attempted),\n      goals_xg_ratio = safe_divide(goals, xg)\n    ) |> \n    dplyr::mutate(\n      dplyr::across(\n        c(goals, shots, xg),\n        list(\n          p90 = \\(.x) 90 * .x / minutes_played\n        )\n      )\n    )\n}\n\nsummarize_all_metric_columns <- function(df, ...) {\n  matches_played <- df |> \n    dplyr::group_by(league, season, team, player, nation) |>\n    dplyr::filter(minutes_played > 0L) |> \n    dplyr::summarize(\n      matches_played = dplyr::n_distinct(match_id)\n    ) |> \n    dplyr::ungroup()\n  \n  df |> \n    dplyr::group_by(..., league, season, team, player, nation) |> \n    dplyr::summarize(\n      dplyr::across(\n        c(minutes_played:dplyr::last_col()),\n        sum\n      )\n    ) |> \n    dplyr::ungroup() |> \n    add_rate_and_p90_metric_columns() |> \n    dplyr::inner_join(\n      matches_played,\n      by = dplyr::join_by(league, season, team, player, nation)\n    ) |> \n    dplyr::relocate(\n      matches_played,\n      .before = minutes_played\n    )\n}\n\n\nplayer_match_stats <- raw_player_match_stats |> \n  dplyr::transmute(\n    league = sprintf('%s-%s-%s', Country, Gender, Tier),\n    season = sprintf('%s/%s', Season_End_Year - 1, substr(Season_End_Year, 3, 4)),\n    date = Match_Date,\n    match_id = basename(dirname(MatchURL)),\n    team = Team,\n    player = Player,\n    nation = Nation, ## to help uniquely identify players\n    \n    minutes_played = Min,\n    \n    goals = Gls, ## includes pks\n    assists = Ast,\n    shots = Sh, ## does not include pk attempts\n    shots_on_target = SoT,\n    tackles = Tkl,\n    interceptions = Int,\n    \n    passes_completed = Cmp_Passes,\n    passes_attempted = Att_Passes,\n    carries = Carries_Carries,\n    \n    xg = xG_Expected,\n    xa = xAG_Expected\n  ) |> \n  add_rate_and_p90_metric_columns()\n\nplayer_season_stats <- summarize_all_metric_columns(player_match_stats)\n\n## Franks et al. used 250 min played for the NBA\n## https://github.com/afranks86/meta-analytics/blob/1871d24762184afa69f29a2b5b348431e70b9b2b/basketballReliability.R#L60\nMIN_MINUTES_PLAYED <- 270\neligible_player_season_stats <- player_season_stats |> \n  dplyr::filter(minutes_played >= MIN_MINUTES_PLAYED)\n\neligible_player_match_stats <- player_match_stats |> \n  dplyr::semi_join(\n    eligible_player_season_stats,\n    by = dplyr::join_by(league, season, team, player, nation)\n  ) |> \n  dplyr::arrange(league, season, team, player, nation)\n\n## drop players with 0s for any given metric across any season?\n##   looks like they only did that for testing a 1-season evaluation:\n##   https://github.com/afranks86/meta-analytics/blob/1871d24762184afa69f29a2b5b348431e70b9b2b/basketballReliability.R#L25\n# eligible_player_season_stats |> \n#   pivot_metric_columns() |> \n#   group_by(league, team, player, metric) |> \n#   summarize(has_any_zero = any(value == 0)) |> \n#   ungroup() |> \n#   filter(has_any_zero)\n```\n:::\n\n\n\n\nAfter some light wrangling, the player-match data looks like this.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\ndplyr::glimpse(eligible_player_match_stats)\n#> Rows: 271,416\n#> Columns: 25\n#> $ league               <chr> \"ENG-M-1st\", \"ENG-M-1st\", \"ENG-M-1st\", \"ENG-M-…\n#> $ season               <chr> \"2018/19\", \"2018/19\", \"2018/19\", \"2018/19\", \"2…\n#> $ date                 <chr> \"2018-08-12\", \"2018-08-18\", \"2018-08-25\", \"201…\n#> $ match_id             <chr> \"478e9dab\", \"9b69882c\", \"0014076a\", \"c1503e09\"…\n#> $ team                 <chr> \"Arsenal\", \"Arsenal\", \"Arsenal\", \"Arsenal\", \"A…\n#> $ player               <chr> \"Aaron Ramsey\", \"Aaron Ramsey\", \"Aaron Ramsey\"…\n#> $ nation               <chr> \"WAL\", \"WAL\", \"WAL\", \"WAL\", \"WAL\", \"WAL\", \"WAL…\n#> $ minutes_played       <dbl> 53, 23, 90, 90, 79, 79, 62, 24, 11, 13, 18, 16…\n#> $ goals                <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0…\n#> $ assists              <dbl> 0, 0, 0, 0, 0, 2, 0, 1, 0, 0, 0, 1, 0, 2, 0, 0…\n#> $ shots                <dbl> 1, 2, 2, 2, 0, 1, 0, 1, 0, 0, 0, 1, 0, 3, 1, 0…\n#> $ shots_on_target      <dbl> 1, 1, 1, 2, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0…\n#> $ tackles              <dbl> 2, 0, 2, 1, 2, 0, 2, 0, 1, 0, 0, 0, 1, 2, 1, 0…\n#> $ interceptions        <dbl> 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0…\n#> $ passes_completed     <dbl> 9, 6, 48, 51, 49, 26, 16, 16, 13, 5, 11, 7, 8,…\n#> $ passes_attempted     <dbl> 13, 9, 61, 66, 58, 31, 20, 21, 15, 7, 12, 10, …\n#> $ carries              <dbl> 5, 7, 41, 49, 43, 27, 21, 16, 11, 8, 11, 7, 7,…\n#> $ xg                   <dbl> 0.0, 0.1, 0.1, 0.1, 0.0, 0.0, 0.0, 0.1, 0.0, 0…\n#> $ xa                   <dbl> 0.1, 0.0, 0.2, 0.2, 0.1, 0.4, 0.0, 0.1, 0.0, 0…\n#> $ shot_conversion_rate <dbl> 0, 0, 0, 0, NA, 0, NA, 1, NA, NA, NA, 0, NA, 0…\n#> $ pass_completion_rate <dbl> 0.6923077, 0.6666667, 0.7868852, 0.7727273, 0.…\n#> $ goals_xg_ratio       <dbl> NA, 0.000000, 0.000000, 0.000000, NA, NA, NA, …\n#> $ goals_p90            <dbl> 0.000000, 0.000000, 0.000000, 0.000000, 0.0000…\n#> $ shots_p90            <dbl> 1.698113, 7.826087, 2.000000, 2.000000, 0.0000…\n#> $ xg_p90               <dbl> 0.0000000, 0.3913043, 0.1000000, 0.1000000, 0.…\n```\n:::\n\n\nThere are a lot more stats we could pull in, but I've opted for a relatively small set of 15 stats[^2]:\n\n[^2]: This isn't meant to be an explainer of what these stats are or why they were chosen. Nonetheless, it's worth pointing out the different types of stats, as it is relevant to the calculation relationship between discrimination and stability, as we shall see.\n\n-   \"Un-adjusted\" (i.e. not normalized for the number of minutes played) **counting** stats: goals, assists, shots, shots on target, tackles, interceptions, and carries\n-   Un-adjusted **\"advanced\"** stats: [expected goals (xG)](https://theanalyst.com/na/2023/08/what-is-expected-goals-xg/), [expected assists (xA)](https://theanalyst.com/eu/2021/03/what-are-expected-assists-xa/), and goals/xG ratio\n-   **Rate** metrics: pass completion rate and shot conversion rate (i.e. goals divided by shots)\n-   **\"Per 90\"** versions of other stats: goals/90, shots/90, and xG/90\n\nNow we can start to calculate the meta-metrics.\n\n### Discrimination\n\nWe'll begin with the discrimination meta-metric, which means we'll need to calculate \"bootstrap variance\", $BV$, and, \"seasonal variance\", $SV$, as shown in @eq-discrimination-short.\n\nStarting with the former, we resample player matches within teams, with replacement.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Bootstrap observed player-seasons\"}\nresample_stats <- function(player_match_stats) {\n  \n  match_ids <- player_match_stats |>\n    dplyr::distinct(league, season, team, date, match_id) |> \n    dplyr::arrange(league, season, team, date)\n  \n  ## can't just specify to resample 38 matches per team since different leagues \n  ## have different season lengths (Bundesliga)\n  resampled_match_ids <- match_ids |> \n    dplyr::select(league, season, team, match_id) |> \n    dplyr::group_by(league, season, team) |> \n    dplyr::summarize(\n      match_id = list(match_id)\n    ) |> \n    dplyr::ungroup() |> \n    dplyr::mutate(\n      match_id = purrr::map(\n        match_id,\n        \\(.x) {\n          sample(.x, size = length(.x), replace = TRUE)\n        })\n    ) |> \n    tidyr::unnest(match_id)\n  \n  resampled_match_ids |> \n    dplyr::inner_join(\n      player_match_stats,\n      by = dplyr::join_by(league, season, team, match_id),\n      relationship = 'many-to-many'\n    )\n}\n\n## Franks et al. used 20 bootstrap replicates\n## https://github.com/afranks86/meta-analytics/blob/1871d24762184afa69f29a2b5b348431e70b9b2b/basketballReliability.R#L70\nN_BOOSTRAPS <- 20\nset.seed(42)\nresampled_player_match_stats <- purrr::map_dfr(\n  rlang::set_names(1:N_BOOSTRAPS),\n  \\(...) {\n    resample_stats(\n      player_match_stats = eligible_player_match_stats\n    )\n  },\n  .id = 'bootstrap_id'\n) |> \n  dplyr::mutate(bootstrap_id = as.integer(bootstrap_id))\n```\n:::\n\n\nAfter we aggregate over the matches in each bootstrap to create player-season summaries per bootstrap, we get a data frame that looks like this.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Aggregate bootstraps\"}\nresampled_player_match_stats <- resampled_player_match_stats |> \n  ## Franks et al. did this\n  ## https://github.com/afranks86/meta-analytics/blob/1871d24762184afa69f29a2b5b348431e70b9b2b/basketballReliability.R#L78\n  dplyr::filter(minutes_played < (0.75 * MIN_MINUTES_PLAYED))\n\nresampled_player_season_stats <- resampled_player_match_stats |> \n  summarize_all_metric_columns(bootstrap_id) |> \n  dplyr::arrange(bootstrap_id, league, season, team, player, nation)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\ndplyr::glimpse(resampled_player_season_stats)\n#> Rows: 234,172\n#> Columns: 25\n#> $ bootstrap_id         <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n#> $ league               <chr> \"ENG-M-1st\", \"ENG-M-1st\", \"ENG-M-1st\", \"ENG-M-…\n#> $ season               <chr> \"2018/19\", \"2018/19\", \"2018/19\", \"2018/19\", \"2…\n#> $ team                 <chr> \"Arsenal\", \"Arsenal\", \"Arsenal\", \"Arsenal\", \"A…\n#> $ player               <chr> \"Aaron Ramsey\", \"Ainsley we-Niles\", \"Ale…\n#> $ nation               <chr> \"WAL\", \"ENG\", \"NGA\", \"FRA\", \"SUI\", \"ARM\", \"ESP…\n#> $ matches_played       <int> 28, 16, 35, 35, 29, 25, 19, 17, 34, 33, 24, 8,…\n#> $ minutes_played       <dbl> 1349, 1053, 1714, 2767, 2213, 1357, 989, 1385,…\n#> $ goals                <dbl> 2, 2, 3, 11, 4, 3, 0, 5, 0, 0, 7, 0, 2, 20, 0,…\n#> $ assists              <dbl> 1, 1, 4, 8, 2, 5, 3, 0, 3, 0, 2, 0, 4, 4, 0, 5…\n#> $ shots                <dbl> 28, 8, 31, 102, 24, 30, 7, 5, 21, 20, 14, 9, 7…\n#> $ shots_on_target      <dbl> 9, 6, 15, 28, 11, 11, 4, 5, 1, 4, 9, 0, 6, 27,…\n#> $ tackles              <dbl> 37, 28, 21, 35, 44, 17, 9, 21, 61, 35, 9, 21, …\n#> $ interceptions        <dbl> 10, 17, 14, 19, 34, 9, 13, 36, 55, 23, 3, 0, 3…\n#> $ passes_completed     <dbl> 733, 444, 619, 677, 1656, 552, 470, 832, 1269,…\n#> $ passes_attempted     <dbl> 906, 561, 847, 933, 2059, 724, 580, 905, 1504,…\n#> $ carries              <dbl> 630, 334, 724, 738, 1085, 454, 333, 602, 978, …\n#> $ xg                   <dbl> 2.7, 1.6, 4.2, 11.0, 1.0, 3.9, 0.3, 1.9, 0.6, …\n#> $ xa                   <dbl> 2.4, 0.9, 5.3, 3.6, 2.0, 4.8, 0.9, 0.5, 0.7, 0…\n#> $ shot_conversion_rate <dbl> 0.07142857, 0.25000000, 0.09677419, 0.10784314…\n#> $ pass_completion_rate <dbl> 0.8090508, 0.7914439, 0.7308146, 0.7256163, 0.…\n#> $ goals_xg_ratio       <dbl> 0.7407407, 1.2500000, 0.7142857, 1.0000000, 4.…\n#> $ goals_p90            <dbl> 0.1334322, 0.1709402, 0.1575263, 0.3577882, 0.…\n#> $ shots_p90            <dbl> 1.8680504, 0.6837607, 1.6277713, 3.3176726, 0.…\n#> $ xg_p90               <dbl> 0.180133432, 0.136752137, 0.220536756, 0.35778…\n```\n:::\n\n\nNext, we calculate the variance across the player-season bootstraps, and then average the bootstrap variance over all player-seasons, grouping by season, to arrive at $BV$. We end up with one variance value per season and metric.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Calculate average bootstrap variance, BV\"}\npivot_metric_columns <- function(df) {\n  df |> \n    dplyr::select(\n      league,\n      season,\n      team,\n      player,\n      nation,\n      dplyr::any_of(names(ALL_METRICS))\n    ) |> \n    tidyr::pivot_longer(\n      -c(league, season, team, player, nation),\n      names_to = 'metric',\n      values_to = 'value'\n    )\n}\n\nresampled_player_season_variance <- resampled_player_season_stats |> \n  pivot_metric_columns() |> \n  dplyr::group_by(season, team, player, metric) |> \n  dplyr::summarize(\n    bv = var(value, na.rm = TRUE)\n  ) |> \n  dplyr::ungroup()\n\nbv <- resampled_player_season_variance |> \n  dplyr::group_by(season, metric) |> \n  dplyr::summarize(\n    bv = mean(bv, na.rm = TRUE)\n  ) |> \n  dplyr::ungroup() |> \n  dplyr::arrange(season, metric)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nbv\n#> # A tibble: 90 × 3\n#>    season  metric                        bv\n#>    <chr>   <chr>                      <dbl>\n#>  1 2017/18 assists                 1.64    \n#>  2 2017/18 carries              7712.      \n#>  3 2017/18 goals                   2.36    \n#>  4 2017/18 goals_p90               0.0102  \n#>  5 2017/18 goals_xg_ratio          1.40    \n#>  6 2017/18 interceptions          33.4     \n#>  7 2017/18 pass_completion_rate    0.000577\n#>  8 2017/18 shot_conversion_rate    0.00604 \n#>  9 2017/18 shots                  32.5     \n#> 10 2017/18 shots_on_target         8.39    \n#> # ℹ 80 more rows\n```\n:::\n\n\nNext, we move on to the \"seasonal variance\", $SV$. This is actually pretty trivial, as it's just a direct call to `stats::var` on the observed player-season aggregates, grouping by season. Again, we end up with one row per season and metric.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Calculate seasonal variance, SV\"}\npivoted_player_season_stats <- pivot_metric_columns(player_season_stats)\n\nsv <- pivoted_player_season_stats |>\n  dplyr::group_by(season, metric) |> \n  dplyr::summarize(\n    sv = var(value, na.rm = TRUE)\n  ) |> \n  dplyr::ungroup() |> \n  dplyr::arrange(season, metric)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nsv\n#> # A tibble: 90 × 3\n#>    season  metric                         sv\n#>    <chr>   <chr>                       <dbl>\n#>  1 2017/18 assists                   4.33   \n#>  2 2017/18 carries              153542.     \n#>  3 2017/18 goals                    12.4    \n#>  4 2017/18 goals_p90                 0.302  \n#>  5 2017/18 goals_xg_ratio            2.15   \n#>  6 2017/18 interceptions           319.     \n#>  7 2017/18 pass_completion_rate      0.00948\n#>  8 2017/18 shot_conversion_rate      0.0128 \n#>  9 2017/18 shots                   480.     \n#> 10 2017/18 shots_on_target          73.4    \n#> # ℹ 80 more rows\n```\n:::\n\n\nFinally, we bring $BV$ and $SV$ together to calculate discrimination, by season.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Calculate discrimination\"}\ndiscrimination <- bv |> \n  dplyr::inner_join(\n    sv,\n    by = dplyr::join_by(season, metric)\n  ) |> \n  dplyr::mutate(\n    discrimination = 1 - bv / sv\n  ) |> \n  dplyr::arrange(season, metric)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\ndiscrimination\n#> # A tibble: 90 × 5\n#>    season  metric                        bv           sv discrimination\n#>    <chr>   <chr>                      <dbl>        <dbl>          <dbl>\n#>  1 2017/18 assists                 1.64          4.33             0.621\n#>  2 2017/18 carries              7712.       153542.               0.950\n#>  3 2017/18 goals                   2.36         12.4              0.810\n#>  4 2017/18 goals_p90               0.0102        0.302            0.966\n#>  5 2017/18 goals_xg_ratio          1.40          2.15             0.348\n#>  6 2017/18 interceptions          33.4         319.               0.895\n#>  7 2017/18 pass_completion_rate    0.000577      0.00948          0.939\n#>  8 2017/18 shot_conversion_rate    0.00604       0.0128           0.527\n#>  9 2017/18 shots                  32.5         480.               0.932\n#> 10 2017/18 shots_on_target         8.39         73.4              0.886\n#> # ℹ 80 more rows\n```\n:::\n\n\nFor the sake of making discrimination directly comparable to stability (which is only calculated per metric, not per metric and season), we can average the discrimination values over all seasons.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Average discrimination\"}\naverage_discrimination <- discrimination |> \n  dplyr::group_by(metric) |> \n  dplyr::summarize(\n    discrimination = mean(discrimination)\n  ) |> \n  dplyr::arrange(metric)\naverage_discrimination\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\naverage_discrimination\n#> # A tibble: 15 × 2\n#>    metric               discrimination\n#>    <chr>                         <dbl>\n#>  1 assists                       0.600\n#>  2 carries                       0.951\n#>  3 goals                         0.792\n#>  4 goals_p90                     0.830\n#>  5 goals_xg_ratio                0.181\n#>  6 interceptions                 0.889\n#>  7 pass_completion_rate          0.950\n#>  8 shot_conversion_rate          0.507\n#>  9 shots                         0.926\n#> 10 shots_on_target               0.875\n#> 11 shots_p90                     0.956\n#> 12 tackles                       0.895\n#> 13 xa                            0.830\n#> 14 xg                            0.898\n#> 15 xg_p90                        0.929\n```\n:::\n\n\n### Stability\n\nFor stability, we need to calculate \"within\"-player variance, $WV$, and \"total variance\", $TV$, as shown in @eq-stability-short.\n\nFor $WV$, we start by grouping on the on everything but the metric values and season variable in our data frame for observed player-season stats, and calculate variance with `var()`. Then we average the variance across all players with `mean()`.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Calculate within-player variance, WV\"}\nwithin_player_variance <- pivoted_player_season_stats |> \n  ## should check for players with the same name\n  dplyr::group_by(league, team, player, metric) |>\n  dplyr::summarize(\n    seasons_played = dplyr::n(),\n    wv = var(value, na.rm = TRUE)\n  ) |> \n  dplyr::ungroup()\n\nwv <- within_player_variance |>\n  ## Franks et al. don't have something quite like this, where they filter for\n  ##   a minimum number of seasons played. I think they didn't find it necessary\n  ##   after dropping player who have ever had zeros, and because they were working\n  ##   with 20 seasons of NBA data. (I'm working with 6.)\n  dplyr::filter(\n    seasons_played >= 3L\n  ) |> \n  dplyr::group_by(metric) |> \n  dplyr::summarize(\n    wv = mean(wv, na.rm = TRUE)\n  ) |> \n  dplyr::ungroup() |> \n  dplyr::arrange(metric)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nwv\n#> # A tibble: 15 × 2\n#>    metric                        wv\n#>    <chr>                      <dbl>\n#>  1 assists                  2.71   \n#>  2 carries              77143.     \n#>  3 goals                    5.75   \n#>  4 goals_p90                0.0269 \n#>  5 goals_xg_ratio           1.45   \n#>  6 interceptions          122.     \n#>  7 pass_completion_rate     0.00339\n#>  8 shot_conversion_rate     0.0103 \n#>  9 shots                  183.     \n#> 10 shots_on_target         29.1    \n#> 11 shots_p90                0.821  \n#> 12 tackles                239.     \n#> 13 xa                       1.57   \n#> 14 xg                       3.71   \n#> 15 xg_p90                   0.0141\n```\n:::\n\n\nTo finish our variance calculations, we calculate \"total variance\", $TV$. This is the most straightforward of them all, as it involves just a call to `var()` for each metric on the observed player-season stats.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Calculate total variance, TV\"}\ntv <- pivoted_player_season_stats |> \n  dplyr::group_by(metric) |>\n  dplyr::summarize(\n    tv = var(value, na.rm = TRUE)\n  ) |> \n  dplyr::ungroup() |> \n  dplyr::arrange(metric)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\ntv\n#> # A tibble: 15 × 2\n#>    metric                        tv\n#>    <chr>                      <dbl>\n#>  1 assists                   4.16  \n#>  2 carries              161078.    \n#>  3 goals                    11.5   \n#>  4 goals_p90                 0.0925\n#>  5 goals_xg_ratio            1.67  \n#>  6 interceptions           252.    \n#>  7 pass_completion_rate      0.0119\n#>  8 shot_conversion_rate      0.0136\n#>  9 shots                   427.    \n#> 10 shots_on_target          65.2   \n#> 11 shots_p90                 4.76  \n#> 12 tackles                 460.    \n#> 13 xa                        3.15  \n#> 14 xg                        9.27  \n#> 15 xg_p90                    0.0729\n```\n:::\n\n\nWe bring $BV$, $WV$ and $TV$ together to calculate stability.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Calculate stability\"}\naverage_bv <- bv |> \n  dplyr::group_by(metric) |> \n  dplyr::summarize(\n    bv = mean(bv)\n  ) |> \n  dplyr::ungroup()\n\nstability <- average_bv |> \n  dplyr::inner_join(\n    tv,\n    by = dplyr::join_by(metric)\n  ) |>\n  dplyr::inner_join(\n    wv,\n    by = dplyr::join_by(metric)\n  ) |> \n  dplyr::mutate(\n    stability = 1 - (wv - bv) / (tv - bv)\n  ) |> \n  dplyr::arrange(metric)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nstability\n#> # A tibble: 15 × 5\n#>    metric                        bv          tv          wv stability\n#>    <chr>                      <dbl>       <dbl>       <dbl>     <dbl>\n#>  1 assists                 1.66          4.16       2.71        0.580\n#>  2 carries              7808.       161078.     77143.          0.548\n#>  3 goals                   2.38         11.5        5.75        0.629\n#>  4 goals_p90               0.0105        0.0925     0.0269      0.799\n#>  5 goals_xg_ratio          1.35          1.67       1.45        0.696\n#>  6 interceptions          27.8         252.       122.          0.577\n#>  7 pass_completion_rate    0.000582      0.0119     0.00339     0.752\n#>  8 shot_conversion_rate    0.00670       0.0136     0.0103      0.487\n#>  9 shots                  31.7         427.       183.          0.618\n#> 10 shots_on_target         8.17         65.2       29.1         0.634\n#> 11 shots_p90               0.118         4.76       0.821       0.849\n#> 12 tackles                48.3         460.       239.          0.537\n#> 13 xa                      0.538         3.15       1.57        0.607\n#> 14 xg                      0.944         9.27       3.71        0.668\n#> 15 xg_p90                  0.00397       0.0729     0.0141      0.853\n```\n:::\n\n\n## Results and Discussion\n\nLet's make a scatter plot of the discrimination and stability of our metrics, akin to the plots made by Franks et al.\n\n\n\n\n\n\n\n![](discrimination-vs-stability.png)\n\nWe can make the following observations:\n\n-   Un-adjusted tallying (i.e. \"count\") statistics based on total playing time--like shots, tackles, and interceptions--tend to be highly discriminative, but not quite as stable. This makes sense---such statistics have large between-player variance---think about the number of shots that a central defender takes compared to a striker. When aggregated for each player throughout a season, they provide a strong signal for different player types, i.e. positions. Indeed, Franks et al. found the same for NBA and NHL statistics.\n\n-   \"Advanced\" stats like xG and xA also prove to be more discriminative than stable.\n\n-   The other \"advanced\" stat, goals/xG ratio, stands out. It's the only metric that is significantly more stable than discriminative. Although I haven't looked into this extensively or given it much more than a few moments of thought, I believe this is because most players do not score goals in individual matches, but often accumulate some non-zero xG via shots. Thus, Goals/xG can be zero very frequently, meaning that it would be hard to differentiate players just on this ratio. And, because the ratio is often zero, it is found to be stable.\n\n-   Shot conversion rate seems to be the center of the universe, having nearly equal discrimination and stability, both at around 0.5.\n\n-   The \"per 90\" metrics show higher stability than all other stats evaluated. This speaks to the between-player noise-minimizing benefits of comparing players on an equal-minute basis. Their stability is much closer to their discriminative power than most other other metrics.\n\n## Conclusion\n\nWe've replicated the ideas of a commonly cited sports analytics paper[^3], applying them to the beautiful game of soccer. While this blog post was more about replication than insights, we've confirmed that the key observations regarding the meta-metric properties of volume and rate statistics also apply soccer.\n\n[^3]: The fact that they've published [their code](https://github.com/afranks86/meta-analytics) made the replication much less of a daunting task, so huge kudos to the authors. (Note that there were a few tweaks that I needed to make to get all of the code working properly with R \\>4.0.)\n\n-   Discrimination can be used to distinguish between players for a given season. Volume measures like shots and tackles should implicitly provide some indication of player positions and roles. (After all, we wouldn't expect a striker to be making more tackles than a defender.)\n-   Stability represents how much a metric can vary over time. Intuitively, stats that adjust for playing time (i.e. \"per 90\") show less fluctuations from season to season.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}