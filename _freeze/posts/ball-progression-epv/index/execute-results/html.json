{
  "hash": "c1fafb41a22124805714060d180cf2c9",
  "result": {
    "markdown": "---\ntitle: Does completing your passes even matter?\ndescription: Identifying where incomplete passes can have positive impact on the pitch.\ndate: 2024-04-01\ndraft: true\ncategories:\n  - r\n  - soccer\nexecute: \n  code-fold: show\n  eval: true\n  include: true\n  echo: false\n---\n\n\n# Introduction\n\nI heard someone recently say something like \"Possession values (PV) models in soccer basically come down to ball progression\". That's an interesting thought, and add a hunch that it probably isn't too wrong.\n\nOne way of getting at that idea is too look at how your PV model treats incomplete passes.\n\n-   Does it say that all long passes are \"good\" (i.e. have \\>0 PV)?\n-   What role does the starting position of the pass play? (i.e. Are balls crossed into the 18-yard box from the wing treated similarly to goal kicks launched into the opponent's box?)\n-   How does PV for an unsuccessful pass compare to a successful one, holding all else equal?\n\nI attempt to answer some of these questions with [a VAEP model](https://dtai.cs.kuleuven.be/sports/vaep)--an [open-source PV model](https://fivethirtyeight.com/features/possession-is-the-puzzle-of-soccer-analytics-these-models-are-trying-to-solve-it/).[^1] Every PV model is different, but they all generally try assign value to every on-ball action on the pitch. VAEP specifically defines possession value as the difference in goals scored and goals conceded expected in the next 10 actions.\n\n[^1]: This may seem pedantic, but we know that just looking at spatial features [is probably not \"good enough\"](https://fivethirtyeight.com/features/possession-is-the-puzzle-of-soccer-analytics-these-models-are-trying-to-solve-it/) when it comes assigning PV to actions. \\> But location isn't everything. A pass from the center circle to the top of the box might be a valuable through ball that puts a striker through one-on-one with the keeper, or it might be a worthless lob into a crowd of defenders. “With just x-y locations, it’s really hard to tell, 'Is this actually a productive pass to make?'” Rudd said.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Possession Value (PV) for Passes\n\n## Successful Passes\n\nWe'll want to eventually look at the PV of incomplete passes, but it's probably easier to start with completed passes, as we have pretty strong intuition about them--pass the ball successfully closer to the goal, and you're most likely helping your team (i.e. positive PV).\n\n### From the Center Spot, To Anywhere on the Pitch\n\nIn the interactive 12x16 pitch below, the blue tile illustrates where a **typical, hypothetical** pass is made, and the colored tiles illustrate the possession value (PV) associated with a successful pass made to that area. Hovering over the tile shows the PV value above the pitch as well.[^2]\n\n[^2]: Do not be alarmed by the small values! Values between 0.02 and 0.02 is very common for PV models.\n\n::: {.callout-note title=\"\"Typical\" and \"\"Hypothetical\" collapse=\"false\"} **Typical**: I've selected \"constant\" values for non-spatial features, i.e. game state of 0-0 with no time elapsed, pass taken with foot.\n\n**Hypothetical**: I'm generating one set of predictions (PV values) on an x-y grid rather than using (average) PV values from empirical data. (More on that in below.) :::\n\n\n```{ojs}\n//| include: true\n//| fig-cap: A heatmap showing the possession value (PV) of a typical successful pass from roughly the center spot (annotated in blue) to all areas on the pitch. The exact PV value associated with a successful pass ending at the hover point can be viewed above the pitch.\n{\n  const chart = d3.create(\"div\")\n  const title = chart.append(\"div\").attr(\"id\", \"heatmap-title-complete\")\n  title.append(\"p\").html(`PV: <span id='pv-value-complete'>0</span>`)\n  chart.append(\"div\").attr(\"id\", \"heatmap-complete\")\n\n  const legendSwatchContainer = chart.append(\"div\")\n    .attr(\"id\", \"heatmap-legend-complete\")\n    .style(\"display\", \"flex\")\n    .style(\"flex-direction\", \"column\")\n    .style(\"align-items\", \"center\")\n    .style(\"width\", \"100%\");\n\n  const legendRange = [\n    1.1 * d3.min(colorScaleCompleteRange),\n    1.1 * d3.max(colorScaleCompleteRange)\n  ];\n  const stepSize = (legendRange[1] - legendRange[0]) / (swatchParams.num - 1);\n  const legendSwatches = d3.range(legendRange[0], legendRange[1] + stepSize, stepSize);\n  legendSwatches[legendSwatches.length - 1] = legendRange[1];\n\n  const totalLegendWidth = swatchParams.width * swatchParams.num;\n\n  const swatchRow = legendSwatchContainer.append(\"div\")\n    .style(\"display\", \"flex\")\n    .style(\"justify-content\", \"center\")\n    .style(\"width\", \"100%\");\n\n  swatchRow.selectAll(\"div\")\n    .data(legendSwatches)\n    .enter()\n    .append(\"div\")\n    .style(\"width\", `${swatchParams.width}px`)\n    .style(\"height\", `${swatchParams.height}px`)\n    .style(\"background-color\", d => colorScaleComplete(d));\n\n  const labelRow = legendSwatchContainer.append(\"div\")\n    .style(\"display\", \"flex\")\n    .style(\"justify-content\", \"center\")\n    .style(\"width\", `${totalLegendWidth}px`);\n\n  labelRow.selectAll(\"span\")\n    .data(colorScaleCompleteRange)\n    .enter()\n    .append(\"span\")\n    .text(d => {\n      if (d === d3.min(colorScaleCompleteRange)) {\n        return d + \" <=\";\n      } else if (d === d3.max(colorScaleCompleteRange)) {\n        return \">= \" + d;\n      }\n      return d;\n    })\n    // Center the middle text element, then right- and left-align the right and left text labels\n    .style(\"flex\", d => d === 0 ? \"1\" : null)\n    .style(\"text-align\", \"center\")\n\n  return chart.node();\n}\n```\n\n```{ojs}\n//| echo: false\n//| output: false\n{\n  const heatmap_complete = d3_soccer.heatmap(pitch)\n    .colorScale(colorScaleComplete)\n    .enableInteraction(true)\n    .onSelect((x, y, v) => {\n      const cappedValue = Math.min(Math.max(v, -1), 1);\n      d3.select(\"#pv-value-complete\").text(cappedValue.toFixed(3));\n    })\n    .parent_el(\"#heatmap-complete\")\n    .interpolate(false);\n\n  d3.select(\"#heatmap-complete\").html(\"\").datum(complete_pv_data).call(heatmap_complete);\n\n  const svg = d3.select(\"#heatmap-complete\").select(\"svg\");\n\n  svg.append(\"rect\")\n    .attr(\"x\", passStartParams.x)\n    .attr(\"y\", passStartParams.y)\n    .attr(\"width\", tileParams.width)\n    .attr(\"height\", tileParams.height)\n    .style(\"stroke\", \"blue\")\n    .style(\"fill\", \"none\")\n    .style(\"stroke-width\", \"1px\");\n}\n```\n\n\nI'd say this illustration matches common knowledge Forward completed passes should be assigned non-trivial positive value.\n\n#### Empirical average PV\n\nI called out the fact that the PV pitch above is a \"hypothetical\" and \"typical\" one. An alternative approach would be to view the **average** PV of **empirical** completed passes. Theoretically this shouldn't look too different--we're using the same underlying model after all--but I think it's useful to verify that our prior illustration isn't misrepresentation of historical PV.[^3]\n\n[^3]: This may seem pedantic, but we know that just looking at spatial features [is probably not \"good enough\"](https://fivethirtyeight.com/features/possession-is-the-puzzle-of-soccer-analytics-these-models-are-trying-to-solve-it/) when it comes assigning PV to actions.\n\n    > But location isn't everything. A pass from the center circle to the top of the box might be a valuable through ball that puts a striker through one-on-one with the keeper, or it might be a worthless lob into a crowd of defenders. “With just x-y locations, it’s really hard to tell, 'Is this actually a productive pass to make?'” Rudd said.\n\n\n```{ojs}\n//| include: true\n//| fig-cap: A heatmap showing the average possession value (PV) of empirical successful passes from the center spot (annotated in blue) to all areas on the pitch. The relative frequency of completed passes from the center spot to each other cell is shown as a percentage. The exact PV value associated with a successful pass ending at the hover point can be viewed above the pitch.\n{\n  const chart = d3.create(\"div\")\n  const title = chart.append(\"div\").attr(\"id\", \"heatmap-title-complete-empirical\")\n  title.append(\"p\").html(`PV: <span id='pv-value-complete-empirical'>0</span>`)\n  chart.append(\"div\").attr(\"id\", \"heatmap-complete-empirical\")\n\n  const legendSwatchContainer = chart.append(\"div\")\n    .attr(\"id\", \"heatmap-legend-complete-empirical\")\n    .style(\"display\", \"flex\")\n    .style(\"flex-direction\", \"column\")\n    .style(\"align-items\", \"center\")\n    .style(\"width\", \"100%\");\n\n  const legendRange = [\n    1.1 * d3.min(colorScaleCompleteRange),\n    1.1 * d3.max(colorScaleCompleteRange)\n  ];\n  const stepSize = (legendRange[1] - legendRange[0]) / (swatchParams.num - 1);\n  const legendSwatches = d3.range(legendRange[0], legendRange[1] + stepSize, stepSize);\n  legendSwatches[legendSwatches.length - 1] = legendRange[1];\n\n  const totalLegendWidth = swatchParams.width * swatchParams.num;\n\n  const swatchRow = legendSwatchContainer.append(\"div\")\n    .style(\"display\", \"flex\")\n    .style(\"justify-content\", \"center\")\n    .style(\"width\", \"100%\");\n\n  swatchRow.selectAll(\"div\")\n    .data(legendSwatches)\n    .enter()\n    .append(\"div\")\n    .style(\"width\", `${swatchParams.width}px`)\n    .style(\"height\", `${swatchParams.height}px`)\n    .style(\"background-color\", d => colorScaleComplete(d));\n\n  const labelRow = legendSwatchContainer.append(\"div\")\n    .style(\"display\", \"flex\")\n    .style(\"justify-content\", \"center\")\n    .style(\"width\", `${totalLegendWidth}px`);\n\n  labelRow.selectAll(\"span\")\n    .data(colorScaleCompleteRange)\n    .enter()\n    .append(\"span\")\n    .text(d => {\n      if (d === d3.min(colorScaleCompleteRange)) {\n        return d + \" <=\";\n      } else if (d === d3.max(colorScaleCompleteRange)) {\n        return \">= \" + d;\n      }\n      return d;\n    })\n    .style(\"flex\", d => d === 0 ? \"1\" : null)\n    .style(\"text-align\", \"center\")\n\n  return chart.node();\n}\n```\n\n```{ojs}\n//| echo: false\n//| output: false\n{\n  const heatmap_complete_empirical = d3_soccer.heatmap(pitch)\n    .colorScale(colorScaleComplete)\n    .enableInteraction(true)\n    .onSelect((x, y, v) => {\n      const cappedValue = Math.min(Math.max(v, -1), 1);\n      d3.select(\"#pv-value-complete-empirical\").text(cappedValue.toFixed(3));\n    })\n    .parent_el(\"#heatmap-complete-empirical\")\n    .interpolate(false);\n\n  d3.select(\"#heatmap-complete-empirical\").html(\"\").datum(complete_actual_pv_data).call(heatmap_complete_empirical);\n\n  const svg = d3.select(\"#heatmap-complete-empirical\").select(\"svg\");\n\n  const cells = svg.selectAll(\".cell\");\n\n  cells.each(function(d, i) {\n    const cell = d3.select(this);\n    const bbox = this.getBBox();\n\n    d3.select(this.parentNode)\n      .append(\"text\")\n      .attr(\"x\", bbox.x + bbox.width / 2)\n      .attr(\"y\", bbox.y + bbox.height / 2)\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"alignment-baseline\", \"central\")\n      .style(\"font-size\", \"2.5px\")\n      .style(\"pointer-events\", \"none\")\n      .text((d.prop * 100).toFixed(1) + \"%\");\n  });\n\n  svg.append(\"rect\")\n    .attr(\"x\", passStartParams.x)\n    .attr(\"y\", passStartParams.y)\n    .attr(\"width\", tileParams.width)\n    .attr(\"height\", tileParams.height)\n    .style(\"stroke\", \"blue\")\n    .style(\"fill\", \"none\")\n    .style(\"stroke-width\", \"1px\");\n}\n```\n\n\nThe gradient looks similar to our hypothetical pitch, which is what we hoped to confirm. This empirical pitch implicitly embeds historical information about the passes actually completed from the center spot. If all the completed passes from the center spot were historically from headers, we might have seen a different looking gradient (since the hypothetical view assumes a footed pass, which can lead to much different subsequent chains of passes). So we know that \"location isn't everything\" and that we're simplifying a lot by just looking at a 2-D pitch, but we can feel ok that our hypothetical view is at least fairly approximating empirical PV.\n\nThe other interesting this view offers--we can see the actual relative frequency of the end points of passes from the center spot highlights just how uncommon completed passes into the box are from the center spot. So yes, successful passes into the box add a lot of value, but in reality they are hard to complete, so they don't happen all that often.\n\n### From Anywhere on the Pitch, To Anywhere on the Pitch\n\nNow, to give the full picture, the interactive pitch below will dynamically update to show PV values associated with a pass starting from ANY tile that you hover over. pitch\n\n\n```{ojs}\n//| include: true\n//| fig-cap: A heatmap showing the possession value (PV) of a typical successful pass from the hover spot to all areas on the pitch. The highest and lowest PV values across all end points associated with a completed pass from the hover point is shown above the pitch.\n{\n  const chart = d3.create(\"div\")\n  const title = chart.append(\"div\").attr(\"id\", \"heatmap-title-complete-nested\")\n  title.append(\"p\").html(`min PV: <span id='pv-min-complete-nested'>0</span>, max PV: <span id='pv-max-complete-nested'>0</span>`)\n  chart.append(\"div\").attr(\"id\", \"heatmap-complete-nested\")\n  \n  const legendSwatchContainer = chart.append(\"div\")\n    .attr(\"id\", \"heatmap-legend-complete-nested\")\n    .style(\"display\", \"flex\")\n    .style(\"flex-direction\", \"column\")\n    .style(\"align-items\", \"center\")\n    .style(\"width\", \"100%\");\n  \n  const legendRange = [\n    1.1 * d3.min(colorScaleCompleteRange),\n    1.1 * d3.max(colorScaleCompleteRange)\n  ];\n  const stepSize = (legendRange[1] - legendRange[0]) / (swatchParams.num - 1);\n  const legendSwatches = d3.range(legendRange[0], legendRange[1] + stepSize, stepSize);\n  legendSwatches[legendSwatches.length - 1] = legendRange[1];\n  \n  const totalLegendWidth = swatchParams.width * swatchParams.num;\n  \n  const swatchRow = legendSwatchContainer.append(\"div\")\n    .style(\"display\", \"flex\")\n    .style(\"justify-content\", \"center\")\n    .style(\"width\", \"100%\");\n  \n  swatchRow.selectAll(\"div\")\n    .data(legendSwatches)\n    .enter()\n    .append(\"div\")\n    .style(\"width\", `${swatchParams.width}px`)\n    .style(\"height\", `${swatchParams.height}px`)\n    .style(\"background-color\", d => colorScaleComplete(d));\n  \n  const labelRow = legendSwatchContainer.append(\"div\")\n    .style(\"display\", \"flex\")\n    .style(\"justify-content\", \"center\")\n    .style(\"width\", `${totalLegendWidth}px`);\n  \n  \n  labelRow.selectAll(\"span\")\n    .data(colorScaleCompleteRange)\n    .enter()\n    .append(\"span\")\n    .text(d => {\n      if (d === d3.min(colorScaleCompleteRange)) {\n        return d + \" <=\";\n      } else if (d === d3.max(colorScaleCompleteRange)) {\n        return \">= \" + d;\n      }\n      return d;\n    })\n    .style(\"flex\", d => d === 0 ? \"1\" : null)\n    .style(\"text-align\", \"center\")\n  \n  return chart.node();\n\n}\n```\n\n```{ojs}\n//| echo: false\n//| output: false\n{  \n  const heatmap_complete_nested = d3_soccer.heatmap(pitch)\n    .colorScale(d3.scaleLinear().domain([-1, 1]).range([\"white\", \"white\"]))\n    .enableInteraction(true)\n    .onSelect((x, y, v) => {\n      const rawMinValue = d3.min(v, d => d.value);\n      const rawMaxValue = d3.max(v, d => d.value);\n      const minValue = Math.max(rawMinValue, -1);\n      const maxValue = Math.min(rawMaxValue, 1);\n  \n      d3.select('#pv-min-complete-nested').text(minValue.toFixed(3));\n      d3.select('#pv-max-complete-nested').text(maxValue.toFixed(3));\n      const cells = d3\n        .select(\"#heatmap-complete-nested\")\n        .selectAll(\"rect.cell\")\n        .data(v)\n  \n      cells.enter()\n        .merge(cells) // Merge enter and update selections\n        .attr(\"x\", d => d.x)\n        .attr(\"y\", d => d.y)\n        .attr(\"width\", d => d.width)\n        .attr(\"height\", d => d.height)\n        .style(\"fill\", d => colorScaleComplete(+d.value));\n  \n      cells.exit().remove()\n  \n      d3.select(\"#heatmap-complete-nested\").selectAll(\"rect.cell\").data(complete_nested_pv_data)\n    })\n    .parent_el(\"#heatmap-complete-nested\")\n    .interpolate(false);\n  \n  d3.select(\"#heatmap-complete-nested\").html(\"\").datum(complete_nested_pv_data).call(heatmap_complete_nested);\n}\n```\n\n\nThere are several take-aways one might make from this view.[^4] The one I see is that as you move your mouse (i.e. the starting point of the pass) from the defender's box to the opponent's box, the consolidate green box of +0.025 PV doesn't change much. It stays basically at around the final quarter of the pitch. So you can't just complete a 25 yard pass from the top of your own box progressing the ball towards the middle of the pitch and expect to get anywhere near the same PV as completing a 25 yard pass from the center of the pitch to near the opponent's 18-yard box. The end point really matters.\n\n[^4]: There are some oddities if you look close enough (e.g. negative PV for long cross pitch completed passes), but such is the nature of a machine learning model.\n\n## Unsuccessful Passes\n\n### From the Center Spot, To Anywhere on the Pitch\n\nNow, the more interesting side of things--how does the PV heatmap look for incomplete passes? Let's start with an example again, looking at PV for unsuccessful passes from the center spot.\n\n\n```{ojs}\n//| include: true\n//| fig-cap: A heatmap showing the possession value (PV) of a typical unsuccessful pass from roughly the center spot (annotated in blue) to all areas on the pitch. The exact PV value associated with an unsuccessful pass ending at the hover point can be viewed above the pitch.\n{\n  const chart = d3.create(\"div\")\n  const title = chart.append(\"div\").attr(\"id\", \"heatmap-title-incomplete\")\n  title.append(\"p\").html(`PV: <span id='pv-value-incomplete'>0</span>`)\n  chart.append(\"div\").attr(\"id\", \"heatmap-incomplete\")\n  \n  const legendSwatchContainer = chart.append(\"div\")\n    .attr(\"id\", \"heatmap-legend-incomplete\")\n    .style(\"display\", \"flex\")\n    .style(\"flex-direction\", \"column\")\n    .style(\"align-items\", \"center\")\n    .style(\"width\", \"100%\");\n  \n  const legendRange = [\n    1.1 * d3.min(colorScaleIncompleteRange),\n    1.1 * d3.max(colorScaleIncompleteRange)\n  ];\n  const stepSize = (legendRange[1] - legendRange[0]) / (swatchParams.num - 1);\n  const legendSwatches = d3.range(legendRange[0], legendRange[1] + stepSize, stepSize);\n  legendSwatches[legendSwatches.length - 1] = legendRange[1];\n  \n  const totalLegendWidth = swatchParams.width * swatchParams.num;\n  \n  const swatchRow = legendSwatchContainer.append(\"div\")\n    .style(\"display\", \"flex\")\n    .style(\"justify-content\", \"center\")\n    .style(\"width\", \"100%\");\n  \n  swatchRow.selectAll(\"div\")\n    .data(legendSwatches)\n    .enter()\n    .append(\"div\")\n    .style(\"width\", `${swatchParams.width}px`)\n    .style(\"height\", `${swatchParams.height}px`)\n    .style(\"background-color\", d => colorScaleIncomplete(d));\n  \n  \n  const labelRow = legendSwatchContainer.append(\"div\")\n    .style(\"display\", \"flex\")\n    .style(\"justify-content\", \"center\")\n    .style(\"width\", `${totalLegendWidth}px`);\n  \n  \n  labelRow.selectAll(\"span\")\n    .data(colorScaleIncompleteRange)\n    .enter()\n    .append(\"span\")\n    .text(d => {\n      if (d === d3.min(colorScaleIncompleteRange)) {\n        return d + \" <=\";\n      } else if (d === d3.max(colorScaleIncompleteRange)) {\n        return \">= \" + d;\n      }\n      return d;\n    })\n    .style(\"flex\", d => d === 0 ? \"1\" : null)\n    .style(\"text-align\", \"center\")\n  \n  return chart.node();\n}\n```\n\n```{ojs}\n//| echo: false\n//| output: false\n{\n  const heatmap_incomplete = d3_soccer.heatmap(pitch)\n    .colorScale(colorScaleIncomplete)\n    .enableInteraction(true)\n    .onSelect((x, y, v) => {\n      const cappedValue = Math.min(Math.max(v, -1), 1);\n      d3.select('#pv-value-incomplete').text(cappedValue.toFixed(3));\n    })\n    .parent_el(\"#heatmap-incomplete\")\n    .interpolate(false);\n  \n  d3.select(\"#heatmap-incomplete\").html(\"\").datum(incomplete_pv_data).call(heatmap_incomplete);\n  \n  const svg = d3.select(\"#heatmap-incomplete\").select(\"svg\");\n  \n  svg.append(\"rect\")\n    .attr(\"x\", passStartParams.x)\n    .attr(\"y\", passStartParams.y)\n    .attr(\"width\", tileParams.width)\n    .attr(\"height\", tileParams.height)\n    .style(\"stroke\", \"blue\")\n    .style(\"fill\", \"none\")\n    .style(\"stroke-width\", \"1px\");\n}\n```\n\n\nI think this grid is actually fairly intuitive. Incomplete passes backwards have fairly negative PVs, as those are leading to turnovers probably setting up the opponent for a good scoring opportunity. Incomplete passes forward mostly have neutral PVs, with some notable spots on the pitch having non-trivially positive PVs.\n\nSome of those exceptions include the top of the 18-yard-box (i.e. [\"zone 14\"](https://www.youtube.com/watch?v=_EFtACGzD7E)), where a loss of possession can actually be advantageous, as it leaves the opponent likely in a vulnerable position. You could also infer that the \"risk\" of losing possession to passes to zone 14 is justified from the potential to take a shot. The other observable positive PV end-points for passes taken from the center of the pitch are the goal lines on the ends of the 18-yard box. We could deduce that passes to those areas often lead to cutback passes to the front of the goal, which often lead to high-converting shots. So again, the PV model seems to indicate that the \"lost opportunity\" of such a (failed) pass seems worth it, on average.\n\n#### Empirical average PV\n\n\n```{ojs}\n//| include: true\n//| fig-cap: A heatmap showing the average possession value (PV) of empirical unsuccessful passes from the center spot (annotated in blue) to all areas of the pitch. The relative frequency of incomplete passes from the center spot to each other cell is shown as a percentage. The exact PV value associated with an unsuccessful pass ending at the hover point can be viewed above the pitch.\n{\n  const chart = d3.create(\"div\")\n  const title = chart.append(\"div\").attr(\"id\", \"heatmap-title-incomplete-empirical\")\n  title.append(\"p\").html(`PV: <span id='pv-value-incomplete-empirical'>0</span>`)\n  chart.append(\"div\").attr(\"id\", \"heatmap-incomplete-empirical\")\n\n  const legendSwatchContainer = chart.append(\"div\")\n    .attr(\"id\", \"heatmap-legend-incomplete-empirical\")\n    .style(\"display\", \"flex\")\n    .style(\"flex-direction\", \"column\")\n    .style(\"align-items\", \"center\")\n    .style(\"width\", \"100%\");\n\n  const legendRange = [\n    1.1 * d3.min(colorScaleIncompleteRange),\n    1.1 * d3.max(colorScaleIncompleteRange)\n  ];\n  const stepSize = (legendRange[1] - legendRange[0]) / (swatchParams.num - 1);\n  const legendSwatches = d3.range(legendRange[0], legendRange[1] + stepSize, stepSize);\n  legendSwatches[legendSwatches.length - 1] = legendRange[1];\n\n  const totalLegendWidth = swatchParams.width * swatchParams.num;\n\n  const swatchRow = legendSwatchContainer.append(\"div\")\n    .style(\"display\", \"flex\")\n    .style(\"justify-content\", \"center\")\n    .style(\"width\", \"100%\");\n\n  swatchRow.selectAll(\"div\")\n    .data(legendSwatches)\n    .enter()\n    .append(\"div\")\n    .style(\"width\", `${swatchParams.width}px`)\n    .style(\"height\", `${swatchParams.height}px`)\n    .style(\"background-color\", d => colorScaleIncomplete(d));\n\n  const labelRow = legendSwatchContainer.append(\"div\")\n    .style(\"display\", \"flex\")\n    .style(\"justify-content\", \"center\")\n    .style(\"width\", `${totalLegendWidth}px`);\n\n  labelRow.selectAll(\"span\")\n    .data(colorScaleIncompleteRange)\n    .enter()\n    .append(\"span\")\n    .text(d => {\n      if (d === d3.min(colorScaleIncompleteRange)) {\n        return d + \" <=\";\n      } else if (d === d3.max(colorScaleIncompleteRange)) {\n        return \">= \" + d;\n      }\n      return d;\n    })\n    .style(\"flex\", d => d === 0 ? \"1\" : null)\n    .style(\"text-align\", \"center\")\n\n  return chart.node();\n}\n```\n\n```{ojs}\n//| echo: false\n//| output: false\n{\n  const heatmap_incomplete_empirical = d3_soccer.heatmap(pitch)\n    .colorScale(colorScaleIncomplete)\n    .enableInteraction(true)\n    .onSelect((x, y, v) => {\n      const cappedValue = Math.min(Math.max(v, -1), 1);\n      d3.select(\"#pv-value-incomplete-empirical\").text(cappedValue.toFixed(3));\n    })\n    .parent_el(\"#heatmap-incomplete-empirical\")\n    .interpolate(false);\n\n  d3.select(\"#heatmap-incomplete-empirical\").html(\"\").datum(incomplete_actual_pv_data).call(heatmap_incomplete_empirical);\n\n  const svg = d3.select(\"#heatmap-incomplete-empirical\").select(\"svg\");\n\n  const cells = svg.selectAll(\".cell\");\n\n  cells.each(function(d, i) {\n    const cell = d3.select(this);\n    const bbox = this.getBBox();\n\n    d3.select(this.parentNode)\n      .append(\"text\")\n      .attr(\"x\", bbox.x + bbox.width / 2)\n      .attr(\"y\", bbox.y + bbox.height / 2)\n      .attr(\"text-anchor\", \"middle\")\n      .attr(\"alignment-baseline\", \"central\")\n      .style(\"font-size\", \"2.5px\")\n      .style(\"pointer-events\", \"none\")\n      .text((d.prop * 100).toFixed(1) + \"%\");\n  });\n\n  svg.append(\"rect\")\n    .attr(\"x\", passStartParams.x)\n    .attr(\"y\", passStartParams.y)\n    .attr(\"width\", tileParams.width)\n    .attr(\"height\", tileParams.height)\n    .style(\"stroke\", \"blue\")\n    .style(\"fill\", \"none\")\n    .style(\"stroke-width\", \"1px\");\n}\n```\n\n\n### From Anywhere on the Pitch, To Anywhere on the Pitch\n\nNow lets scale up our pass PV grid to all incomplete passes. Hovering over a tile will show PV associated with unsuccessful passes from that point on the pitch.\n\n\n```{ojs}\n//| include: true\n//| fig-cap: A heatmap showing the possession value (PV) of an average unsuccessful pass from the hover spot to all areas on the pitch. The highest and lowest PV values across all end points associated with an incomplete pass from the hover point is shown above the pitch.\n{\n  const chart = d3.create(\"div\")\n  const title = chart.append(\"div\").attr(\"id\", \"heatmap-title-incomplete-nested\")\n  title.append(\"p\").html(`min PV: <span id='pv-min-incomplete-nested'>0</span>, max PV: <span id='pv-max-incomplete-nested'>0</span>`)\n  chart.append(\"div\").attr(\"id\", \"heatmap-incomplete-nested\")\n  \n  const legendSwatchContainer = chart.append(\"div\")\n    .attr(\"id\", \"heatmap-legend-incomplete-nested\")\n    .style(\"display\", \"flex\")\n    .style(\"flex-direction\", \"column\")\n    .style(\"align-items\", \"center\")\n    .style(\"width\", \"100%\");\n  \n  const legendRange = [\n    1.1 * d3.min(colorScaleIncompleteRange),\n    1.1 * d3.max(colorScaleIncompleteRange)\n  ];\n  const stepSize = (legendRange[1] - legendRange[0]) / (swatchParams.num - 1);\n  const legendSwatches = d3.range(legendRange[0], legendRange[1] + stepSize, stepSize);\n  legendSwatches[legendSwatches.length - 1] = legendRange[1];\n  \n  const totalLegendWidth = swatchParams.width * swatchParams.num;\n  \n  \n  const swatchRow = legendSwatchContainer.append(\"div\")\n    .style(\"display\", \"flex\")\n    .style(\"justify-content\", \"center\")\n    .style(\"width\", \"100%\");\n  \n  swatchRow.selectAll(\"div\")\n    .data(legendSwatches)\n    .enter()\n    .append(\"div\")\n    .style(\"width\", `${swatchParams.width}px`)\n    .style(\"height\", `${swatchParams.height}px`)\n    .style(\"background-color\", d => colorScaleIncomplete(d));\n  \n  const labelRow = legendSwatchContainer.append(\"div\")\n    .style(\"display\", \"flex\")\n    .style(\"justify-content\", \"center\")\n    .style(\"width\", `${totalLegendWidth}px`);\n  \n  labelRow.selectAll(\"span\")\n    .data(colorScaleIncompleteRange)\n    .enter()\n    .append(\"span\")\n    .text(d => {\n      if (d === d3.min(colorScaleIncompleteRange)) {\n        return d + \" <=\";\n      } else if (d === d3.max(colorScaleIncompleteRange)) {\n        return \">= \" + d;\n      }\n      return d;\n    })\n    .style(\"flex\", d => d === 0 ? \"1\" : null)\n    .style(\"text-align\", \"center\")\n  \n  return chart.node();\n}\n```\n\n```{ojs}\n//| echo: false\n//| output: false\n{  \n  const heatmap_incomplete_nested = d3_soccer.heatmap(pitch)\n    .colorScale(d3.scaleLinear().domain([-1, 1]).range([\"white\", \"white\"]))\n    .enableInteraction(true)\n    .onSelect((x, y, v) => {\n      const rawMinValue = d3.min(v, d => d.value);\n      const rawMaxValue = d3.max(v, d => d.value);\n      const minValue = Math.max(rawMinValue, -1);\n      const maxValue = Math.min(rawMaxValue, 1);\n  \n      d3.select('#pv-min-incomplete-nested').text(minValue.toFixed(3));\n      d3.select('#pv-max-incomplete-nested').text(maxValue.toFixed(3));\n      const cells = d3\n        .select(\"#heatmap-incomplete-nested\")\n        .selectAll(\"rect.cell\")\n        .data(v)\n  \n      cells.enter()\n        .merge(cells) // Merge enter and update selections\n        .attr(\"x\", d => d.x)\n        .attr(\"y\", d => d.y)\n        .attr(\"width\", d => d.width)\n        .attr(\"height\", d => d.height)\n        .style(\"fill\", d => colorScaleIncomplete(+d.value));\n  \n      cells.exit().remove()\n  \n      d3.select(\"#heatmap-incomplete-nested\").selectAll(\"rect.cell\").data(incomplete_nested_pv_data)\n    })\n    .parent_el(\"#heatmap-incomplete-nested\")\n    .interpolate(false);\n  \n  d3.select(\"#heatmap-incomplete-nested\").html(\"\").datum(incomplete_nested_pv_data).call(heatmap_incomplete_nested);\n}\n```\n\n\n# Conclusion\n\nI'll note that the choice of model surely plays a role in the inference we'll make. Even [atomic VAEP](https://dtai.cs.kuleuven.be/sports/blog/introducing-atomic-spadl:-a-new-way-to-represent-event-stream-data), which splits passes into two actions--the pass itself and the reception (or lack of)--may yield different answers.\n\n\n```{ojs}\n//| include: false\npitch = d3_soccer.pitch()\n.height(300)\n.rotate(false)\n.showDirOfPlay(true)\n.shadeMiddleThird(false)\n.pitchStrokeWidth(0.5)\n.clip([[0, 0], [105, 68]]);\n```\n\n```{ojs}\n//| include: false\nd3 = require(\"d3@v5\")\n```\n\n```{ojs}\n//| include: false\nd3_soccer = require(\"d3-soccer@0.1.0\")\n```\n\n```{ojs}\n//| label: complete_pv_data\n//| include: false\ncomplete_pv_data  = FileAttachment(\"complete_pv_data.json\").json()\n```\n\n```{ojs}\n//| label: complete_actual_pv_data\n//| include: false\ncomplete_actual_pv_data  = FileAttachment(\"complete_actual_pv_data.json\").json()\n```\n\n```{ojs}\n//| label: incomplete_pv_data\n//| include: false\nincomplete_pv_data = FileAttachment(\"incomplete_pv_data.json\").json()\n```\n\n```{ojs}\n//| label: incomplete_actual_pv_data\n//| include: false\nincomplete_actual_pv_data  = FileAttachment(\"incomplete_actual_pv_data.json\").json()\n```\n\n```{ojs}\n//| label: complete_nested_pv_data\n//| include: false\ncomplete_nested_pv_data  = FileAttachment(\"complete_nested_pv_data.json\").json()\n```\n\n```{ojs}\n//| label: incomplete_nested_pv_data\n//| include: false\nincomplete_nested_pv_data = FileAttachment(\"incomplete_nested_pv_data.json\").json()\n```\n\n```{ojs}\n//| label: colorScaleCompleteRange\n//| include: false\ncolorScaleCompleteRange = [-0.025, 0, 0.025]\n```\n\n```{ojs}\n//| label: colorScaleIncompleteRange\n//| include: false\ncolorScaleIncompleteRange = [-0.025, 0, 0.025]\n```\n\n```{ojs}\n//| label: colorScaleComplete\n//| include: false\ncolorScaleComplete = d3.scaleLinear()\n  .domain(colorScaleCompleteRange)\n  .range([\"#a6611a\", \"white\", \"#018571\"]).clamp(true)\n```\n\n```{ojs}\n//| label: colorScaleIncomplete\n//| include: false\ncolorScaleIncomplete = d3.scaleLinear()\n  .domain(colorScaleIncompleteRange)\n  .range([\"#d01c8b\", \"white\", \"#4dac26\"]).clamp(true)\n```\n\n```{ojs}\n//| label: swatchParams\n//| include: false\nswatchParams = {\n  return {\n    width: 40,\n    height: 20,\n    num: 7\n  }\n}\n```\n\n```{ojs}\n//| label: passStartParams\n//| include: false\npassStartParams = {\n  return {\n    x: 45.9375,\n    y: 28.33333\n  }\n}\n```\n\n```{ojs}\n//| label: tileParams\n//| include: false\ntileParams = {\n  return {\n    width: 6.5625,\n    height: 5.666667\n  }\n}\n```\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}